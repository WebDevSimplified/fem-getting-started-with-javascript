{"pageProps":{"post":{"attributes":{"description":"Master the Sources tab and JavaScript debugger in Chrome DevTools for advanced debugging with breakpoints, stepping, and call stack inspection."},"html":"<h1>Sources Tab and JavaScript Debugger</h1>\n<p>The Sources tab in Chrome DevTools is the most powerful tool for debugging JavaScript code. It allows you to pause execution, step through code line by line, inspect variables, and understand exactly what your program is doing at any moment. This is essential for finding complex bugs that console logging alone can&#39;t solve.</p>\n<h2>Sources Tab Overview</h2>\n<p>The Sources tab is divided into three main panels:</p>\n<ol>\n<li><strong>File Navigator</strong> (left): Shows all files loaded by your page</li>\n<li><strong>Code View</strong> (center): Displays source code for the selected file</li>\n<li><strong>Debugger Sidebar</strong> (right): Shows scope, call stack, breakpoints, and more</li>\n</ol>\n<h2>Basic Breakpoints</h2>\n<p>Breakpoints pause code execution at specific lines, allowing you to inspect the program state.</p>\n<h3>Setting Breakpoints</h3>\n<p>You can set breakpoints by either clicking the line number where you want your code to stop in the code view or typing <code>debugger</code> in your code where you want to pause execution.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hi&quot;</span>)\n<span class=\"hljs-keyword\">debugger</span> <span class=\"hljs-comment\">// Execution will pause here</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Bye&quot;</span>)\n</code></pre><h3>Managing Breakpoints</h3>\n<p>On the right sidebar, you can manage all your breakpoints under the &quot;Breakpoints&quot; section by toggling them on/off or removing them entirely.</p>\n<h4>Pausing on Exceptions</h4>\n<p>You can configure the debugger to pause when errors occur in your code.</p>\n<ul>\n<li><strong>Uncaught Exceptions (Always Enable)</strong>: Pause on any error in your code that isn&#39;t handled</li>\n<li><strong>Caught Exceptions (Not Usually Needed)</strong>: Pause on any error that is properly handled by your code</li>\n</ul>\n<h2>Code Execution Control</h2>\n<p>When execution pauses at a breakpoint, you can control how the program continues. These buttons are located at the top of the right panel.</p>\n<ol>\n<li><strong>Continue (F8)</strong>: Resume normal execution until next breakpoint</li>\n<li><strong>Step Over (F10)</strong>: Execute current line, and skip over function calls</li>\n<li><strong>Step Into (F11)</strong>: Enter function calls to debug inside them</li>\n<li><strong>Step Out (Shift+F11)</strong>: Finish current function and return to caller</li>\n<li><strong>Step (F9)</strong>: Similar to Step Into, but doesn&#39;t wait for async operations</li>\n</ol>\n<h3>Stepping Through Code</h3>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">complexCalculation</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">debugger</span> <span class=\"hljs-comment\">// Pause here</span>\n  <span class=\"hljs-keyword\">const</span> result1 = <span class=\"hljs-title function_\">multiply</span>(a) <span class=\"hljs-comment\">// F10: Step over (don&#x27;t enter multiply)</span>\n  <span class=\"hljs-keyword\">const</span> result2 = <span class=\"hljs-title function_\">math</span>(b) <span class=\"hljs-comment\">// F11: Step into (enter math)</span>\n  <span class=\"hljs-keyword\">return</span> result1 + result2 <span class=\"hljs-comment\">// You will pause here after stepping out of math</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">multiply</span>(<span class=\"hljs-params\">value</span>) {\n  <span class=\"hljs-keyword\">return</span> value * <span class=\"hljs-number\">2</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">math</span>(<span class=\"hljs-params\">value</span>) {\n  <span class=\"hljs-comment\">// If you step into this function, you&#x27;ll pause here</span>\n  <span class=\"hljs-keyword\">const</span> doubled = value * <span class=\"hljs-number\">2</span>\n  <span class=\"hljs-keyword\">const</span> squared = doubled * doubled <span class=\"hljs-comment\">// Shift+F11: Step out (return to complexCalculation)</span>\n  <span class=\"hljs-keyword\">return</span> squared\n}\n\n<span class=\"hljs-title function_\">complexCalculation</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)\n</code></pre><h3>Step vs Step Into</h3>\n<p>When you use <strong>Step Into</strong>, it enters the function call and pauses at the first line inside that function even if it has to wait for asynchronous code. If you use <strong>Step</strong>, it will execute the current line and immediately pause at the next line, skipping any asynchronous operations.</p>\n<!-- prettier-ignore -->\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">debugger</span> <span class=\"hljs-comment\">// Pause here</span>\n<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Inside&quot;</span>) <span class=\"hljs-comment\">// Step Into will wait 1 second and then pause here</span>\n}, <span class=\"hljs-number\">1000</span>)\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;After&quot;</span>) <span class=\"hljs-comment\">// Step will skip over the timeout and pause here immediately</span>\n</code></pre><h2>Scope and Variable Inspection</h2>\n<p>The right sidebar shows detailed information about variables and scope when execution is paused.</p>\n<h3>Scope Panel</h3>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">globalVar</span> = <span class=\"hljs-string\">&quot;I&#x27;m global&quot;</span>\n<span class=\"hljs-keyword\">const</span> scriptVar = <span class=\"hljs-string\">&quot;I&#x27;m script&quot;</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">outerFunction</span>(<span class=\"hljs-params\">param1</span>) {\n  <span class=\"hljs-keyword\">const</span> outerVar = <span class=\"hljs-string\">&quot;I&#x27;m in outer scope&quot;</span>\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">innerFunction</span>(<span class=\"hljs-params\">param2</span>) {\n    <span class=\"hljs-keyword\">const</span> innerVar = <span class=\"hljs-string\">&quot;I&#x27;m in inner scope&quot;</span>\n\n    <span class=\"hljs-keyword\">debugger</span> <span class=\"hljs-comment\">// Stop here</span>\n\n    <span class=\"hljs-keyword\">return</span> param1 + param2 + outerVar + innerVar + globalVar\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">innerFunction</span>(<span class=\"hljs-string\">&quot;inner param&quot;</span>)\n}\n\n<span class=\"hljs-title function_\">outerFunction</span>(<span class=\"hljs-string\">&quot;outer param&quot;</span>)\n</code></pre><p><strong>When paused, the Scope panel shows:</strong></p>\n<ul>\n<li><strong>Local</strong>: Variables in current function (<code>innerVar</code>, <code>param2</code>)</li>\n<li><strong>Closure</strong>: Variables from outer scopes (<code>outerVar</code>, <code>param1</code>)</li>\n<li><strong>Script</strong>: Global variables (<code>scriptVar</code>)</li>\n<li><strong>Global</strong>: Variables attached to the <code>window</code> object (<code>globalVar</code>)</li>\n</ul>\n<h3>Inspecting Variables</h3>\n<p>When paused you can hover over any variable in your code to see its current value.</p>\n<h4>Watch expressions</h4>\n<p>The Watch panel allows you to monitor specific variables or expressions continuously by entering any expression you want to track.</p>\n<h4>Console evaluation</h4>\n<p>While paused you can run code in the console that has access to the current scope. This is useful for testing fixes or inspecting values without modifying your code.</p>\n<h2>Call Stack Analysis</h2>\n<p>The Call Stack panel shows the sequence of function calls that led to the current point. This is the same as the &quot;stack trace&quot; you see in error messages, but you can explore it interactively by clicking on any function in the stack to jump to that point in the code.</p>\n<h2>Advanced Breakpoints</h2>\n<p>There are many advanced breakpoint types you can use to pause execution under specific conditions</p>\n<h3>DOM Breakpoints</h3>\n<p>You can set breakpoints that pause execution when specific DOM elements change. This is useful for debugging dynamic web applications.</p>\n<ul>\n<li><strong>Subtree modifications</strong>: Child elements added/removed</li>\n<li><strong>Attributes modifications</strong>: Attributes changed on current element</li>\n<li><strong>Node removal</strong>: Element itself removed</li>\n</ul>\n<p>You set these by right-clicking an element in the Elements tab and selecting &quot;Break on...&quot;.</p>\n<h3>Event Listener Breakpoints</h3>\n<p>Similar to DOM breakpoints, you can pause execution when specific events trigger event listeners. This is useful for debugging user interactions.</p>\n<ol>\n<li>In Sources tab on the right panel, expand &quot;Event Listener Breakpoints&quot;</li>\n<li>Check event categories you want to debug:<ul>\n<li>Mouse events (click, mouseover, etc.)</li>\n<li>Keyboard events</li>\n<li>Form events</li>\n<li>Timer events</li>\n<li>etc.</li>\n</ul>\n</li>\n</ol>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// This will pause if &quot;Mouse → click&quot; breakpoint is enabled</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Clicked:&quot;</span>, event.<span class=\"hljs-property\">target</span>)\n})\n\n<span class=\"hljs-comment\">// This will pause if &quot;Timer → setInterval fired&quot; is enabled</span>\n<span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Timer fired&quot;</span>)\n}, <span class=\"hljs-number\">1000</span>)\n</code></pre><h3>Conditional Breakpoints</h3>\n<p>You can set breakpoints that only pause when a specific condition is true. This is useful for debugging complex logic without stopping on every iteration.</p>\n<p>To do this just right-click the line number where you want to set the breakpoint and select &quot;Add Conditional Breakpoint&quot;. Then enter your condition.</p>\n","markdown":"\n# Sources Tab and JavaScript Debugger\n\nThe Sources tab in Chrome DevTools is the most powerful tool for debugging JavaScript code. It allows you to pause execution, step through code line by line, inspect variables, and understand exactly what your program is doing at any moment. This is essential for finding complex bugs that console logging alone can't solve.\n\n## Sources Tab Overview\n\nThe Sources tab is divided into three main panels:\n\n1. **File Navigator** (left): Shows all files loaded by your page\n2. **Code View** (center): Displays source code for the selected file\n3. **Debugger Sidebar** (right): Shows scope, call stack, breakpoints, and more\n\n## Basic Breakpoints\n\nBreakpoints pause code execution at specific lines, allowing you to inspect the program state.\n\n### Setting Breakpoints\n\nYou can set breakpoints by either clicking the line number where you want your code to stop in the code view or typing `debugger` in your code where you want to pause execution.\n\n```javascript\nconsole.log(\"Hi\")\ndebugger // Execution will pause here\nconsole.log(\"Bye\")\n```\n\n### Managing Breakpoints\n\nOn the right sidebar, you can manage all your breakpoints under the \"Breakpoints\" section by toggling them on/off or removing them entirely.\n\n#### Pausing on Exceptions\n\nYou can configure the debugger to pause when errors occur in your code.\n\n- **Uncaught Exceptions (Always Enable)**: Pause on any error in your code that isn't handled\n- **Caught Exceptions (Not Usually Needed)**: Pause on any error that is properly handled by your code\n\n## Code Execution Control\n\nWhen execution pauses at a breakpoint, you can control how the program continues. These buttons are located at the top of the right panel.\n\n1. **Continue (F8)**: Resume normal execution until next breakpoint\n2. **Step Over (F10)**: Execute current line, and skip over function calls\n3. **Step Into (F11)**: Enter function calls to debug inside them\n4. **Step Out (Shift+F11)**: Finish current function and return to caller\n5. **Step (F9)**: Similar to Step Into, but doesn't wait for async operations\n\n### Stepping Through Code\n\n```javascript\nfunction complexCalculation(a, b) {\n  debugger // Pause here\n  const result1 = multiply(a) // F10: Step over (don't enter multiply)\n  const result2 = math(b) // F11: Step into (enter math)\n  return result1 + result2 // You will pause here after stepping out of math\n}\n\nfunction multiply(value) {\n  return value * 2\n}\n\nfunction math(value) {\n  // If you step into this function, you'll pause here\n  const doubled = value * 2\n  const squared = doubled * doubled // Shift+F11: Step out (return to complexCalculation)\n  return squared\n}\n\ncomplexCalculation(3, 4)\n```\n\n### Step vs Step Into\n\nWhen you use **Step Into**, it enters the function call and pauses at the first line inside that function even if it has to wait for asynchronous code. If you use **Step**, it will execute the current line and immediately pause at the next line, skipping any asynchronous operations.\n\n<!-- prettier-ignore -->\n```javascript\ndebugger // Pause here\nsetTimeout(() => {\n  console.log(\"Inside\") // Step Into will wait 1 second and then pause here\n}, 1000)\n\nconsole.log(\"After\") // Step will skip over the timeout and pause here immediately\n```\n\n## Scope and Variable Inspection\n\nThe right sidebar shows detailed information about variables and scope when execution is paused.\n\n### Scope Panel\n\n```javascript\nwindow.globalVar = \"I'm global\"\nconst scriptVar = \"I'm script\"\n\nfunction outerFunction(param1) {\n  const outerVar = \"I'm in outer scope\"\n\n  function innerFunction(param2) {\n    const innerVar = \"I'm in inner scope\"\n\n    debugger // Stop here\n\n    return param1 + param2 + outerVar + innerVar + globalVar\n  }\n\n  return innerFunction(\"inner param\")\n}\n\nouterFunction(\"outer param\")\n```\n\n**When paused, the Scope panel shows:**\n\n- **Local**: Variables in current function (`innerVar`, `param2`)\n- **Closure**: Variables from outer scopes (`outerVar`, `param1`)\n- **Script**: Global variables (`scriptVar`)\n- **Global**: Variables attached to the `window` object (`globalVar`)\n\n### Inspecting Variables\n\nWhen paused you can hover over any variable in your code to see its current value.\n\n#### Watch expressions\n\nThe Watch panel allows you to monitor specific variables or expressions continuously by entering any expression you want to track.\n\n#### Console evaluation\n\nWhile paused you can run code in the console that has access to the current scope. This is useful for testing fixes or inspecting values without modifying your code.\n\n## Call Stack Analysis\n\nThe Call Stack panel shows the sequence of function calls that led to the current point. This is the same as the \"stack trace\" you see in error messages, but you can explore it interactively by clicking on any function in the stack to jump to that point in the code.\n\n## Advanced Breakpoints\n\nThere are many advanced breakpoint types you can use to pause execution under specific conditions\n\n### DOM Breakpoints\n\nYou can set breakpoints that pause execution when specific DOM elements change. This is useful for debugging dynamic web applications.\n\n- **Subtree modifications**: Child elements added/removed\n- **Attributes modifications**: Attributes changed on current element\n- **Node removal**: Element itself removed\n\nYou set these by right-clicking an element in the Elements tab and selecting \"Break on...\".\n\n### Event Listener Breakpoints\n\nSimilar to DOM breakpoints, you can pause execution when specific events trigger event listeners. This is useful for debugging user interactions.\n\n1. In Sources tab on the right panel, expand \"Event Listener Breakpoints\"\n2. Check event categories you want to debug:\n   - Mouse events (click, mouseover, etc.)\n   - Keyboard events\n   - Form events\n   - Timer events\n   - etc.\n\n```javascript\n// This will pause if \"Mouse → click\" breakpoint is enabled\ndocument.addEventListener(\"click\", (event) => {\n  console.log(\"Clicked:\", event.target)\n})\n\n// This will pause if \"Timer → setInterval fired\" is enabled\nsetInterval(() => {\n  console.log(\"Timer fired\")\n}, 1000)\n```\n\n### Conditional Breakpoints\n\nYou can set breakpoints that only pause when a specific condition is true. This is useful for debugging complex logic without stopping on every iteration.\n\nTo do this just right-click the line number where you want to set the breakpoint and select \"Add Conditional Breakpoint\". Then enter your condition.\n","slug":"source-debugger","title":"Source Debugger","section":"Debugging","icon":"bug","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/10-debugging/D-source-debugger.md","nextSlug":"/fem-getting-started-with-javascript/lessons/debugging/vscode-debugging","prevSlug":"/fem-getting-started-with-javascript/lessons/debugging/console-advanced"}},"__N_SSG":true}