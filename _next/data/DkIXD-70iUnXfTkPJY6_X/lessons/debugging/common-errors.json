{"pageProps":{"post":{"attributes":{"description":"Learn to identify and fix the most common JavaScript errors that beginners encounter, including syntax errors, runtime errors, and logical mistakes."},"html":"<h1>Common JavaScript Errors</h1>\n<p>Every JavaScript developer, from beginner to expert, encounters errors. Understanding the most common types of errors and how to identify them will make you a much more efficient programmer. Let&#39;s explore the main categories of errors you&#39;ll face and how to fix them.</p>\n<h2>Types of JavaScript Errors</h2>\n<p>In JavaScript, errors generally fall into three main categories:</p>\n<ol>\n<li><strong>Syntax Errors</strong>: Mistakes in the code that prevent it from running at all.</li>\n<li><strong>Runtime Errors</strong>: Problems that occur while the code is running, causing it to stop.</li>\n<li><strong>Logical Errors (Bugs)</strong>: The code runs without crashing, but it doesn&#39;t produce the expected results.</li>\n</ol>\n<h3>Syntax Errors</h3>\n<p>Syntax errors occur when your code doesn&#39;t follow JavaScript&#39;s grammar rules. These are caught by the JavaScript engine before your code runs and usually show up in your editor as a red squiggly line or in the console as an error message.&#39;</p>\n<p>Some common syntax errors include:</p>\n<ol>\n<li><p>Missing Commas</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ Missing comma in object</span>\n<span class=\"hljs-keyword\">const</span> person = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span> <span class=\"hljs-comment\">// Missing comma here</span>\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>\n}\n\n<span class=\"hljs-comment\">// ✅ Fixed</span>\n<span class=\"hljs-keyword\">const</span> person = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>\n}\n</code></pre></li>\n<li><p>Mismatched Brackets, Parentheses, or Braces</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ Missing closing brace</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\">name</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hello &quot;</span> + name)\n<span class=\"hljs-comment\">// Missing }</span>\n\n<span class=\"hljs-comment\">// ✅ Fixed</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\">name</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hello &quot;</span> + name)\n}\n\n<span class=\"hljs-comment\">// ❌ Mismatched parentheses</span>\n<span class=\"hljs-keyword\">if</span> (age &gt; <span class=\"hljs-number\">18</span> {  <span class=\"hljs-comment\">// Missing closing parenthesis</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Adult&quot;</span>)\n}\n\n<span class=\"hljs-comment\">// ✅ Fixed</span>\n<span class=\"hljs-keyword\">if</span> (age &gt; <span class=\"hljs-number\">18</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Adult&quot;</span>)\n}\n</code></pre></li>\n</ol>\n<h3>Runtime Errors</h3>\n<p>Runtime errors occur when your code runs but encounters a problem during execution that causes it to stop. These errors can be harder to catch because they only appear when the specific code is executed and do not show up in your editor.</p>\n<p>Common runtime errors include:</p>\n<ol>\n<li><p>Variable Typos</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ Typo in variable name</span>\n<span class=\"hljs-keyword\">const</span> userName = <span class=\"hljs-string\">&quot;john123&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(username) <span class=\"hljs-comment\">// ReferenceError: username is not defined (typo)</span>\n\n<span class=\"hljs-comment\">// ✅ Fixed - correct spelling</span>\n<span class=\"hljs-keyword\">const</span> userName = <span class=\"hljs-string\">&quot;john123&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(userName)\n</code></pre></li>\n<li><p>TypeError: Cannot Read Property/Method of Undefined or Null</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ Trying to access property of null/undefined</span>\n<span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-title function_\">getUser</span>() <span class=\"hljs-comment\">// Assume this returns null</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(user.<span class=\"hljs-property\">name</span>) <span class=\"hljs-comment\">// TypeError: Cannot read property &#x27;name&#x27; of null</span>\n\n<span class=\"hljs-comment\">// ✅ Fixed - check if object exists first</span>\n<span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-title function_\">getUser</span>()\n<span class=\"hljs-keyword\">if</span> (user) <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(user.<span class=\"hljs-property\">name</span>)\n</code></pre></li>\n<li><p>TypeError: Assignment to Constant Variable</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ Trying to reassign const variable</span>\n<span class=\"hljs-keyword\">const</span> age = <span class=\"hljs-number\">30</span>\nage = <span class=\"hljs-number\">31</span> <span class=\"hljs-comment\">// TypeError: Assignment to constant variable</span>\n\n<span class=\"hljs-comment\">// ✅ Fixed - use let for variables that change</span>\n<span class=\"hljs-keyword\">let</span> age = <span class=\"hljs-number\">30</span>\nage = <span class=\"hljs-number\">31</span> <span class=\"hljs-comment\">// Works fine</span>\n</code></pre></li>\n</ol>\n<h3>Logical Errors</h3>\n<p>Logical errors are similar to runtime errors, but they don&#39;t cause your code to crash. Instead, they produce incorrect results or behavior. These can be the hardest to find because the code runs without throwing any errors.</p>\n<ol>\n<li><p>Off-by-One Errors</p>\n<!-- prettier-ignore -->\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button> <span class=\"hljs-comment\">// ❌ Common loop mistake</span>\n <span class=\"hljs-keyword\">const</span> items = [<span class=\"hljs-string\">&quot;apple&quot;</span>, <span class=\"hljs-string\">&quot;banana&quot;</span>, <span class=\"hljs-string\">&quot;orange&quot;</span>]\n <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt;= items.<span class=\"hljs-property\">length</span>; i++) { <span class=\"hljs-comment\">// &lt;= instead of &lt;</span>\n   <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(items[i]) <span class=\"hljs-comment\">// Prints &quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, undefined</span>\n }\n\n <span class=\"hljs-comment\">// ✅ Fixed</span>\n <span class=\"hljs-keyword\">const</span> items = [<span class=\"hljs-string\">&quot;apple&quot;</span>, <span class=\"hljs-string\">&quot;banana&quot;</span>, <span class=\"hljs-string\">&quot;orange&quot;</span>]\n <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; items.<span class=\"hljs-property\">length</span>; i++) {\n   <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(items[i]) <span class=\"hljs-comment\">// Prints &quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;</span>\n }\n</code></pre></li>\n<li><p>Assignment vs. Comparison</p>\n<!-- prettier-ignore -->\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button> <span class=\"hljs-comment\">// ❌ Using assignment (=) instead of comparison (===)</span>\n <span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;Kyle&quot;</span>\n <span class=\"hljs-keyword\">if</span> (name = <span class=\"hljs-string\">&quot;Sally&quot;</span>) { <span class=\"hljs-comment\">// This assigns &quot;Sally&quot; to name</span>\n   <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Is Sally&quot;</span>) <span class=\"hljs-comment\">// This will always run</span>\n }\n\n <span class=\"hljs-comment\">// ✅ Fixed</span>\n <span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;Kyle&quot;</span>\n <span class=\"hljs-keyword\">if</span> (name === <span class=\"hljs-string\">&quot;Sally&quot;</span>) {\n   <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Is Sally&quot;</span>) <span class=\"hljs-comment\">// This won&#x27;t run</span>\n }\n</code></pre></li>\n</ol>\n<h2>Common DOM-Related Errors</h2>\n<ol>\n<li><p>Element Not Found</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ Trying to use element that doesn&#x27;t exist</span>\n<span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;.submit-btn&quot;</span>)\nbutton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, handleClick) <span class=\"hljs-comment\">// TypeError if button is null</span>\n\n<span class=\"hljs-comment\">// ✅ Fixed - check if element exists</span>\n<span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;.submit-btn&quot;</span>)\n<span class=\"hljs-keyword\">if</span> (button) {\n  button.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, handleClick)\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-string\">&quot;Submit button not found&quot;</span>)\n}\n</code></pre></li>\n<li><p>Script Loading Before DOM</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;script.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ Script runs before HTML is loaded</span>\n<span class=\"hljs-keyword\">const</span> form = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;form&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(form) <span class=\"hljs-comment\">// null - form doesn&#x27;t exist yet</span>\n</code></pre><pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- ✅ Fixed: use defer attribute --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;script.js&quot;</span> <span class=\"hljs-attr\">defer</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n</code></pre></li>\n</ol>\n<h2>How to Read Error Messages</h2>\n<p>JavaScript error messages can seem intimidating, but they contain valuable information:</p>\n<h3>Anatomy of an Error Message</h3>\n<pre><code class=\"hljs language-text\"><button class=\"copy-btn\">Copy</button>TypeError: Cannot read property &#x27;name&#x27; of null\n    at getUserName (script.js:15:20)\n    at main (script.js:8:5)\n    at script.js:25:1\n</code></pre><p>Breaking this down:</p>\n<ul>\n<li><strong>Error Type</strong>: <code>TypeError</code> - tells you what kind of error</li>\n<li><strong>Error Message</strong>: <code>Cannot read property &#39;name&#39; of null</code> - describes what went wrong</li>\n<li><strong>Stack Trace</strong>: Shows where the error occurred and how we got there<ul>\n<li><code>at getUserName (script.js:15:20)</code> - error happened in <code>getUserName</code> function, line 15, column 20</li>\n<li><code>at main (script.js:8:5)</code> - which was called from <code>main</code> function, line 8, column 5</li>\n<li><code>at script.js:25:1</code> - which was called from the top level, line 25, column 1</li>\n</ul>\n</li>\n</ul>\n<p>With this information we know that on line 15 of <code>script.js</code>, we tried to access the <code>name</code> property of a variable that was <code>null</code>. We can then go to that line in our code and work backwards from there to find the root cause.</p>\n<h3>Common Error Messages and What They Mean</h3>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// &quot;ReferenceError: variable is not defined&quot;</span>\n<span class=\"hljs-comment\">// → You&#x27;re using a variable that hasn&#x27;t been declared</span>\n\n<span class=\"hljs-comment\">// &quot;TypeError: Cannot read property &#x27;X&#x27; of undefined&quot;</span>\n<span class=\"hljs-comment\">// → You&#x27;re trying to access a property on undefined/null</span>\n\n<span class=\"hljs-comment\">// &quot;TypeError: X is not a function&quot;</span>\n<span class=\"hljs-comment\">// → You&#x27;re trying to call something that isn&#x27;t a function</span>\n\n<span class=\"hljs-comment\">// &quot;SyntaxError: Unexpected token&quot;</span>\n<span class=\"hljs-comment\">// → There&#x27;s a typo or missing punctuation in your code</span>\n\n<span class=\"hljs-comment\">// &quot;RangeError: Maximum call stack size exceeded&quot;</span>\n<span class=\"hljs-comment\">// → You have infinite recursion</span>\n</code></pre><h2>Quick Debugging Tips</h2>\n<ol>\n<li><p>Read the Error Message Carefully</p>\n<p>Don&#39;t just glance at the error - read the entire message and look at the line number.</p>\n</li>\n<li><p>Check for Typos</p>\n<p>Many errors are simply typos in variable names, function names, or missing punctuation.</p>\n</li>\n<li><p>Use <code>console.log</code> Strategically</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">calculateTotal</span>(<span class=\"hljs-params\">items</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;calculateTotal called with:&quot;</span>, items) <span class=\"hljs-comment\">// Debug input</span>\n\n  <span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> items) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Processing item:&quot;</span>, item) <span class=\"hljs-comment\">// Debug each iteration</span>\n    total += item.<span class=\"hljs-property\">price</span>\n  }\n\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Final total:&quot;</span>, total) <span class=\"hljs-comment\">// Debug output</span>\n  <span class=\"hljs-keyword\">return</span> total\n}\n</code></pre></li>\n<li><p>Comment Out Code to Isolate Issues</p>\n<p>If you have a complex function with errors, comment out sections to find which part is causing the problem.</p>\n</li>\n<li><p>Check the Browser Console</p>\n<p>Always keep your browser&#39;s developer console open when developing to catch any runtime errors.</p>\n</li>\n</ol>\n","markdown":"\n# Common JavaScript Errors\n\nEvery JavaScript developer, from beginner to expert, encounters errors. Understanding the most common types of errors and how to identify them will make you a much more efficient programmer. Let's explore the main categories of errors you'll face and how to fix them.\n\n## Types of JavaScript Errors\n\nIn JavaScript, errors generally fall into three main categories:\n\n1. **Syntax Errors**: Mistakes in the code that prevent it from running at all.\n2. **Runtime Errors**: Problems that occur while the code is running, causing it to stop.\n3. **Logical Errors (Bugs)**: The code runs without crashing, but it doesn't produce the expected results.\n\n### Syntax Errors\n\nSyntax errors occur when your code doesn't follow JavaScript's grammar rules. These are caught by the JavaScript engine before your code runs and usually show up in your editor as a red squiggly line or in the console as an error message.'\n\nSome common syntax errors include:\n\n1. Missing Commas\n\n   ```javascript\n   // ❌ Missing comma in object\n   const person = {\n     name: \"John\" // Missing comma here\n     age: 30\n   }\n\n   // ✅ Fixed\n   const person = {\n     name: \"John\",\n     age: 30\n   }\n   ```\n\n2. Mismatched Brackets, Parentheses, or Braces\n\n   ```javascript\n   // ❌ Missing closing brace\n   function greet(name) {\n     console.log(\"Hello \" + name)\n   // Missing }\n\n   // ✅ Fixed\n   function greet(name) {\n     console.log(\"Hello \" + name)\n   }\n\n   // ❌ Mismatched parentheses\n   if (age > 18 {  // Missing closing parenthesis\n     console.log(\"Adult\")\n   }\n\n   // ✅ Fixed\n   if (age > 18) {\n     console.log(\"Adult\")\n   }\n   ```\n\n### Runtime Errors\n\nRuntime errors occur when your code runs but encounters a problem during execution that causes it to stop. These errors can be harder to catch because they only appear when the specific code is executed and do not show up in your editor.\n\nCommon runtime errors include:\n\n1. Variable Typos\n\n   ```javascript\n   // ❌ Typo in variable name\n   const userName = \"john123\"\n   console.log(username) // ReferenceError: username is not defined (typo)\n\n   // ✅ Fixed - correct spelling\n   const userName = \"john123\"\n   console.log(userName)\n   ```\n\n2. TypeError: Cannot Read Property/Method of Undefined or Null\n\n   ```javascript\n   // ❌ Trying to access property of null/undefined\n   const user = getUser() // Assume this returns null\n   console.log(user.name) // TypeError: Cannot read property 'name' of null\n\n   // ✅ Fixed - check if object exists first\n   const user = getUser()\n   if (user) console.log(user.name)\n   ```\n\n3. TypeError: Assignment to Constant Variable\n\n   ```javascript\n   // ❌ Trying to reassign const variable\n   const age = 30\n   age = 31 // TypeError: Assignment to constant variable\n\n   // ✅ Fixed - use let for variables that change\n   let age = 30\n   age = 31 // Works fine\n   ```\n\n### Logical Errors\n\nLogical errors are similar to runtime errors, but they don't cause your code to crash. Instead, they produce incorrect results or behavior. These can be the hardest to find because the code runs without throwing any errors.\n\n1. Off-by-One Errors\n\n   <!-- prettier-ignore -->\n   ```javascript\n    // ❌ Common loop mistake\n    const items = [\"apple\", \"banana\", \"orange\"]\n    for (let i = 0; i <= items.length; i++) { // <= instead of <\n      console.log(items[i]) // Prints \"apple\", \"banana\", \"orange\", undefined\n    }\n\n    // ✅ Fixed\n    const items = [\"apple\", \"banana\", \"orange\"]\n    for (let i = 0; i < items.length; i++) {\n      console.log(items[i]) // Prints \"apple\", \"banana\", \"orange\"\n    }\n    ```\n\n2. Assignment vs. Comparison\n\n   <!-- prettier-ignore -->\n   ```javascript\n    // ❌ Using assignment (=) instead of comparison (===)\n    const name = \"Kyle\"\n    if (name = \"Sally\") { // This assigns \"Sally\" to name\n      console.log(\"Is Sally\") // This will always run\n    }\n\n    // ✅ Fixed\n    const name = \"Kyle\"\n    if (name === \"Sally\") {\n      console.log(\"Is Sally\") // This won't run\n    }\n    ```\n\n## Common DOM-Related Errors\n\n1. Element Not Found\n\n   ```javascript\n   // ❌ Trying to use element that doesn't exist\n   const button = document.querySelector(\".submit-btn\")\n   button.addEventListener(\"click\", handleClick) // TypeError if button is null\n\n   // ✅ Fixed - check if element exists\n   const button = document.querySelector(\".submit-btn\")\n   if (button) {\n     button.addEventListener(\"click\", handleClick)\n   } else {\n     console.warn(\"Submit button not found\")\n   }\n   ```\n\n2. Script Loading Before DOM\n\n   ```html\n   <head>\n     <script src=\"script.js\"></script>\n   </head>\n   ```\n\n   ```javascript\n   // ❌ Script runs before HTML is loaded\n   const form = document.querySelector(\"form\")\n   console.log(form) // null - form doesn't exist yet\n   ```\n\n   ```html\n   <head>\n     <!-- ✅ Fixed: use defer attribute -->\n     <script src=\"script.js\" defer></script>\n   </head>\n   ```\n\n## How to Read Error Messages\n\nJavaScript error messages can seem intimidating, but they contain valuable information:\n\n### Anatomy of an Error Message\n\n```text\nTypeError: Cannot read property 'name' of null\n    at getUserName (script.js:15:20)\n    at main (script.js:8:5)\n    at script.js:25:1\n```\n\nBreaking this down:\n\n- **Error Type**: `TypeError` - tells you what kind of error\n- **Error Message**: `Cannot read property 'name' of null` - describes what went wrong\n- **Stack Trace**: Shows where the error occurred and how we got there\n  - `at getUserName (script.js:15:20)` - error happened in `getUserName` function, line 15, column 20\n  - `at main (script.js:8:5)` - which was called from `main` function, line 8, column 5\n  - `at script.js:25:1` - which was called from the top level, line 25, column 1\n\nWith this information we know that on line 15 of `script.js`, we tried to access the `name` property of a variable that was `null`. We can then go to that line in our code and work backwards from there to find the root cause.\n\n### Common Error Messages and What They Mean\n\n```javascript\n// \"ReferenceError: variable is not defined\"\n// → You're using a variable that hasn't been declared\n\n// \"TypeError: Cannot read property 'X' of undefined\"\n// → You're trying to access a property on undefined/null\n\n// \"TypeError: X is not a function\"\n// → You're trying to call something that isn't a function\n\n// \"SyntaxError: Unexpected token\"\n// → There's a typo or missing punctuation in your code\n\n// \"RangeError: Maximum call stack size exceeded\"\n// → You have infinite recursion\n```\n\n## Quick Debugging Tips\n\n1. Read the Error Message Carefully\n\n   Don't just glance at the error - read the entire message and look at the line number.\n\n2. Check for Typos\n\n   Many errors are simply typos in variable names, function names, or missing punctuation.\n\n3. Use `console.log` Strategically\n\n   ```javascript\n   function calculateTotal(items) {\n     console.log(\"calculateTotal called with:\", items) // Debug input\n\n     let total = 0\n     for (let item of items) {\n       console.log(\"Processing item:\", item) // Debug each iteration\n       total += item.price\n     }\n\n     console.log(\"Final total:\", total) // Debug output\n     return total\n   }\n   ```\n\n4. Comment Out Code to Isolate Issues\n\n   If you have a complex function with errors, comment out sections to find which part is causing the problem.\n\n5. Check the Browser Console\n\n   Always keep your browser's developer console open when developing to catch any runtime errors.\n","slug":"common-errors","title":"Common Errors","section":"Debugging","icon":"bug","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/10-debugging/A-common-errors.md","nextSlug":"/fem-getting-started-with-javascript/lessons/debugging/devtools-basics","prevSlug":"/fem-getting-started-with-javascript/lessons/dom/dom-traversal"}},"__N_SSG":true}