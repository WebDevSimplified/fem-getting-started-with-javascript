{"pageProps":{"post":{"attributes":{"description":"Learn how to create constants using the const keyword and understand when to use const instead of let for unchanging values."},"html":"<h1><code>const</code> - Creating Constants</h1>\n<p><code>const</code> is used to create <em>constant</em> variables that never change their value.</p>\n<h2>What is <code>const</code>?</h2>\n<p><code>const</code> creates variables whose values cannot be reassigned after they&#39;re created. Think of them as permanent marker - once you set the value it cannot be changed.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;Alice&quot;</span>\n\n<span class=\"hljs-comment\">// Trying to change a const variable will throw an error</span>\nname = <span class=\"hljs-string\">&quot;Bob&quot;</span> <span class=\"hljs-comment\">// ❌ TypeError: Assignment to constant variable</span>\n</code></pre><h2>Differences From <code>let</code></h2>\n<ol>\n<li><p>Must Be Given a Value When Created</p>\n<p>Unlike <code>let</code>, you cannot create a <code>const</code> variable without giving it a value:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ✅ Good - const with initial value</span>\n<span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;Alice&quot;</span>\n<span class=\"hljs-keyword\">const</span> age = <span class=\"hljs-number\">45</span>\n\n<span class=\"hljs-keyword\">const</span> message <span class=\"hljs-comment\">// ❌ SyntaxError: Missing initializer in const declaration</span>\n</code></pre></li>\n<li><p>Cannot Be Reassigned</p>\n<p>Once created, you cannot change the value of a <code>const</code> variable:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;Alice&quot;</span>\n\nname = <span class=\"hljs-string\">&quot;Bob&quot;</span> <span class=\"hljs-comment\">// ❌ TypeError: Assignment to constant variable</span>\n</code></pre></li>\n</ol>\n<h2><code>const</code> vs <code>let</code> Decision Guide</h2>\n<p>I use <code>const</code> by default unless I know the value will change. This helps prevent accidental changes to important values.</p>\n<h3>Use <code>const</code> when:</h3>\n<ul>\n<li>The value never changes</li>\n<li>It&#39;s a global constant like a configuration or setting</li>\n</ul>\n<h3>Use <code>let</code> when:</h3>\n<ul>\n<li>The value will change as your program runs</li>\n<li>You&#39;re counting or tracking something</li>\n</ul>\n<h2>Global Constants</h2>\n<p>In larger applications, you might define global constants that are used throughout your codebase:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">APP_NAME</span> = <span class=\"hljs-string\">&quot;My Awesome App&quot;</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">VERSION</span> = <span class=\"hljs-string\">&quot;1.0.0&quot;</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUPPORT_EMAIL</span> = <span class=\"hljs-string\">&quot;support@example.com&quot;</span>\n</code></pre><p>These global constant values are often defined in uppercase with underscores separating words.</p>\n","markdown":"\n# `const` - Creating Constants\n\n`const` is used to create _constant_ variables that never change their value.\n\n## What is `const`?\n\n`const` creates variables whose values cannot be reassigned after they're created. Think of them as permanent marker - once you set the value it cannot be changed.\n\n```javascript\nconst name = \"Alice\"\n\n// Trying to change a const variable will throw an error\nname = \"Bob\" // ❌ TypeError: Assignment to constant variable\n```\n\n## Differences From `let`\n\n1. Must Be Given a Value When Created\n\n   Unlike `let`, you cannot create a `const` variable without giving it a value:\n\n   ```javascript\n   // ✅ Good - const with initial value\n   const name = \"Alice\"\n   const age = 45\n\n   const message // ❌ SyntaxError: Missing initializer in const declaration\n   ```\n\n2. Cannot Be Reassigned\n\n   Once created, you cannot change the value of a `const` variable:\n\n   ```javascript\n   const name = \"Alice\"\n\n   name = \"Bob\" // ❌ TypeError: Assignment to constant variable\n   ```\n\n## `const` vs `let` Decision Guide\n\nI use `const` by default unless I know the value will change. This helps prevent accidental changes to important values.\n\n### Use `const` when:\n\n- The value never changes\n- It's a global constant like a configuration or setting\n\n### Use `let` when:\n\n- The value will change as your program runs\n- You're counting or tracking something\n\n## Global Constants\n\nIn larger applications, you might define global constants that are used throughout your codebase:\n\n```javascript\nconst APP_NAME = \"My Awesome App\"\nconst VERSION = \"1.0.0\"\nconst SUPPORT_EMAIL = \"support@example.com\"\n```\n\nThese global constant values are often defined in uppercase with underscores separating words.\n","slug":"constants-with-const","title":"Constants with Const","section":"Variable Basics","icon":"cube","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/04-variable-basics/C-constants-with-const.md","nextSlug":"/fem-getting-started-with-javascript/lessons/variable-basics/null-vs-undefined","prevSlug":"/fem-getting-started-with-javascript/lessons/variable-basics/creating-your-first-variable"}},"__N_SSG":true}