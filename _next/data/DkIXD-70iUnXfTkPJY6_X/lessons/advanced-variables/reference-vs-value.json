{"pageProps":{"post":{"attributes":{"description":"Learn the crucial difference between how JavaScript handles primitive values versus object references."},"html":"<h1>Reference vs Value</h1>\n<p>One of the most important concepts to understand in JavaScript is how variables store data in your computer&#39;s memory. There are two main categories of data types: <strong>value types</strong> (primitives) and <strong>reference types</strong> (objects, arrays, functions).</p>\n<p>⚠️ <strong>WARNING:</strong> This is a tricky topic, so take your time to understand it fully!</p>\n<h2>How Value Types Work</h2>\n<p>When you assign primitive values, JavaScript copies the actual value directly into your computer&#39;s memory:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">&quot;hi&quot;</span>\n</code></pre><div style=\"max-width: 500px;\">\n\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>a</code></td>\n<td><code>10</code></td>\n</tr>\n<tr>\n<td><code>b</code></td>\n<td><code>&quot;hi&quot;</code></td>\n</tr>\n</tbody></table>\n</div>\n\n<h3>Copying Value Types</h3>\n<p>When you copy a variable that holds a primitive value, JavaScript creates a completely new copy of that value in memory:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-keyword\">let</span> b = a <span class=\"hljs-comment\">// Copies the VALUE of a</span>\n\nb = b + <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// Only changes b, not a</span>\n</code></pre><div style=\"max-width: 500px;\">\n\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>a</code></td>\n<td><code>10</code></td>\n</tr>\n<tr>\n<td><code>b</code></td>\n<td><code>11</code></td>\n</tr>\n</tbody></table>\n</div>\n\n<h2>How Reference Types Work</h2>\n<p>When you create arrays or objects, JavaScript stores a <strong>reference</strong> (memory address) to where the data lives:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> c = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\n</code></pre><div class=\"side-by-side-tables\">\n\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Value (Reference)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>c</code></td>\n<td><code>0x001</code></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Memory Location</th>\n<th>Actual Data</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>0x001</code></td>\n<td><code>[1, 2]</code></td>\n</tr>\n</tbody></table>\n</div>\n\n<p>Think of <code>0x001</code> as a &quot;hotel room number&quot; - the variable stores the room number, not the actual contents of the room.</p>\n<h3>Copying Reference Types</h3>\n<p>When you copy a variable that holds an array or object, JavaScript copies the <strong>reference</strong> (memory address), not the actual data:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> c = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\n<span class=\"hljs-keyword\">const</span> d = c <span class=\"hljs-comment\">// Copies the REFERENCE, not the array</span>\n\nd.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// Modifies the array that both c and d point to</span>\n</code></pre><div class=\"side-by-side-tables\">\n\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Value (Reference)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>c</code></td>\n<td><code>0x001</code></td>\n</tr>\n<tr>\n<td><code>d</code></td>\n<td><code>0x001</code></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Memory Location</th>\n<th>Actual Data</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>0x001</code></td>\n<td><code>[1, 2, 3]</code></td>\n</tr>\n</tbody></table>\n</div>\n\n<p>Both <code>c</code> and <code>d</code> store the same memory address (<code>0x001</code>), so they both point to the same array in memory.</p>\n<h2>Creating New References</h2>\n<p>When you create a new array/object, JavaScript allocates a new memory location:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">let</span> c = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>] <span class=\"hljs-comment\">// Memory location 0x001</span>\n<span class=\"hljs-keyword\">let</span> d = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>] <span class=\"hljs-comment\">// Memory location 0x002 (different!)</span>\n\nd.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">6</span>)\n</code></pre><div class=\"side-by-side-tables\">\n\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Value (Reference)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>c</code></td>\n<td><code>0x001</code></td>\n</tr>\n<tr>\n<td><code>d</code></td>\n<td><code>0x002</code></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Memory Location</th>\n<th>Actual Data</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>0x001</code></td>\n<td><code>[1, 2]</code></td>\n</tr>\n<tr>\n<td><code>0x002</code></td>\n<td><code>[3, 4, 5, 6]</code></td>\n</tr>\n</tbody></table>\n</div>\n\n<h3>Comparing References</h3>\n<p>Since JavaScript compares the <code>Value (Reference)</code> column and not the actual contents, two different arrays/objects with the same contents are considered different:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\n<span class=\"hljs-keyword\">const</span> b = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>] <span class=\"hljs-comment\">// Same contents, but different memory locations!</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a == b) <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a === b) <span class=\"hljs-comment\">// false</span>\n</code></pre><div class=\"side-by-side-tables\">\n\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Value (Reference)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>a</code></td>\n<td><code>0x001</code></td>\n</tr>\n<tr>\n<td><code>b</code></td>\n<td><code>0x002</code></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Memory Location</th>\n<th>Actual Data</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>0x001</code></td>\n<td><code>[1, 2]</code></td>\n</tr>\n<tr>\n<td><code>0x002</code></td>\n<td><code>[1, 2]</code></td>\n</tr>\n</tbody></table>\n</div>\n\n<p>JavaScript is asking: &quot;Is <code>0x001</code> the same as <code>0x002</code>?&quot; The answer is no, even though the contents are identical.</p>\n<h4>When Equality Returns True</h4>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\n<span class=\"hljs-keyword\">const</span> b = a <span class=\"hljs-comment\">// Same reference!</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a === b) <span class=\"hljs-comment\">// true ← Both point to same memory location</span>\n</code></pre><h4>Objects Work the Same Way</h4>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">let</span> person1 = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Kyle&quot;</span> }\n<span class=\"hljs-keyword\">let</span> person2 = person1 <span class=\"hljs-comment\">// Same reference</span>\n\nperson2.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&quot;Joe&quot;</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person1.<span class=\"hljs-property\">name</span>) <span class=\"hljs-comment\">// &quot;Joe&quot; ← Changed!</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person2.<span class=\"hljs-property\">name</span>) <span class=\"hljs-comment\">// &quot;Joe&quot; ← Same object</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person1 === person2) <span class=\"hljs-comment\">// true ← Same reference</span>\n\n<span class=\"hljs-comment\">// But creating a new object:</span>\n<span class=\"hljs-keyword\">const</span> person3 = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Joe&quot;</span> }\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person1 === person3) <span class=\"hljs-comment\">// false ← Different references</span>\n</code></pre><h3><code>const</code> with References</h3>\n<p>The <code>const</code> keyword prevents you from reassigning a variable, but it doesn&#39;t prevent you from modifying the contents of arrays/objects declared with <code>const</code>.</p>\n<p><code>const</code> only cares about the <code>Value (Reference)</code> column.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\n\n<span class=\"hljs-comment\">// This works! We&#x27;re not changing the reference</span>\narr.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">3</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr) <span class=\"hljs-comment\">// [1, 2, 3]</span>\n\n<span class=\"hljs-comment\">// This fails! We&#x27;re trying to change the reference</span>\narr = [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>] <span class=\"hljs-comment\">// ❌ TypeError: Assignment to constant variable</span>\n</code></pre><div style=\"max-width: 500px;\">\n\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Value (Reference)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>a</code></td>\n<td><code>0x001</code></td>\n</tr>\n</tbody></table>\n</div>\n\n<h2>Functions and References</h2>\n<p>When you pass arrays/objects to functions, you&#39;re passing the reference which means the function can modify the original data:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addElement</span>(<span class=\"hljs-params\">array, element</span>) {\n  array.<span class=\"hljs-title function_\">push</span>(element) <span class=\"hljs-comment\">// Modifies the original array!</span>\n}\n\n<span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-title function_\">addElement</span>(numbers, <span class=\"hljs-number\">4</span>)\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(numbers) <span class=\"hljs-comment\">// [1, 2, 3, 4] ← Original array modified</span>\n</code></pre>","markdown":"\n# Reference vs Value\n\nOne of the most important concepts to understand in JavaScript is how variables store data in your computer's memory. There are two main categories of data types: **value types** (primitives) and **reference types** (objects, arrays, functions).\n\n⚠️ **WARNING:** This is a tricky topic, so take your time to understand it fully!\n\n## How Value Types Work\n\nWhen you assign primitive values, JavaScript copies the actual value directly into your computer's memory:\n\n```javascript\nconst a = 10\nconst b = \"hi\"\n```\n\n<div style=\"max-width: 500px;\">\n\n| Variable | Value  |\n| -------- | ------ |\n| `a`      | `10`   |\n| `b`      | `\"hi\"` |\n\n</div>\n\n### Copying Value Types\n\nWhen you copy a variable that holds a primitive value, JavaScript creates a completely new copy of that value in memory:\n\n```javascript\nlet a = 10\nlet b = a // Copies the VALUE of a\n\nb = b + 1 // Only changes b, not a\n```\n\n<div style=\"max-width: 500px;\">\n\n| Variable | Value |\n| -------- | ----- |\n| `a`      | `10`  |\n| `b`      | `11`  |\n\n</div>\n\n## How Reference Types Work\n\nWhen you create arrays or objects, JavaScript stores a **reference** (memory address) to where the data lives:\n\n```javascript\nconst c = [1, 2]\n```\n\n<div class=\"side-by-side-tables\">\n\n| Variable | Value (Reference) |\n| -------- | ----------------- |\n| `c`      | `0x001`           |\n\n| Memory Location | Actual Data |\n| --------------- | ----------- |\n| `0x001`         | `[1, 2]`    |\n\n</div>\n\nThink of `0x001` as a \"hotel room number\" - the variable stores the room number, not the actual contents of the room.\n\n### Copying Reference Types\n\nWhen you copy a variable that holds an array or object, JavaScript copies the **reference** (memory address), not the actual data:\n\n```javascript\nconst c = [1, 2]\nconst d = c // Copies the REFERENCE, not the array\n\nd.push(3) // Modifies the array that both c and d point to\n```\n\n<div class=\"side-by-side-tables\">\n\n| Variable | Value (Reference) |\n| -------- | ----------------- |\n| `c`      | `0x001`           |\n| `d`      | `0x001`           |\n\n| Memory Location | Actual Data |\n| --------------- | ----------- |\n| `0x001`         | `[1, 2, 3]` |\n\n</div>\n\nBoth `c` and `d` store the same memory address (`0x001`), so they both point to the same array in memory.\n\n## Creating New References\n\nWhen you create a new array/object, JavaScript allocates a new memory location:\n\n```javascript\nlet c = [1, 2] // Memory location 0x001\nlet d = [3, 4, 5] // Memory location 0x002 (different!)\n\nd.push(6)\n```\n\n<div class=\"side-by-side-tables\">\n\n| Variable | Value (Reference) |\n| -------- | ----------------- |\n| `c`      | `0x001`           |\n| `d`      | `0x002`           |\n\n| Memory Location | Actual Data    |\n| --------------- | -------------- |\n| `0x001`         | `[1, 2]`       |\n| `0x002`         | `[3, 4, 5, 6]` |\n\n</div>\n\n### Comparing References\n\nSince JavaScript compares the `Value (Reference)` column and not the actual contents, two different arrays/objects with the same contents are considered different:\n\n```javascript\nconst a = [1, 2]\nconst b = [1, 2] // Same contents, but different memory locations!\n\nconsole.log(a == b) // false\nconsole.log(a === b) // false\n```\n\n<div class=\"side-by-side-tables\">\n\n| Variable | Value (Reference) |\n| -------- | ----------------- |\n| `a`      | `0x001`           |\n| `b`      | `0x002`           |\n\n| Memory Location | Actual Data |\n| --------------- | ----------- |\n| `0x001`         | `[1, 2]`    |\n| `0x002`         | `[1, 2]`    |\n\n</div>\n\nJavaScript is asking: \"Is `0x001` the same as `0x002`?\" The answer is no, even though the contents are identical.\n\n#### When Equality Returns True\n\n```javascript\nconst a = [1, 2]\nconst b = a // Same reference!\n\nconsole.log(a === b) // true ← Both point to same memory location\n```\n\n#### Objects Work the Same Way\n\n```javascript\nlet person1 = { name: \"Kyle\" }\nlet person2 = person1 // Same reference\n\nperson2.name = \"Joe\"\n\nconsole.log(person1.name) // \"Joe\" ← Changed!\nconsole.log(person2.name) // \"Joe\" ← Same object\nconsole.log(person1 === person2) // true ← Same reference\n\n// But creating a new object:\nconst person3 = { name: \"Joe\" }\nconsole.log(person1 === person3) // false ← Different references\n```\n\n### `const` with References\n\nThe `const` keyword prevents you from reassigning a variable, but it doesn't prevent you from modifying the contents of arrays/objects declared with `const`.\n\n`const` only cares about the `Value (Reference)` column.\n\n```javascript\nconst arr = [1, 2]\n\n// This works! We're not changing the reference\narr.push(3)\nconsole.log(arr) // [1, 2, 3]\n\n// This fails! We're trying to change the reference\narr = [4, 5, 6] // ❌ TypeError: Assignment to constant variable\n```\n\n<div style=\"max-width: 500px;\">\n\n| Variable | Value (Reference) |\n| -------- | ----------------- |\n| `a`      | `0x001`           |\n\n</div>\n\n## Functions and References\n\nWhen you pass arrays/objects to functions, you're passing the reference which means the function can modify the original data:\n\n```javascript\nfunction addElement(array, element) {\n  array.push(element) // Modifies the original array!\n}\n\nconst numbers = [1, 2, 3]\naddElement(numbers, 4)\n\nconsole.log(numbers) // [1, 2, 3, 4] ← Original array modified\n```\n","slug":"reference-vs-value","title":"Reference vs Value","section":"Advanced Variables","icon":"layer-group","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/07-advanced-variables/G-reference-vs-value.md","nextSlug":"/fem-getting-started-with-javascript/lessons/advanced-variables/string-template-literals","prevSlug":"/fem-getting-started-with-javascript/lessons/advanced-variables/objects"}},"__N_SSG":true}