{"pageProps":{"post":{"attributes":{"description":"Learn how JavaScript automatically converts between types and how to prevent unexpected behavior with proper equality operators."},"html":"<h1>Type Coercion</h1>\n<p>Type coercion is JavaScript&#39;s way of automatically converting one data type to another. While this can be convenient, it often leads to confusing and unexpected behavior.</p>\n<h2>JavaScript Data Types Recap</h2>\n<p>Before diving into type coercion, let&#39;s review the main data types in JavaScript:</p>\n<ul>\n<li><strong>Numbers</strong> - <code>1</code>, <code>2.5</code>, <code>-10</code></li>\n<li><strong>Strings</strong> - <code>&quot;hello&quot;</code>, <code>&quot;123&quot;</code></li>\n<li><strong>Booleans</strong> - <code>true</code>, <code>false</code></li>\n<li><code>null</code> - Represents intentional absence of value</li>\n<li><code>undefined</code> - Represents uninitialized or missing value</li>\n</ul>\n<h2>Explicit Type Coercion</h2>\n<p>Explicit type coercion is when <strong>you</strong> tell JavaScript to convert one type to another.</p>\n<h3>Converting Strings to Numbers</h3>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-string\">&quot;1&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">typeof</span> a) <span class=\"hljs-comment\">// &quot;string&quot;</span>\n\n<span class=\"hljs-comment\">// Convert to integer</span>\n<span class=\"hljs-keyword\">const</span> numberA = <span class=\"hljs-built_in\">parseInt</span>(a)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">typeof</span> numberA) <span class=\"hljs-comment\">// &quot;number&quot;</span>\n</code></pre><h4>parseInt vs parseFloat</h4>\n<ul>\n<li><strong>parseInt</strong> - Converts to whole numbers (integers)</li>\n<li><strong>parseFloat</strong> - Converts to decimal numbers (floats)</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">let</span> decimal = <span class=\"hljs-string\">&quot;1.3&quot;</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-built_in\">parseInt</span>(decimal)) <span class=\"hljs-comment\">// 1 (removes decimal part)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-built_in\">parseFloat</span>(decimal)) <span class=\"hljs-comment\">// 1.3 (keeps decimal)</span>\n</code></pre><h3>Converting Variables to Strings</h3>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> num = <span class=\"hljs-number\">1.34</span>\n<span class=\"hljs-keyword\">const</span> stringNum = num.<span class=\"hljs-title function_\">toString</span>()\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">typeof</span> stringNum) <span class=\"hljs-comment\">// &quot;string&quot;</span>\n</code></pre><h2>Implicit Type Coercion</h2>\n<p>Implicit type coercion happens when JavaScript <strong>automatically</strong> converts types for you without you asking for it. This is where things can get confusing.</p>\n<h3>The Plus <code>+</code> Operator Problem</h3>\n<p>When you use <code>+</code> with strings and numbers, JavaScript converts the number to a string:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// number</span>\n<span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">&quot;3&quot;</span> <span class=\"hljs-comment\">// string</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a + b) <span class=\"hljs-comment\">// &quot;13&quot; (not 4)</span>\n</code></pre><p>This is the same as writing:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a.<span class=\"hljs-title function_\">toString</span>() + b) <span class=\"hljs-comment\">// &quot;13&quot;</span>\n</code></pre><p>To fix this do explicit type coercion:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a + <span class=\"hljs-built_in\">parseInt</span>(b)) <span class=\"hljs-comment\">// 4 (proper addition)</span>\n</code></pre><h3>Other Operators Behave Differently</h3>\n<p>Unlike <code>+</code>, other mathematical operators convert strings to numbers:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">// number</span>\n<span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">&quot;1&quot;</span> <span class=\"hljs-comment\">// string</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a - b) <span class=\"hljs-comment\">// 2 (converts &quot;1&quot; to 1, then 3 - 1)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a * b) <span class=\"hljs-comment\">// 3 (converts &quot;1&quot; to 1, then 3 * 1)</span>\n</code></pre><h2>Which To Use?</h2>\n<p>Generally it is best to avoid implicit coercion because it can lead to unexpected results. Instead, use explicit conversion functions like <code>parseInt</code>, <code>parseFloat</code>, or <code>toString</code> when you need to convert types.</p>\n","markdown":"\n# Type Coercion\n\nType coercion is JavaScript's way of automatically converting one data type to another. While this can be convenient, it often leads to confusing and unexpected behavior.\n\n## JavaScript Data Types Recap\n\nBefore diving into type coercion, let's review the main data types in JavaScript:\n\n- **Numbers** - `1`, `2.5`, `-10`\n- **Strings** - `\"hello\"`, `\"123\"`\n- **Booleans** - `true`, `false`\n- `null` - Represents intentional absence of value\n- `undefined` - Represents uninitialized or missing value\n\n## Explicit Type Coercion\n\nExplicit type coercion is when **you** tell JavaScript to convert one type to another.\n\n### Converting Strings to Numbers\n\n```javascript\nconst a = \"1\"\nconsole.log(typeof a) // \"string\"\n\n// Convert to integer\nconst numberA = parseInt(a)\nconsole.log(typeof numberA) // \"number\"\n```\n\n#### parseInt vs parseFloat\n\n- **parseInt** - Converts to whole numbers (integers)\n- **parseFloat** - Converts to decimal numbers (floats)\n\n```javascript\nlet decimal = \"1.3\"\n\nconsole.log(parseInt(decimal)) // 1 (removes decimal part)\nconsole.log(parseFloat(decimal)) // 1.3 (keeps decimal)\n```\n\n### Converting Variables to Strings\n\n```javascript\nconst num = 1.34\nconst stringNum = num.toString()\n\nconsole.log(typeof stringNum) // \"string\"\n```\n\n## Implicit Type Coercion\n\nImplicit type coercion happens when JavaScript **automatically** converts types for you without you asking for it. This is where things can get confusing.\n\n### The Plus `+` Operator Problem\n\nWhen you use `+` with strings and numbers, JavaScript converts the number to a string:\n\n```javascript\nconst a = 1 // number\nconst b = \"3\" // string\n\nconsole.log(a + b) // \"13\" (not 4)\n```\n\nThis is the same as writing:\n\n```javascript\nconsole.log(a.toString() + b) // \"13\"\n```\n\nTo fix this do explicit type coercion:\n\n```javascript\nconsole.log(a + parseInt(b)) // 4 (proper addition)\n```\n\n### Other Operators Behave Differently\n\nUnlike `+`, other mathematical operators convert strings to numbers:\n\n```javascript\nconst a = 3 // number\nconst b = \"1\" // string\n\nconsole.log(a - b) // 2 (converts \"1\" to 1, then 3 - 1)\nconsole.log(a * b) // 3 (converts \"1\" to 1, then 3 * 1)\n```\n\n## Which To Use?\n\nGenerally it is best to avoid implicit coercion because it can lead to unexpected results. Instead, use explicit conversion functions like `parseInt`, `parseFloat`, or `toString` when you need to convert types.\n","slug":"type-coercion","title":"Type Coercion","section":"Advanced Variables","icon":"layer-group","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/07-advanced-variables/B-type-coercion.md","nextSlug":"/fem-getting-started-with-javascript/lessons/advanced-variables/nan-not-a-number","prevSlug":"/fem-getting-started-with-javascript/lessons/advanced-variables/creating-variables-with-var"}},"__N_SSG":true}