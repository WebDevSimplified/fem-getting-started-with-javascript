{"pageProps":{"post":{"attributes":{"description":"Learn how the this and new keywords work in JavaScript, including their uses in classes, objects, and different contexts."},"html":"<h1>The <code>this</code>/<code>new</code> Keywords</h1>\n<p>The <code>this</code>/<code>new</code> keywords are two of the most confusing concepts in JavaScript, but they&#39;re also incredibly powerful. Understanding <code>this</code>/<code>new</code> is essential for working with objects, classes, and many built-in JavaScript features.</p>\n<p>⚠️ <strong>WARNING:</strong> This is a tricky topic, so take your time to understand it fully!</p>\n<h2>What is <code>this</code>?</h2>\n<p>The <code>this</code> keyword refers to an object - but <strong>which</strong> object depends on how and where <code>this</code> is used. Think of <code>this</code> as a special variable that JavaScript automatically creates, and its value is determined by the context in which it is used.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>) <span class=\"hljs-comment\">// In the browser, this by default refers to the window object</span>\n</code></pre><h3><code>this</code> With Objects</h3>\n<p>When <code>this</code> is used inside an object method, it refers to the object itself:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> person = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Alice&quot;</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span>,\n  <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, my name is <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span>`</span>)\n  },\n}\n\nperson.<span class=\"hljs-title function_\">greet</span>() <span class=\"hljs-comment\">// &quot;Hello, my name is Alice&quot;</span>\n</code></pre><p>This is useful for accessing properties of the object from within its methods.</p>\n<h2>Classes</h2>\n<p>Classes provide an alternate way to define objects and their methods. Inside class methods, <code>this</code> refers to the instance of the class. To create a class in JavaScript, you use the <code>class</code> keyword followed by the class name (start with a capital letter) and finally put all the class methods and properties inside curly braces <code>{}</code>.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name, age</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age\n  }\n\n  <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, my name is <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span>`</span>)\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> alice = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;Alice&quot;</span>, <span class=\"hljs-number\">25</span>)\nalice.<span class=\"hljs-title function_\">greet</span>() <span class=\"hljs-comment\">// &quot;Hello, my name is Alice&quot;</span>\n</code></pre><p>Classes are a way to create templates for objects and encapsulate related data and behavior together.</p>\n<h3>Class Components</h3>\n<p>Let&#39;s break down the key components of this code:</p>\n<h4>Constructor</h4>\n<p>The <code>constructor</code> method is a special method that runs when you create a new instance of the class.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name, age</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age\n  }\n}\n</code></pre><p>The best way to think of the constructor is that it is a function that:</p>\n<ol>\n<li><strong>Creates a new empty object</strong>: <code>this = {}</code> (automatic)</li>\n<li><strong>Runs your constructor code</strong>: Your code sets properties on <code>this</code></li>\n<li><strong>Returns the object</strong>: <code>return this</code> (automatic)</li>\n</ol>\n<h4>Defining Methods</h4>\n<p>You can define methods inside the class using the same syntax as object methods:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> {\n  <span class=\"hljs-title function_\">greet</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello, my name is <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span>`</span>)\n  }\n}\n</code></pre><p>The syntax is essentially the same as defining a function but you just leave off the <code>function</code> keyword. The method will automatically have access to <code>this</code>, which refers to the instance of the class.</p>\n<h4>Creating Instances</h4>\n<p>To create an instance of a class, you use the <code>new</code> keyword followed by the class name and parentheses:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> alice = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;Alice&quot;</span>, <span class=\"hljs-number\">25</span>)\n</code></pre><p>This runs our constructor and returns a new object with the properties and methods defined in the class.</p>\n<h3>Classes In Depth</h3>\n<p>There are many advanced features you can use with classes, but they are not nearly as important as understanding what classes are and how <code>this</code>/<code>new</code> work together.</p>\n<p>Personally, I don&#39;t use classes much in my own code, but depending on your coding style you may use them more often.</p>\n<h2>Built-in Examples</h2>\n<p>JavaScript has many built-in examples of using <code>new</code> to instantiate objects. For example, the <code>Date</code> object is created using <code>new Date()</code>:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Creating a Date object</span>\n<span class=\"hljs-keyword\">const</span> now = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>()\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(now) <span class=\"hljs-comment\">// Current date and time</span>\n\n<span class=\"hljs-comment\">// Date uses `this` internally</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(now.<span class=\"hljs-title function_\">getMonth</span>())\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(now.<span class=\"hljs-title function_\">getDay</span>())\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(now.<span class=\"hljs-title function_\">getDate</span>())\n</code></pre>","markdown":"\n# The `this`/`new` Keywords\n\nThe `this`/`new` keywords are two of the most confusing concepts in JavaScript, but they're also incredibly powerful. Understanding `this`/`new` is essential for working with objects, classes, and many built-in JavaScript features.\n\n⚠️ **WARNING:** This is a tricky topic, so take your time to understand it fully!\n\n## What is `this`?\n\nThe `this` keyword refers to an object - but **which** object depends on how and where `this` is used. Think of `this` as a special variable that JavaScript automatically creates, and its value is determined by the context in which it is used.\n\n```javascript\nconsole.log(this) // In the browser, this by default refers to the window object\n```\n\n### `this` With Objects\n\nWhen `this` is used inside an object method, it refers to the object itself:\n\n```javascript\nconst person = {\n  name: \"Alice\",\n  age: 25,\n  greet() {\n    console.log(`Hello, my name is ${this.name}`)\n  },\n}\n\nperson.greet() // \"Hello, my name is Alice\"\n```\n\nThis is useful for accessing properties of the object from within its methods.\n\n## Classes\n\nClasses provide an alternate way to define objects and their methods. Inside class methods, `this` refers to the instance of the class. To create a class in JavaScript, you use the `class` keyword followed by the class name (start with a capital letter) and finally put all the class methods and properties inside curly braces `{}`.\n\n```javascript\nclass Person {\n  constructor(name, age) {\n    this.name = name\n    this.age = age\n  }\n\n  greet() {\n    console.log(`Hello, my name is ${this.name}`)\n  }\n}\n\nconst alice = new Person(\"Alice\", 25)\nalice.greet() // \"Hello, my name is Alice\"\n```\n\nClasses are a way to create templates for objects and encapsulate related data and behavior together.\n\n### Class Components\n\nLet's break down the key components of this code:\n\n#### Constructor\n\nThe `constructor` method is a special method that runs when you create a new instance of the class.\n\n```javascript\nclass Person {\n  constructor(name, age) {\n    this.name = name\n    this.age = age\n  }\n}\n```\n\nThe best way to think of the constructor is that it is a function that:\n\n1. **Creates a new empty object**: `this = {}` (automatic)\n2. **Runs your constructor code**: Your code sets properties on `this`\n3. **Returns the object**: `return this` (automatic)\n\n#### Defining Methods\n\nYou can define methods inside the class using the same syntax as object methods:\n\n```javascript\nclass Person {\n  greet() {\n    console.log(`Hello, my name is ${this.name}`)\n  }\n}\n```\n\nThe syntax is essentially the same as defining a function but you just leave off the `function` keyword. The method will automatically have access to `this`, which refers to the instance of the class.\n\n#### Creating Instances\n\nTo create an instance of a class, you use the `new` keyword followed by the class name and parentheses:\n\n```javascript\nconst alice = new Person(\"Alice\", 25)\n```\n\nThis runs our constructor and returns a new object with the properties and methods defined in the class.\n\n### Classes In Depth\n\nThere are many advanced features you can use with classes, but they are not nearly as important as understanding what classes are and how `this`/`new` work together.\n\nPersonally, I don't use classes much in my own code, but depending on your coding style you may use them more often.\n\n## Built-in Examples\n\nJavaScript has many built-in examples of using `new` to instantiate objects. For example, the `Date` object is created using `new Date()`:\n\n```javascript\n// Creating a Date object\nconst now = new Date()\nconsole.log(now) // Current date and time\n\n// Date uses `this` internally\nconsole.log(now.getMonth())\nconsole.log(now.getDay())\nconsole.log(now.getDate())\n```\n","slug":"this-keyword","title":"This Keyword","section":"Advanced Variables","icon":"layer-group","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/07-advanced-variables/I-this-keyword.md","nextSlug":"/fem-getting-started-with-javascript/lessons/control-flow/if-statements","prevSlug":"/fem-getting-started-with-javascript/lessons/advanced-variables/string-template-literals"}},"__N_SSG":true}