{"pageProps":{"post":{"attributes":{"description":"Learn how JavaScript handles equality comparisons and the importance of using strict equality."},"html":"<h1>Equality: <code>==</code> vs <code>===</code></h1>\n<p>JavaScript has two ways to check equality, and they behave very differently.</p>\n<h2>Double Equals <code>==</code> - With Type Coercion</h2>\n<p>The <code>==</code> operator performs type coercion before comparing:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">1</span> == <span class=\"hljs-string\">&quot;1&quot;</span>) <span class=\"hljs-comment\">// true (converts string &quot;1&quot; to number 1)</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">0</span> == <span class=\"hljs-literal\">false</span>) <span class=\"hljs-comment\">// true (0 is &quot;falsy&quot;)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;&quot;</span> == <span class=\"hljs-literal\">false</span>) <span class=\"hljs-comment\">// true (empty string is &quot;falsy&quot;)</span>\n</code></pre><p><strong>Why?</strong> JavaScript converts these values to the same type before comparing. Zero and empty strings are considered &quot;falsy&quot; values that equal <code>false</code>.</p>\n<h2>Triple Equals <code>===</code> - No Type Coercion</h2>\n<p>The <code>===</code> operator compares both value <strong>and</strong> type without any coercion:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">1</span> === <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// true (same type and value)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">1</span> === <span class=\"hljs-string\">&quot;1&quot;</span>) <span class=\"hljs-comment\">// false (different types)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">0</span> === <span class=\"hljs-literal\">false</span>) <span class=\"hljs-comment\">// false (different types)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;&quot;</span> === <span class=\"hljs-literal\">false</span>) <span class=\"hljs-comment\">// false (different types)</span>\n</code></pre><h2>Not Equals: <code>!=</code> vs <code>!==</code></h2>\n<p>The same rules apply to not equals:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">1</span> != <span class=\"hljs-string\">&quot;1&quot;</span>) <span class=\"hljs-comment\">// false (converts types, then compares)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">1</span> !== <span class=\"hljs-string\">&quot;1&quot;</span>) <span class=\"hljs-comment\">// true (different types, so not equal)</span>\n</code></pre><h2>Which To Use?</h2>\n<p><strong>Always prefer <code>===</code> and <code>!==</code></strong> to avoid unexpected type coercion issues.</p>\n<h3>The Exception: <code>null</code> and <code>undefined</code></h3>\n<p>There&#39;s one case where <code>==</code> is actually useful - checking for <code>null</code> or <code>undefined</code>:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-literal\">null</span> == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-literal\">null</span> == <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">// true (null and undefined are considered equal)</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-literal\">null</span> === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-literal\">null</span> === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">// false (different types)</span>\n</code></pre><p>When checking if a variable has a value, you often want to catch both <code>null</code> and <code>undefined</code> which is why <code>==</code> is useful here.</p>\n","markdown":"\n# Equality: `==` vs `===`\n\nJavaScript has two ways to check equality, and they behave very differently.\n\n## Double Equals `==` - With Type Coercion\n\nThe `==` operator performs type coercion before comparing:\n\n```javascript\nconsole.log(1 == \"1\") // true (converts string \"1\" to number 1)\n\nconsole.log(0 == false) // true (0 is \"falsy\")\nconsole.log(\"\" == false) // true (empty string is \"falsy\")\n```\n\n**Why?** JavaScript converts these values to the same type before comparing. Zero and empty strings are considered \"falsy\" values that equal `false`.\n\n## Triple Equals `===` - No Type Coercion\n\nThe `===` operator compares both value **and** type without any coercion:\n\n```javascript\nconsole.log(1 === 1) // true (same type and value)\nconsole.log(1 === \"1\") // false (different types)\nconsole.log(0 === false) // false (different types)\nconsole.log(\"\" === false) // false (different types)\n```\n\n## Not Equals: `!=` vs `!==`\n\nThe same rules apply to not equals:\n\n```javascript\nconsole.log(1 != \"1\") // false (converts types, then compares)\nconsole.log(1 !== \"1\") // true (different types, so not equal)\n```\n\n## Which To Use?\n\n**Always prefer `===` and `!==`** to avoid unexpected type coercion issues.\n\n### The Exception: `null` and `undefined`\n\nThere's one case where `==` is actually useful - checking for `null` or `undefined`:\n\n```javascript\nconsole.log(null == null) // true\nconsole.log(null == undefined) // true (null and undefined are considered equal)\n\nconsole.log(null === null) // true\nconsole.log(null === undefined) // false (different types)\n```\n\nWhen checking if a variable has a value, you often want to catch both `null` and `undefined` which is why `==` is useful here.\n","slug":"equality-type-comparisons","title":"Equality Type Comparisons","section":"Advanced Variables","icon":"layer-group","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/07-advanced-variables/D-equality-type-comparisons.md","nextSlug":"/fem-getting-started-with-javascript/lessons/advanced-variables/arrays","prevSlug":"/fem-getting-started-with-javascript/lessons/advanced-variables/nan-not-a-number"}},"__N_SSG":true}