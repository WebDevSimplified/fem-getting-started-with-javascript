{"pageProps":{"post":{"attributes":{"title":"Creating Variables with var","description":"Learn about the var keyword and why you should avoid it in favor of let and const."},"html":"<h1>Creating Variables with <code>var</code></h1>\n<p>We&#39;ve been using <code>let</code> and <code>const</code> to create variables, but there&#39;s a third option <code>var</code> that also allows you to create variables.</p>\n<h2>What is <code>var</code>?</h2>\n<p>The <code>var</code> keyword works similarly to <code>let</code> for basic variable creation:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// 1</span>\na = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// 2</span>\n</code></pre><p>This looks identical to using <code>let</code>, but <code>var</code> behaves very differently under the hood.</p>\n<h3>Why <code>var</code> Exists</h3>\n<p>Originally, when JavaScript was first created, <code>var</code> was the <strong>only</strong> way to create variables. Later, <code>let</code> and <code>const</code> were added to fix the strange and confusing behavior of <code>var</code>.</p>\n<h2>Problems With <code>var</code></h2>\n<p>While <code>var</code> can be used to create variables, it has several issues that make it problematic:</p>\n<h3><code>var</code> Uses Function Scope</h3>\n<p>The biggest issue with <code>var</code> is that it completely ignores block scope and uses function scope instead:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">func</span>(<span class=\"hljs-params\"></span>) {\n  {\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// Function scope</span>\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// Prints 1</span>\n}\n\n<span class=\"hljs-title function_\">func</span>()\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">func</span>(<span class=\"hljs-params\"></span>) {\n  {\n    <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// Block scope</span>\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// ❌ ReferenceError: a is not defined</span>\n}\n\n<span class=\"hljs-title function_\">func</span>()\n</code></pre><h3><code>var</code> Gets Hoisted Strangely</h3>\n<p>Variables declared with <code>var</code> get hoisted to the top of their scope, but only the declaration (not the value):</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// Prints undefined</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// 1</span>\n</code></pre><p>JavaScript treats this as if you wrote:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">var</span> a\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// Prints undefined</span>\na = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// Assignment happens here</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// 1</span>\n</code></pre><p>Here is how it behaves with <code>let</code>:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// ❌ ReferenceError: Cannot access &#x27;a&#x27; before initialization</span>\n<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">1</span>\n</code></pre><h3><code>var</code> Allows Redeclaration</h3>\n<p>You can declare the same <code>var</code> variable multiple times, which can lead to confusion:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// No error - just overwrites the first one</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// 2</span>\n</code></pre><p>With <code>let</code>, you get a helpful error:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// ❌ SyntaxError: Identifier &#x27;b&#x27; has already been declared</span>\n</code></pre><h2>When You Might See <code>var</code></h2>\n<ol>\n<li><strong>Older codebases</strong> - Code written before <code>let</code> and <code>const</code> existed</li>\n<li><strong>Legacy tutorials</strong> - Outdated learning materials</li>\n<li><strong>Interview questions</strong> - Testing your understanding of JavaScript quirks</li>\n</ol>\n<h2>Best Practice</h2>\n<ul>\n<li>Never use <code>var</code> in modern JavaScript</li>\n</ul>\n<p>The only reason to know about <code>var</code> is to understand legacy code and avoid its pitfalls when you encounter it.</p>\n","markdown":"\n# Creating Variables with `var`\n\nWe've been using `let` and `const` to create variables, but there's a third option `var` that also allows you to create variables.\n\n## What is `var`?\n\nThe `var` keyword works similarly to `let` for basic variable creation:\n\n```javascript\nvar a = 1\nconsole.log(a) // 1\na = 2\nconsole.log(a) // 2\n```\n\nThis looks identical to using `let`, but `var` behaves very differently under the hood.\n\n### Why `var` Exists\n\nOriginally, when JavaScript was first created, `var` was the **only** way to create variables. Later, `let` and `const` were added to fix the strange and confusing behavior of `var`.\n\n## Problems With `var`\n\nWhile `var` can be used to create variables, it has several issues that make it problematic:\n\n### `var` Uses Function Scope\n\nThe biggest issue with `var` is that it completely ignores block scope and uses function scope instead:\n\n```javascript\nfunction func() {\n  {\n    var a = 1 // Function scope\n  }\n  console.log(a) // Prints 1\n}\n\nfunc()\n```\n\n```javascript\nfunction func() {\n  {\n    let a = 1 // Block scope\n  }\n  console.log(a) // ❌ ReferenceError: a is not defined\n}\n\nfunc()\n```\n\n### `var` Gets Hoisted Strangely\n\nVariables declared with `var` get hoisted to the top of their scope, but only the declaration (not the value):\n\n```javascript\nconsole.log(a) // Prints undefined\nvar a = 1\nconsole.log(a) // 1\n```\n\nJavaScript treats this as if you wrote:\n\n```javascript\nvar a\nconsole.log(a) // Prints undefined\na = 1 // Assignment happens here\nconsole.log(a) // 1\n```\n\nHere is how it behaves with `let`:\n\n```javascript\nconsole.log(a) // ❌ ReferenceError: Cannot access 'a' before initialization\nlet a = 1\n```\n\n### `var` Allows Redeclaration\n\nYou can declare the same `var` variable multiple times, which can lead to confusion:\n\n```javascript\nvar a = 1\nvar a = 2 // No error - just overwrites the first one\nconsole.log(a) // 2\n```\n\nWith `let`, you get a helpful error:\n\n```javascript\nlet b = 1\nlet b = 2 // ❌ SyntaxError: Identifier 'b' has already been declared\n```\n\n## When You Might See `var`\n\n1. **Older codebases** - Code written before `let` and `const` existed\n2. **Legacy tutorials** - Outdated learning materials\n3. **Interview questions** - Testing your understanding of JavaScript quirks\n\n## Best Practice\n\n- Never use `var` in modern JavaScript\n\nThe only reason to know about `var` is to understand legacy code and avoid its pitfalls when you encounter it.\n","slug":"creating-variables-with-var","title":"Creating Variables with var","section":"Advanced Variables","icon":"layer-group","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/07-advanced-variables/A-creating-variables-with-var.md","nextSlug":"/fem-getting-started-with-javascript/lessons/advanced-variables/type-coercion","prevSlug":"/fem-getting-started-with-javascript/lessons/scope/closures"}},"__N_SSG":true}