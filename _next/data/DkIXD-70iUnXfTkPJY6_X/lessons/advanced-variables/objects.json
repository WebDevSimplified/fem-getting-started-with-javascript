{"pageProps":{"post":{"attributes":{"description":"Learn how to create and work with objects to organize related data and functions together."},"html":"<h1>Objects</h1>\n<p>Objects are the most important variable type in JavaScript because they allow you to organize your data.</p>\n<h2>What is an Object?</h2>\n<p>An object is a collection of related information stored together in key-value pairs. Think of it like a box that holds different pieces of information about something.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Separate variables (not organized)</span>\n<span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;Kyle&quot;</span>\n<span class=\"hljs-keyword\">const</span> age = <span class=\"hljs-number\">30</span>\n<span class=\"hljs-keyword\">const</span> favoriteNumber = <span class=\"hljs-number\">3</span>\n\n<span class=\"hljs-comment\">// Object (organized together)</span>\n<span class=\"hljs-keyword\">const</span> person = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Kyle&quot;</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>,\n  <span class=\"hljs-attr\">favoriteNumber</span>: <span class=\"hljs-number\">3</span>,\n}\n</code></pre><h2>Creating Objects</h2>\n<p>Use curly braces <code>{}</code> to create objects, with key-value pairs separated by commas.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> person = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Kyle&quot;</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>,\n  <span class=\"hljs-attr\">favoriteNumber</span>: <span class=\"hljs-number\">3</span>,\n}\n</code></pre><h3>Key-Value Pairs</h3>\n<p>Each piece of data in an object consists of:</p>\n<ul>\n<li><strong>Key</strong>: The name of the property</li>\n<li><strong>Value</strong>: The data stored in that property</li>\n</ul>\n<p>Keys use the same naming conventions as variables (camelCase, no spaces) and the values can be any data type, including other objects or functions. The key and value are separated by a colon <code>:</code>.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> person = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Kyle&quot;</span>, <span class=\"hljs-comment\">// key: &quot;name&quot;, value: &quot;Kyle&quot;</span>\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>, <span class=\"hljs-comment\">// key: &quot;age&quot;, value: 30</span>\n  <span class=\"hljs-attr\">favoriteNumber</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-comment\">// key: &quot;favoriteNumber&quot;, value: 3</span>\n}\n</code></pre><h2>Accessing Object Properties</h2>\n<p>Use dot notation to access properties:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> person = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Kyle&quot;</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>,\n  <span class=\"hljs-attr\">favoriteNumber</span>: <span class=\"hljs-number\">3</span>,\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">name</span>) <span class=\"hljs-comment\">// &quot;Kyle&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">age</span>) <span class=\"hljs-comment\">// 30</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">favoriteNumber</span>) <span class=\"hljs-comment\">// 3</span>\n</code></pre><h2>Adding Functions to Objects</h2>\n<p>Objects can contain functions (often called <strong>methods</strong> when inside objects):</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> person = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Kyle&quot;</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>,\n  <span class=\"hljs-attr\">favoriteNumber</span>: <span class=\"hljs-number\">3</span>,\n  <span class=\"hljs-attr\">sayHi</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hi&quot;</span>)\n  },\n}\n\nperson.<span class=\"hljs-title function_\">sayHi</span>() <span class=\"hljs-comment\">// &quot;Hi&quot;</span>\n</code></pre><h3>Shorthand Function Syntax</h3>\n<p>You can write functions in objects without the <code>function</code> keyword:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> person = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Kyle&quot;</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>,\n  <span class=\"hljs-attr\">favoriteNumber</span>: <span class=\"hljs-number\">3</span>,\n  <span class=\"hljs-title function_\">sayHi</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hi&quot;</span>)\n  },\n  <span class=\"hljs-title function_\">sayGoodbye</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Goodbye&quot;</span>)\n  },\n}\n\nperson.<span class=\"hljs-title function_\">sayHi</span>() <span class=\"hljs-comment\">// &quot;Hi&quot;</span>\nperson.<span class=\"hljs-title function_\">sayGoodbye</span>() <span class=\"hljs-comment\">// &quot;Goodbye&quot;</span>\n</code></pre><h2>Real-World Example: <code>console.log</code></h2>\n<p>You&#39;ve been using objects all along! <code>console</code> is an object with a <code>log</code> function:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hello&quot;</span>) <span class=\"hljs-comment\">// console is an object, log is a method</span>\n\n<span class=\"hljs-comment\">// This is similar to:</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable language_\">console</span> = {\n  <span class=\"hljs-title function_\">log</span>(<span class=\"hljs-params\">message</span>) {\n    <span class=\"hljs-comment\">// Display the message</span>\n  },\n}\n</code></pre><h2>Bracket Notation (Alternative Access)</h2>\n<p>You can also access properties using brackets with strings:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> car = {\n  <span class=\"hljs-attr\">make</span>: <span class=\"hljs-string\">&quot;Nissan&quot;</span>,\n  <span class=\"hljs-attr\">model</span>: <span class=\"hljs-string\">&quot;370Z&quot;</span>,\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(car[<span class=\"hljs-string\">&quot;make&quot;</span>]) <span class=\"hljs-comment\">// &quot;Nissan&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(car.<span class=\"hljs-property\">make</span>) <span class=\"hljs-comment\">// &quot;Nissan&quot; (preferred)</span>\n</code></pre><p>The only time you need to use bracket notation is when the property name is stored in a variable:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> property = <span class=\"hljs-string\">&quot;make&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(car[property]) <span class=\"hljs-comment\">// &quot;Nissan&quot;</span>\n</code></pre><h2>Nested Objects</h2>\n<p>Objects can contain other objects or arrays:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> person = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Kyle&quot;</span>,\n  <span class=\"hljs-attr\">address</span>: {\n    <span class=\"hljs-attr\">street</span>: <span class=\"hljs-string\">&quot;12345 Main Street&quot;</span>,\n    <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&quot;Somewhere&quot;</span>,\n  },\n  <span class=\"hljs-attr\">hobbies</span>: [<span class=\"hljs-string\">&quot;weightlifting&quot;</span>, <span class=\"hljs-string\">&quot;programming&quot;</span>],\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">name</span>) <span class=\"hljs-comment\">// &quot;Kyle&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">address</span>.<span class=\"hljs-property\">street</span>) <span class=\"hljs-comment\">// &quot;12345 Main Street&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">address</span>.<span class=\"hljs-property\">city</span>) <span class=\"hljs-comment\">// &quot;Somewhere&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person.<span class=\"hljs-property\">hobbies</span>[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-comment\">// &quot;weightlifting&quot;</span>\n</code></pre><h2>Practice Exercise</h2>\n<p>Create an object called <code>book</code> with the following properties:</p>\n<ol>\n<li><code>title</code> - the book title</li>\n<li><code>author</code> - an object with <code>firstName</code> and <code>lastName</code></li>\n<li><code>yearPublished</code> - the year the book was published</li>\n<li><code>publish</code> - A function that prints the message <code>&quot;Publishing your book&quot;</code></li>\n</ol>\n<details>\n<summary>Solution</summary>\n\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> book = {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&quot;The Way of Kings&quot;</span>,\n  <span class=\"hljs-attr\">author</span>: {\n    <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">&quot;Brandon&quot;</span>,\n    <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">&quot;Sanderson&quot;</span>,\n  },\n  <span class=\"hljs-attr\">yearPublished</span>: <span class=\"hljs-number\">2010</span>,\n  <span class=\"hljs-title function_\">publish</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Publishing your book&quot;</span>)\n  },\n}\n</code></pre></details>\n","markdown":"\n# Objects\n\nObjects are the most important variable type in JavaScript because they allow you to organize your data.\n\n## What is an Object?\n\nAn object is a collection of related information stored together in key-value pairs. Think of it like a box that holds different pieces of information about something.\n\n```javascript\n// Separate variables (not organized)\nconst name = \"Kyle\"\nconst age = 30\nconst favoriteNumber = 3\n\n// Object (organized together)\nconst person = {\n  name: \"Kyle\",\n  age: 30,\n  favoriteNumber: 3,\n}\n```\n\n## Creating Objects\n\nUse curly braces `{}` to create objects, with key-value pairs separated by commas.\n\n```javascript\nconst person = {\n  name: \"Kyle\",\n  age: 30,\n  favoriteNumber: 3,\n}\n```\n\n### Key-Value Pairs\n\nEach piece of data in an object consists of:\n\n- **Key**: The name of the property\n- **Value**: The data stored in that property\n\nKeys use the same naming conventions as variables (camelCase, no spaces) and the values can be any data type, including other objects or functions. The key and value are separated by a colon `:`.\n\n```javascript\nconst person = {\n  name: \"Kyle\", // key: \"name\", value: \"Kyle\"\n  age: 30, // key: \"age\", value: 30\n  favoriteNumber: 3, // key: \"favoriteNumber\", value: 3\n}\n```\n\n## Accessing Object Properties\n\nUse dot notation to access properties:\n\n```javascript\nconst person = {\n  name: \"Kyle\",\n  age: 30,\n  favoriteNumber: 3,\n}\n\nconsole.log(person.name) // \"Kyle\"\nconsole.log(person.age) // 30\nconsole.log(person.favoriteNumber) // 3\n```\n\n## Adding Functions to Objects\n\nObjects can contain functions (often called **methods** when inside objects):\n\n```javascript\nconst person = {\n  name: \"Kyle\",\n  age: 30,\n  favoriteNumber: 3,\n  sayHi: function () {\n    console.log(\"Hi\")\n  },\n}\n\nperson.sayHi() // \"Hi\"\n```\n\n### Shorthand Function Syntax\n\nYou can write functions in objects without the `function` keyword:\n\n```javascript\nconst person = {\n  name: \"Kyle\",\n  age: 30,\n  favoriteNumber: 3,\n  sayHi() {\n    console.log(\"Hi\")\n  },\n  sayGoodbye() {\n    console.log(\"Goodbye\")\n  },\n}\n\nperson.sayHi() // \"Hi\"\nperson.sayGoodbye() // \"Goodbye\"\n```\n\n## Real-World Example: `console.log`\n\nYou've been using objects all along! `console` is an object with a `log` function:\n\n```javascript\nconsole.log(\"Hello\") // console is an object, log is a method\n\n// This is similar to:\nconst console = {\n  log(message) {\n    // Display the message\n  },\n}\n```\n\n## Bracket Notation (Alternative Access)\n\nYou can also access properties using brackets with strings:\n\n```javascript\nconst car = {\n  make: \"Nissan\",\n  model: \"370Z\",\n}\n\nconsole.log(car[\"make\"]) // \"Nissan\"\nconsole.log(car.make) // \"Nissan\" (preferred)\n```\n\nThe only time you need to use bracket notation is when the property name is stored in a variable:\n\n```javascript\nconst property = \"make\"\nconsole.log(car[property]) // \"Nissan\"\n```\n\n## Nested Objects\n\nObjects can contain other objects or arrays:\n\n```javascript\nconst person = {\n  name: \"Kyle\",\n  address: {\n    street: \"12345 Main Street\",\n    city: \"Somewhere\",\n  },\n  hobbies: [\"weightlifting\", \"programming\"],\n}\n\nconsole.log(person.name) // \"Kyle\"\nconsole.log(person.address.street) // \"12345 Main Street\"\nconsole.log(person.address.city) // \"Somewhere\"\nconsole.log(person.hobbies[0]) // \"weightlifting\"\n```\n\n## Practice Exercise\n\nCreate an object called `book` with the following properties:\n\n1. `title` - the book title\n2. `author` - an object with `firstName` and `lastName`\n3. `yearPublished` - the year the book was published\n4. `publish` - A function that prints the message `\"Publishing your book\"`\n\n<details>\n<summary>Solution</summary>\n\n```javascript\nconst book = {\n  title: \"The Way of Kings\",\n  author: {\n    firstName: \"Brandon\",\n    lastName: \"Sanderson\",\n  },\n  yearPublished: 2010,\n  publish() {\n    console.log(\"Publishing your book\")\n  },\n}\n```\n\n</details>\n","slug":"objects","title":"Objects","section":"Advanced Variables","icon":"layer-group","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/07-advanced-variables/F-objects.md","nextSlug":"/fem-getting-started-with-javascript/lessons/advanced-variables/reference-vs-value","prevSlug":"/fem-getting-started-with-javascript/lessons/advanced-variables/arrays"}},"__N_SSG":true}