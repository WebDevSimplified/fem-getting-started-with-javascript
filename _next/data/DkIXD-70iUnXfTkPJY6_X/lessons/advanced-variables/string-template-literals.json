{"pageProps":{"post":{"attributes":{"description":"Learn how to use template literals (backticks) to create dynamic strings with embedded variables and expressions."},"html":"<h1>String Template Literals</h1>\n<p>So far we&#39;ve been creating strings using single quotes <code>&#39;&#39;</code> or double quotes <code>&quot;&quot;</code>, but JavaScript provides a third way to create strings that&#39;s much more powerful: <strong>template literals</strong> using backticks <code>``</code>.</p>\n<h2>Basic Template Literal Syntax</h2>\n<p>Instead of regular quotes, template literals use backticks (the key above <code>Tab</code> on most keyboards):</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-string\">`Hi`</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// Hi</span>\n</code></pre><p>This works exactly the same as regular strings, but template literals have a special superpower.</p>\n<h3>Embedding Variables with <code>${}</code></h3>\n<p>The real power of template literals comes from being able to embed variables directly inside your strings using <code>${}</code> syntax:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> firstName = <span class=\"hljs-string\">&quot;Kyle&quot;</span>\n<span class=\"hljs-keyword\">const</span> lastName = <span class=\"hljs-string\">&quot;Cook&quot;</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(firstName + <span class=\"hljs-string\">&quot; &quot;</span> + lastName) <span class=\"hljs-comment\">// Kyle Cook</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${firstName}</span> <span class=\"hljs-subst\">${lastName}</span>`</span>) <span class=\"hljs-comment\">// Kyle Cook</span>\n</code></pre><p>The <code>${}</code> syntax tells JavaScript &quot;run the code inside these brackets and put the result here.&quot;</p>\n<h3>Embedding Any JavaScript Expression</h3>\n<p>You can put <strong>any</strong> JavaScript expression inside <code>${}</code>, not just variables:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> firstName = <span class=\"hljs-string\">&quot;Kyle&quot;</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${firstName}</span> <span class=\"hljs-subst\">${<span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span>}</span>`</span>) <span class=\"hljs-comment\">// Kyle 5</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Hello <span class=\"hljs-subst\">${firstName.toUpperCase()}</span>`</span>) <span class=\"hljs-comment\">// Hello KYLE</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Random number: <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Math</span>.random()}</span>`</span>) <span class=\"hljs-comment\">// Random number: 0.234...</span>\n</code></pre><h2>Multi-line Strings</h2>\n<p>Template literals also make it easy to create multi-line strings:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> poem = <span class=\"hljs-string\">`Roses are red,\nViolets are blue,\nTemplate literals are awesome,\nAnd so are you!`</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(poem)\n<span class=\"hljs-comment\">// Roses are red,</span>\n<span class=\"hljs-comment\">// Violets are blue,</span>\n<span class=\"hljs-comment\">// Template literals are awesome,</span>\n<span class=\"hljs-comment\">// And so are you!</span>\n</code></pre><h2>When to Use Template Literals</h2>\n<p>Use template literals when:</p>\n<ul>\n<li>✅ You need to embed variables in strings</li>\n<li>✅ You need multi-line strings</li>\n</ul>\n<p>Stick with regular quotes when:</p>\n<ul>\n<li>✅ You have simple, static strings with no variables</li>\n</ul>\n","markdown":"\n# String Template Literals\n\nSo far we've been creating strings using single quotes `''` or double quotes `\"\"`, but JavaScript provides a third way to create strings that's much more powerful: **template literals** using backticks ` `` `.\n\n## Basic Template Literal Syntax\n\nInstead of regular quotes, template literals use backticks (the key above `Tab` on most keyboards):\n\n```javascript\nconst a = `Hi`\nconsole.log(a) // Hi\n```\n\nThis works exactly the same as regular strings, but template literals have a special superpower.\n\n### Embedding Variables with `${}`\n\nThe real power of template literals comes from being able to embed variables directly inside your strings using `${}` syntax:\n\n```javascript\nconst firstName = \"Kyle\"\nconst lastName = \"Cook\"\n\nconsole.log(firstName + \" \" + lastName) // Kyle Cook\nconsole.log(`${firstName} ${lastName}`) // Kyle Cook\n```\n\nThe `${}` syntax tells JavaScript \"run the code inside these brackets and put the result here.\"\n\n### Embedding Any JavaScript Expression\n\nYou can put **any** JavaScript expression inside `${}`, not just variables:\n\n```javascript\nconst firstName = \"Kyle\"\n\nconsole.log(`${firstName} ${2 + 3}`) // Kyle 5\nconsole.log(`Hello ${firstName.toUpperCase()}`) // Hello KYLE\nconsole.log(`Random number: ${Math.random()}`) // Random number: 0.234...\n```\n\n## Multi-line Strings\n\nTemplate literals also make it easy to create multi-line strings:\n\n```javascript\nconst poem = `Roses are red,\nViolets are blue,\nTemplate literals are awesome,\nAnd so are you!`\n\nconsole.log(poem)\n// Roses are red,\n// Violets are blue,\n// Template literals are awesome,\n// And so are you!\n```\n\n## When to Use Template Literals\n\nUse template literals when:\n\n- ✅ You need to embed variables in strings\n- ✅ You need multi-line strings\n\nStick with regular quotes when:\n\n- ✅ You have simple, static strings with no variables\n","slug":"string-template-literals","title":"String Template Literals","section":"Advanced Variables","icon":"layer-group","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/07-advanced-variables/H-string-template-literals.md","nextSlug":"/fem-getting-started-with-javascript/lessons/advanced-variables/this-keyword","prevSlug":"/fem-getting-started-with-javascript/lessons/advanced-variables/reference-vs-value"}},"__N_SSG":true}