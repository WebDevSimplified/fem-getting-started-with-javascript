{"pageProps":{"post":{"attributes":{"description":"Learn how JavaScript organizes variables and functions into different scopes, and how inner scopes can access outer scopes but not vice versa."},"html":"<h1>Understanding Scope</h1>\n<p>Scope is a fundamental concept in JavaScript that determines where variables and functions can be accessed.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHi</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-string\">&quot;Hi&quot;</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result) <span class=\"hljs-comment\">// Prints &quot;Hi&quot;</span>\n}\n\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-string\">&quot;Bye&quot;</span>\n<span class=\"hljs-title function_\">sayHi</span>() <span class=\"hljs-comment\">// What does this print?</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result) <span class=\"hljs-comment\">// What does this print?</span>\n</code></pre><h2>What is Scope?</h2>\n<p><strong>Scope</strong> is the area of your code where a variable or function is accessible. JavaScript creates a new scope inside every set of curly braces <code>{}</code> as well as a <strong>global scope</strong> for your entire file.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// New scope created here</span>\n  <span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-number\">5</span>\n}\n\n<span class=\"hljs-comment\">// Global scope</span>\n<span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-title function_\">myFunction</span>()\n</code></pre><h3>Scope Is One-Way</h3>\n<p>The best way to think about scope is like <strong>one-way mirrors</strong> that always look outward:</p>\n<ul>\n<li><p>✅ Inner scopes can see outer scopes</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// Global scope</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">func</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// Function scope</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// ✅ Can see outer scope</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b) <span class=\"hljs-comment\">// ✅ Can see own scope</span>\n}\n</code></pre></li>\n<li><p>❌ Outer scopes cannot see inner scopes</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">func</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// Function scope</span>\n}\n\n<span class=\"hljs-title function_\">func</span>()\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b) <span class=\"hljs-comment\">// ❌ Error - cannot see inner scope</span>\n</code></pre></li>\n</ul>\n<h2>Types of Scope</h2>\n<p>There are multiple types of scope in JavaScript, but the three most important are <strong>global scope</strong>, <strong>function scope</strong>, and <strong>block scope</strong>.</p>\n<h3>Global Scope</h3>\n<p>The <strong>global scope</strong> is the outermost scope - your entire file. Variables declared here can be accessed from anywhere in your code:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;Kyle&quot;</span> <span class=\"hljs-comment\">// Global scope</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHi</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name) <span class=\"hljs-comment\">// ✅ Can access global variable</span>\n}\n\n<span class=\"hljs-title function_\">sayHi</span>()\n</code></pre><h3>Block Scope</h3>\n<p>A new <strong>block scope</strong> is created for any code between curly braces <code>{}</code>:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">// New block scope</span>\n}\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n  <span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// New block scope</span>\n}\n\n{\n  <span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// New block scope</span>\n}\n</code></pre><h3>Function Scope</h3>\n<p>A <strong>function scope</strong> is created whenever you define a function. A function scope is very similar to a block scope, but some JavaScript features (covered later) use function scope instead of block scope:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-number\">5</span>\n}\n</code></pre><h2>Nested Scopes</h2>\n<p>You can have multiple levels of scope:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">let</span> c = <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">// Global scope</span>\n\n{\n  <span class=\"hljs-comment\">// Outer block scope</span>\n  <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">1</span>\n\n  {\n    <span class=\"hljs-comment\">// Inner block scope</span>\n    <span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">2</span>\n\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// 1 - can see outer scope</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b) <span class=\"hljs-comment\">// 2 - can see own scope</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(c) <span class=\"hljs-comment\">// 3 - can see global scope</span>\n  }\n\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// 1 - can see own scope</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(c) <span class=\"hljs-comment\">// 3 - can see global scope</span>\n  <span class=\"hljs-comment\">// console.log(b)  // ❌ Error - cannot see inner scope</span>\n}\n</code></pre><h3>Naming Conflicts</h3>\n<p>You can have variables with the same name in different scopes without conflict:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-string\">&quot;Kyle&quot;</span> <span class=\"hljs-comment\">// Global scope</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHi</span>(<span class=\"hljs-params\">name</span>) {\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-string\">&quot;Hi &quot;</span> + name <span class=\"hljs-comment\">// Block scope - different variable!</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result) <span class=\"hljs-comment\">// &quot;Hi Kyle&quot;</span>\n}\n\n<span class=\"hljs-title function_\">sayHi</span>(<span class=\"hljs-string\">&quot;Kyle&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result) <span class=\"hljs-comment\">// &quot;Kyle&quot; - still the global variable</span>\n</code></pre><p>These are completely separate variables that happen to share a name.</p>\n<h3>Determining Which Variable to Use</h3>\n<p>When JavaScript looks for a variable, it starts in the current scope and works outward:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// Global scope</span>\n<span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;Kyle&quot;</span> <span class=\"hljs-comment\">// Global scope</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// Block scope</span>\n\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// Prints 2</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name) <span class=\"hljs-comment\">// Prints &quot;Kyle&quot;</span>\n}\n\n<span class=\"hljs-title function_\">myFunction</span>()\n</code></pre><h2>Best Practices</h2>\n<ul>\n<li><p>Minimize global variable usage</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ Avoid this</span>\n<span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;Kyle&quot;</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name)\n}\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ✅ Put variables as locally as possible</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;Kyle&quot;</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name)\n}\n</code></pre></li>\n<li><p>Don&#39;t use the same name for different variables in nested scopes</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ Confusing - hard to tell which &#x27;a&#x27; is used</span>\n<span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">2</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// Which &#x27;a&#x27; is this?</span>\n}\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ✅ Clear - use different names</span>\n<span class=\"hljs-keyword\">const</span> outerA = <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myFunction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> innerA = <span class=\"hljs-number\">2</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(innerA) <span class=\"hljs-comment\">// Clearly uses inner scope</span>\n}\n</code></pre></li>\n</ul>\n","markdown":"\n# Understanding Scope\n\nScope is a fundamental concept in JavaScript that determines where variables and functions can be accessed.\n\n```javascript\nfunction sayHi() {\n  const result = \"Hi\"\n  console.log(result) // Prints \"Hi\"\n}\n\nconst result = \"Bye\"\nsayHi() // What does this print?\nconsole.log(result) // What does this print?\n```\n\n## What is Scope?\n\n**Scope** is the area of your code where a variable or function is accessible. JavaScript creates a new scope inside every set of curly braces `{}` as well as a **global scope** for your entire file.\n\n```javascript\nfunction myFunction() {\n  // New scope created here\n  const x = 5\n}\n\n// Global scope\nconst x = 10\nmyFunction()\n```\n\n### Scope Is One-Way\n\nThe best way to think about scope is like **one-way mirrors** that always look outward:\n\n- ✅ Inner scopes can see outer scopes\n\n  ```javascript\n  const a = 1 // Global scope\n\n  function func() {\n    const b = 2 // Function scope\n    console.log(a) // ✅ Can see outer scope\n    console.log(b) // ✅ Can see own scope\n  }\n  ```\n\n- ❌ Outer scopes cannot see inner scopes\n\n  ```javascript\n  function func() {\n    const b = 2 // Function scope\n  }\n\n  func()\n  console.log(b) // ❌ Error - cannot see inner scope\n  ```\n\n## Types of Scope\n\nThere are multiple types of scope in JavaScript, but the three most important are **global scope**, **function scope**, and **block scope**.\n\n### Global Scope\n\nThe **global scope** is the outermost scope - your entire file. Variables declared here can be accessed from anywhere in your code:\n\n```javascript\nconst name = \"Kyle\" // Global scope\n\nfunction sayHi() {\n  console.log(name) // ✅ Can access global variable\n}\n\nsayHi()\n```\n\n### Block Scope\n\nA new **block scope** is created for any code between curly braces `{}`:\n\n```javascript\nfunction myFunction() {\n  const x = 3 // New block scope\n}\n\nif (true) {\n  const x = 1 // New block scope\n}\n\n{\n  const x = 2 // New block scope\n}\n```\n\n### Function Scope\n\nA **function scope** is created whenever you define a function. A function scope is very similar to a block scope, but some JavaScript features (covered later) use function scope instead of block scope:\n\n```javascript\nfunction myFunction() {\n  const x = 5\n}\n```\n\n## Nested Scopes\n\nYou can have multiple levels of scope:\n\n```javascript\nlet c = 3 // Global scope\n\n{\n  // Outer block scope\n  let a = 1\n\n  {\n    // Inner block scope\n    let b = 2\n\n    console.log(a) // 1 - can see outer scope\n    console.log(b) // 2 - can see own scope\n    console.log(c) // 3 - can see global scope\n  }\n\n  console.log(a) // 1 - can see own scope\n  console.log(c) // 3 - can see global scope\n  // console.log(b)  // ❌ Error - cannot see inner scope\n}\n```\n\n### Naming Conflicts\n\nYou can have variables with the same name in different scopes without conflict:\n\n```javascript\nconst result = \"Kyle\" // Global scope\n\nfunction sayHi(name) {\n  const result = \"Hi \" + name // Block scope - different variable!\n  console.log(result) // \"Hi Kyle\"\n}\n\nsayHi(\"Kyle\")\nconsole.log(result) // \"Kyle\" - still the global variable\n```\n\nThese are completely separate variables that happen to share a name.\n\n### Determining Which Variable to Use\n\nWhen JavaScript looks for a variable, it starts in the current scope and works outward:\n\n```javascript\nconst a = 1 // Global scope\nconst name = \"Kyle\" // Global scope\n\nfunction myFunction() {\n  const a = 2 // Block scope\n\n  console.log(a) // Prints 2\n  console.log(name) // Prints \"Kyle\"\n}\n\nmyFunction()\n```\n\n## Best Practices\n\n- Minimize global variable usage\n\n  ```javascript\n  // ❌ Avoid this\n  const name = \"Kyle\"\n\n  function myFunction() {\n    console.log(name)\n  }\n  ```\n\n  ```javascript\n  // ✅ Put variables as locally as possible\n  function myFunction() {\n    const name = \"Kyle\"\n    console.log(name)\n  }\n  ```\n\n- Don't use the same name for different variables in nested scopes\n\n  ```javascript\n  // ❌ Confusing - hard to tell which 'a' is used\n  const a = 1\n\n  function myFunction() {\n    const a = 2\n    console.log(a) // Which 'a' is this?\n  }\n  ```\n\n  ```javascript\n  // ✅ Clear - use different names\n  const outerA = 1\n\n  function myFunction() {\n    const innerA = 2\n    console.log(innerA) // Clearly uses inner scope\n  }\n  ```\n","slug":"understanding-scope","title":"Understanding Scope","section":"Scope","icon":"eye","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/06-scope/A-understanding-scope.md","nextSlug":"/fem-getting-started-with-javascript/lessons/scope/hoisting","prevSlug":"/fem-getting-started-with-javascript/lessons/functions/arrow-functions"}},"__N_SSG":true}