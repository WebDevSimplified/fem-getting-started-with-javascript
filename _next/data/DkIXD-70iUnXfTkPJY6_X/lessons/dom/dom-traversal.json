{"pageProps":{"post":{"attributes":{"title":"DOM Traversal","description":"Learn how to navigate through the DOM tree using JavaScript to move from one element to related elements like parents, children, and siblings."},"html":"<h1>DOM Traversal</h1>\n<p>DOM traversal is the process of navigating through the DOM tree structure to move from one element to related elements. Instead of selecting elements by their IDs or classes every time, you can start with one element and traverse to its parents, children, or siblings.</p>\n<h2>Understanding the DOM Tree Structure</h2>\n<p>The DOM is structured like a family tree. Every element has relationships with other elements:</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;grandparent&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parent-1&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;child-1&quot;</span>&gt;</span>Child 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;child-2&quot;</span>&gt;</span>Child 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parent-2&quot;</span>&gt;</span>Parent 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><h3>Visual Representation</h3>\n<pre><code class=\"hljs language-text\"><button class=\"copy-btn\">Copy</button>grandparent\n├── parent-1\n│   ├── child-1\n│   └── child-2\n└── parent-2\n</code></pre><p>In this structure:</p>\n<ul>\n<li><code>grandparent</code> is the <strong>parent</strong> of <code>parent-1</code> and <code>parent-2</code></li>\n<li><code>parent-1</code> and <code>parent-2</code> are <strong>siblings</strong> (they share the same parent)</li>\n<li><code>child-1</code> and <code>child-2</code> are <strong>children</strong> of <code>parent-1</code></li>\n<li><code>child-1</code> and <code>child-2</code> are <strong>siblings</strong> of each other</li>\n</ul>\n<h2>Traversing to Child Elements</h2>\n<p>The <code>children</code> property returns a <strong>live HTMLCollection</strong> of all direct child elements:</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;grandparent&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parent-1&quot;</span>&gt;</span>Parent 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parent-2&quot;</span>&gt;</span>Parent 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> grandparent = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#grandparent&quot;</span>)\n<span class=\"hljs-keyword\">const</span> children = grandparent.<span class=\"hljs-property\">children</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(children) <span class=\"hljs-comment\">// HTMLCollection with parent-1 and parent-2</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(children.<span class=\"hljs-property\">length</span>) <span class=\"hljs-comment\">// 2</span>\n\n<span class=\"hljs-comment\">// Access individual children by index</span>\n<span class=\"hljs-keyword\">const</span> firstChild = children[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\">// parent-1</span>\n<span class=\"hljs-keyword\">const</span> secondChild = children[<span class=\"hljs-number\">1</span>] <span class=\"hljs-comment\">// parent-2</span>\n</code></pre><h3>Getting Specific Children</h3>\n<p>You can use <code>querySelector</code> and <code>querySelectorAll</code> on any element, not just <code>document</code>:</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span>Item 3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#container&quot;</span>)\n\n<span class=\"hljs-comment\">// Find all elements with class &quot;item&quot; inside the container</span>\n<span class=\"hljs-keyword\">const</span> items = container.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">&quot;.item&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(items.<span class=\"hljs-property\">length</span>) <span class=\"hljs-comment\">// 3</span>\n\n<span class=\"hljs-comment\">// Find the first div with class &quot;item&quot; inside the container</span>\n<span class=\"hljs-keyword\">const</span> firstDiv = container.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;div.item&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(firstDiv.<span class=\"hljs-property\">textContent</span>) <span class=\"hljs-comment\">// &quot;Item 1&quot;</span>\n</code></pre><h2>Traversing to Sibling Elements</h2>\n<p><code>nextElementSibling</code> and <code>previousElementSibling</code> allow you to move between sibling elements at the same level in the DOM tree.</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;one&quot;</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;two&quot;</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;three&quot;</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> two = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#two&quot;</span>)\n<span class=\"hljs-keyword\">const</span> three = two.<span class=\"hljs-property\">nextElementSibling</span>\n<span class=\"hljs-keyword\">const</span> one = two.<span class=\"hljs-property\">previousElementSibling</span>\n</code></pre><h3>What About <code>nextSibling</code> and <code>previousSibling</code>?</h3>\n<p><code>nextSibling</code> and <code>previousSibling</code> may seem like they do the same thing, but they return <strong>any</strong> node, including text nodes (like whitespace):</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;one&quot;</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;two&quot;</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;three&quot;</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> two = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#two&quot;</span>)\n<span class=\"hljs-keyword\">const</span> three = two.<span class=\"hljs-property\">nextSibling</span>\n<span class=\"hljs-keyword\">const</span> one = two.<span class=\"hljs-property\">previousSibling</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(three) <span class=\"hljs-comment\">// Grabs the text between divs (whitespace)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(one) <span class=\"hljs-comment\">// Grabs the text between divs (whitespace)</span>\n</code></pre><h2>Traversing to Parent Elements</h2>\n<p><code>parentElement</code> allows you to move up the DOM tree to the parent of an element:</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;grandparent&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parent-1&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;child-1&quot;</span>&gt;</span>Child 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parent-2&quot;</span>&gt;</span>Parent 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> child1 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#child-1&quot;</span>)\n<span class=\"hljs-keyword\">const</span> parent1 = child1.<span class=\"hljs-property\">parentElement</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(parent1.<span class=\"hljs-property\">id</span>) <span class=\"hljs-comment\">// &quot;parent-1&quot;</span>\n\n<span class=\"hljs-comment\">// Chain to go up multiple levels</span>\n<span class=\"hljs-keyword\">const</span> grandparent = child1.<span class=\"hljs-property\">parentElement</span>.<span class=\"hljs-property\">parentElement</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(grandparent.<span class=\"hljs-property\">id</span>) <span class=\"hljs-comment\">// &quot;grandparent&quot;</span>\n</code></pre><h3>Don&#39;t Use <code>parentNode</code></h3>\n<p>Just like <code>nextSibling</code>, <code>parentNode</code> can return nodes that are not elements. Always prefer <code>parentElement</code> for traversing up the DOM tree.</p>\n<h3>Finding Ancestors: <code>closest()</code></h3>\n<p>The <code>closest()</code> method is incredibly useful - it searches up the DOM tree for the first ancestor that matches a CSS selector:</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;section&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;card&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;delete-btn&quot;</span>&gt;</span>Delete<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> deleteBtn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#delete-btn&quot;</span>)\n\n<span class=\"hljs-comment\">// Find the closest ancestor with class &quot;card&quot;</span>\n<span class=\"hljs-keyword\">const</span> card = deleteBtn.<span class=\"hljs-title function_\">closest</span>(<span class=\"hljs-string\">&quot;.card&quot;</span>)\n\n<span class=\"hljs-comment\">// Find the closest ancestor with class &quot;section&quot;</span>\n<span class=\"hljs-keyword\">const</span> section = deleteBtn.<span class=\"hljs-title function_\">closest</span>(<span class=\"hljs-string\">&quot;.section&quot;</span>)\n\n<span class=\"hljs-comment\">// Find the closest ancestor with class &quot;container&quot;</span>\n<span class=\"hljs-keyword\">const</span> container = deleteBtn.<span class=\"hljs-title function_\">closest</span>(<span class=\"hljs-string\">&quot;.container&quot;</span>)\n\n<span class=\"hljs-comment\">// If no matching ancestor is found, returns null</span>\n<span class=\"hljs-keyword\">const</span> nonExistent = deleteBtn.<span class=\"hljs-title function_\">closest</span>(<span class=\"hljs-string\">&quot;.does-not-exist&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(nonExistent) <span class=\"hljs-comment\">// null</span>\n</code></pre><h2>Prefer <code>closest</code> and <code>querySelector</code> Over Other Methods</h2>\n<p>If you use <code>children</code>, <code>nextElementSibling</code>, <code>previousElementSibling</code>, and <code>parentElement</code> too much, your code can become brittle and break if the HTML structure changes.</p>\n<p>Instead, prefer <code>closest</code> and <code>querySelector</code>/<code>querySelectorAll</code> to find elements based on their relationships and CSS selectors. This makes your code more flexible and easier to maintain.</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;post-title&quot;</span>&gt;</span>My First Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;post-content&quot;</span>&gt;</span>This is the content of my first post.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;edit-btn&quot;</span>&gt;</span>Edit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> editBtn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;.edit-btn&quot;</span>)\neditBtn.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-comment\">// This works, but is brittle if HTML structure changes</span>\n  <span class=\"hljs-keyword\">const</span> post = editBtn.<span class=\"hljs-property\">parentElement</span>\n  <span class=\"hljs-keyword\">const</span> title = post.<span class=\"hljs-property\">children</span>[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(title) <span class=\"hljs-comment\">// &lt;h2 class=&quot;post-title&quot;&gt;My First Post&lt;/h2&gt;</span>\n})\n</code></pre><p>Now imagine if we changed the HTML structure:</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;post-title&quot;</span>&gt;</span>My First Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;post-content&quot;</span>&gt;</span>This is the content of my first post.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;actions&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;edit-btn&quot;</span>&gt;</span>Edit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><p>Our original code would break because <code>editBtn.parentElement</code> is no longer the <code>.post</code> element.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> editBtn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;.edit-btn&quot;</span>)\neditBtn.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-comment\">// This works, but is brittle if HTML structure changes</span>\n  <span class=\"hljs-keyword\">const</span> post = editBtn.<span class=\"hljs-title function_\">closest</span>(<span class=\"hljs-string\">&quot;.post&quot;</span>)\n  <span class=\"hljs-keyword\">const</span> title = post.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;.post-title&quot;</span>)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(title) <span class=\"hljs-comment\">// &lt;h2 class=&quot;post-title&quot;&gt;My First Post&lt;/h2&gt;</span>\n})\n</code></pre><p>By using <code>closest</code> and <code>querySelector</code>, our code can adapt to changes in the HTML structure without breaking.</p>\n","markdown":"\n# DOM Traversal\n\nDOM traversal is the process of navigating through the DOM tree structure to move from one element to related elements. Instead of selecting elements by their IDs or classes every time, you can start with one element and traverse to its parents, children, or siblings.\n\n## Understanding the DOM Tree Structure\n\nThe DOM is structured like a family tree. Every element has relationships with other elements:\n\n```html\n<div id=\"grandparent\">\n  <div id=\"parent-1\">\n    <div id=\"child-1\">Child 1</div>\n    <div id=\"child-2\">Child 2</div>\n  </div>\n  <div id=\"parent-2\">Parent 2</div>\n</div>\n```\n\n### Visual Representation\n\n```text\ngrandparent\n├── parent-1\n│   ├── child-1\n│   └── child-2\n└── parent-2\n```\n\nIn this structure:\n\n- `grandparent` is the **parent** of `parent-1` and `parent-2`\n- `parent-1` and `parent-2` are **siblings** (they share the same parent)\n- `child-1` and `child-2` are **children** of `parent-1`\n- `child-1` and `child-2` are **siblings** of each other\n\n## Traversing to Child Elements\n\nThe `children` property returns a **live HTMLCollection** of all direct child elements:\n\n```html\n<div id=\"grandparent\">\n  <div id=\"parent-1\">Parent 1</div>\n  <div id=\"parent-2\">Parent 2</div>\n</div>\n```\n\n```javascript\nconst grandparent = document.querySelector(\"#grandparent\")\nconst children = grandparent.children\n\nconsole.log(children) // HTMLCollection with parent-1 and parent-2\nconsole.log(children.length) // 2\n\n// Access individual children by index\nconst firstChild = children[0] // parent-1\nconst secondChild = children[1] // parent-2\n```\n\n### Getting Specific Children\n\nYou can use `querySelector` and `querySelectorAll` on any element, not just `document`:\n\n```html\n<div id=\"container\">\n  <div class=\"item\">Item 1</div>\n  <div class=\"item\">Item 2</div>\n  <span class=\"item\">Item 3</span>\n</div>\n```\n\n```javascript\nconst container = document.querySelector(\"#container\")\n\n// Find all elements with class \"item\" inside the container\nconst items = container.querySelectorAll(\".item\")\nconsole.log(items.length) // 3\n\n// Find the first div with class \"item\" inside the container\nconst firstDiv = container.querySelector(\"div.item\")\nconsole.log(firstDiv.textContent) // \"Item 1\"\n```\n\n## Traversing to Sibling Elements\n\n`nextElementSibling` and `previousElementSibling` allow you to move between sibling elements at the same level in the DOM tree.\n\n```html\n<div id=\"one\">1</div>\n<div id=\"two\">2</div>\n<div id=\"three\">3</div>\n```\n\n```javascript\nconst two = document.querySelector(\"#two\")\nconst three = two.nextElementSibling\nconst one = two.previousElementSibling\n```\n\n### What About `nextSibling` and `previousSibling`?\n\n`nextSibling` and `previousSibling` may seem like they do the same thing, but they return **any** node, including text nodes (like whitespace):\n\n```html\n<div id=\"one\">1</div>\n<div id=\"two\">2</div>\n<div id=\"three\">3</div>\n```\n\n```javascript\nconst two = document.querySelector(\"#two\")\nconst three = two.nextSibling\nconst one = two.previousSibling\n\nconsole.log(three) // Grabs the text between divs (whitespace)\nconsole.log(one) // Grabs the text between divs (whitespace)\n```\n\n## Traversing to Parent Elements\n\n`parentElement` allows you to move up the DOM tree to the parent of an element:\n\n```html\n<div id=\"grandparent\">\n  <div id=\"parent-1\">\n    <div id=\"child-1\">Child 1</div>\n  </div>\n  <div id=\"parent-2\">Parent 2</div>\n</div>\n```\n\n```javascript\nconst child1 = document.querySelector(\"#child-1\")\nconst parent1 = child1.parentElement\n\nconsole.log(parent1.id) // \"parent-1\"\n\n// Chain to go up multiple levels\nconst grandparent = child1.parentElement.parentElement\n\nconsole.log(grandparent.id) // \"grandparent\"\n```\n\n### Don't Use `parentNode`\n\nJust like `nextSibling`, `parentNode` can return nodes that are not elements. Always prefer `parentElement` for traversing up the DOM tree.\n\n### Finding Ancestors: `closest()`\n\nThe `closest()` method is incredibly useful - it searches up the DOM tree for the first ancestor that matches a CSS selector:\n\n```html\n<div class=\"container\">\n  <div class=\"section\">\n    <div class=\"card\">\n      <button id=\"delete-btn\">Delete</button>\n    </div>\n  </div>\n</div>\n```\n\n```javascript\nconst deleteBtn = document.querySelector(\"#delete-btn\")\n\n// Find the closest ancestor with class \"card\"\nconst card = deleteBtn.closest(\".card\")\n\n// Find the closest ancestor with class \"section\"\nconst section = deleteBtn.closest(\".section\")\n\n// Find the closest ancestor with class \"container\"\nconst container = deleteBtn.closest(\".container\")\n\n// If no matching ancestor is found, returns null\nconst nonExistent = deleteBtn.closest(\".does-not-exist\")\nconsole.log(nonExistent) // null\n```\n\n## Prefer `closest` and `querySelector` Over Other Methods\n\nIf you use `children`, `nextElementSibling`, `previousElementSibling`, and `parentElement` too much, your code can become brittle and break if the HTML structure changes.\n\nInstead, prefer `closest` and `querySelector`/`querySelectorAll` to find elements based on their relationships and CSS selectors. This makes your code more flexible and easier to maintain.\n\n```html\n<div class=\"post\">\n  <h2 class=\"post-title\">My First Post</h2>\n  <p class=\"post-content\">This is the content of my first post.</p>\n  <button class=\"edit-btn\">Edit</button>\n</div>\n```\n\n```javascript\nconst editBtn = document.querySelector(\".edit-btn\")\neditBtn.addEventListener(\"click\", () => {\n  // This works, but is brittle if HTML structure changes\n  const post = editBtn.parentElement\n  const title = post.children[0]\n  console.log(title) // <h2 class=\"post-title\">My First Post</h2>\n})\n```\n\nNow imagine if we changed the HTML structure:\n\n```html\n<div class=\"post\">\n  <h2 class=\"post-title\">My First Post</h2>\n  <p class=\"post-content\">This is the content of my first post.</p>\n  <div class=\"actions\">\n    <button class=\"edit-btn\">Edit</button>\n  </div>\n</div>\n```\n\nOur original code would break because `editBtn.parentElement` is no longer the `.post` element.\n\n```javascript\nconst editBtn = document.querySelector(\".edit-btn\")\neditBtn.addEventListener(\"click\", () => {\n  // This works, but is brittle if HTML structure changes\n  const post = editBtn.closest(\".post\")\n  const title = post.querySelector(\".post-title\")\n  console.log(title) // <h2 class=\"post-title\">My First Post</h2>\n})\n```\n\nBy using `closest` and `querySelector`, our code can adapt to changes in the HTML structure without breaking.\n","slug":"dom-traversal","title":"DOM Traversal","section":"DOM","icon":"sitemap","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/09-dom/E-dom-traversal.md","nextSlug":"/fem-getting-started-with-javascript/lessons/debugging/common-errors","prevSlug":"/fem-getting-started-with-javascript/lessons/dom/event-delegation"}},"__N_SSG":true}