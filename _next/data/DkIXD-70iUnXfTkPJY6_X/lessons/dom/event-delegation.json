{"pageProps":{"post":{"attributes":{"description":"Learn about event delegation, event bubbling, and event capturing - powerful concepts that allow you to handle events efficiently and work with dynamically added elements."},"html":"<h1>Event Delegation</h1>\n<p>Event delegation is a JavaScript feature that passes events from child elements to a parent element, allowing you to handle events more efficiently and work with dynamically added elements.</p>\n<h2>Understanding Event Flow</h2>\n<p>Before we dive into event delegation, we need to understand how events flow through the DOM. When you click on an element, you&#39;re actually clicking on multiple elements at once!</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>Click Me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p>When you click the button, you&#39;re also clicking on:</p>\n<ul>\n<li>The <code>div</code> container (the button is inside it)</li>\n<li>The <code>body</code> element (the div is inside it)</li>\n<li>The <code>html</code> element (the body is inside it)</li>\n<li>The <code>document</code> (everything is inside it)</li>\n</ul>\n<h3>Event Flow Phases</h3>\n<p>Events flow through the DOM in three phases:</p>\n<ul>\n<li><strong>Phase 1 - Capture</strong>: The event travels from the document down to the target element</li>\n<li><strong>Phase 2 - Target</strong>: The event reaches the actual target element</li>\n<li><strong>Phase 3 - Bubble</strong>: The event travels back up from the target to the document</li>\n</ul>\n<h2>Seeing Event Bubbling in Action</h2>\n<p>By default events trigger in the bubble phase, meaning they start at the target element and bubble up to its ancestors.</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;outer&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;middle&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inner&quot;</span>&gt;</span>Click Me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> outer = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#outer&quot;</span>)\n<span class=\"hljs-keyword\">const</span> middle = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#middle&quot;</span>)\n<span class=\"hljs-keyword\">const</span> inner = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#inner&quot;</span>)\n\nouter.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Outer div clicked&quot;</span>)\n})\n\nmiddle.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Middle div clicked&quot;</span>)\n})\n\ninner.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Button clicked&quot;</span>)\n})\n\n<span class=\"hljs-comment\">// When you click the button, you&#x27;ll see:</span>\n<span class=\"hljs-comment\">// &quot;Button clicked&quot;</span>\n<span class=\"hljs-comment\">// &quot;Middle div clicked&quot;</span>\n<span class=\"hljs-comment\">// &quot;Outer div clicked&quot;</span>\n</code></pre><p>The event starts at the button (target) and bubbles up through its ancestors.</p>\n<h2>Controlling Event Flow</h2>\n<p>You may not want this default bubbling behavior, so there are a few ways to control it:</p>\n<h3>Stopping Event Propagation - <code>stopPropagation</code></h3>\n<p>You can stop an event from propagating to other elements by calling <code>stopPropagation()</code> on the event object:</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;outer&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;middle&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inner&quot;</span>&gt;</span>Click Me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button>inner.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Button clicked&quot;</span>)\n  e.<span class=\"hljs-title function_\">stopPropagation</span>() <span class=\"hljs-comment\">// Stop the event here!</span>\n})\n\nmiddle.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;This won&#x27;t run!&quot;</span>)\n})\n\nouter.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;This won&#x27;t run either!&quot;</span>)\n})\n\n<span class=\"hljs-comment\">// When you click the button, you&#x27;ll see:</span>\n<span class=\"hljs-comment\">// &quot;Button clicked&quot;</span>\n</code></pre><h3>Capture Phase Event Listeners</h3>\n<p>By default, event listeners run during the bubble phase, but you can make them run during the capture phase instead:</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;outer&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inner&quot;</span>&gt;</span>Click Me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// This runs during the CAPTURE phase (document → target)</span>\nouter.<span class=\"hljs-title function_\">addEventListener</span>(\n  <span class=\"hljs-string\">&quot;click&quot;</span>,\n  <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Outer div clicked (capture)&quot;</span>)\n  },\n  { <span class=\"hljs-attr\">capture</span>: <span class=\"hljs-literal\">true</span> }\n)\n\n<span class=\"hljs-comment\">// This runs during the BUBBLE phase (target → document)</span>\ninner.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Button clicked (bubble)&quot;</span>)\n})\n\n<span class=\"hljs-comment\">// When clicking the button, you&#x27;ll see:</span>\n<span class=\"hljs-comment\">// &quot;Outer div clicked (capture)&quot;</span>\n<span class=\"hljs-comment\">// &quot;Button clicked (bubble)&quot;</span>\n</code></pre><h3>When To Use Each Phase</h3>\n<p>By default you should use the bubble phase for most event listeners, but the capture phase can be useful if you want to stop an event before it reaches the target element.</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;outer&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inner&quot;</span>&gt;</span>Click Me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button>outer.<span class=\"hljs-title function_\">addEventListener</span>(\n  <span class=\"hljs-string\">&quot;click&quot;</span>,\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n    e.<span class=\"hljs-title function_\">stopPropagation</span>() <span class=\"hljs-comment\">// Stop the event from reaching the target</span>\n  },\n  { <span class=\"hljs-attr\">capture</span>: <span class=\"hljs-literal\">true</span> }\n)\n\ninner.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;This never runs!&quot;</span>)\n})\n</code></pre><h3>Not All Events Can Be Delegated</h3>\n<p>Pretty much all events go through the normal bubble/capture phases, but some events don&#39;t bubble up. <code>focus</code> and <code>blur</code> are the most common events that do not bubble.</p>\n","markdown":"\n# Event Delegation\n\nEvent delegation is a JavaScript feature that passes events from child elements to a parent element, allowing you to handle events more efficiently and work with dynamically added elements.\n\n## Understanding Event Flow\n\nBefore we dive into event delegation, we need to understand how events flow through the DOM. When you click on an element, you're actually clicking on multiple elements at once!\n\n```html\n<html>\n  <body>\n    <div class=\"container\">\n      <button>Click Me</button>\n    </div>\n  </body>\n</html>\n```\n\nWhen you click the button, you're also clicking on:\n\n- The `div` container (the button is inside it)\n- The `body` element (the div is inside it)\n- The `html` element (the body is inside it)\n- The `document` (everything is inside it)\n\n### Event Flow Phases\n\nEvents flow through the DOM in three phases:\n\n- **Phase 1 - Capture**: The event travels from the document down to the target element\n- **Phase 2 - Target**: The event reaches the actual target element\n- **Phase 3 - Bubble**: The event travels back up from the target to the document\n\n## Seeing Event Bubbling in Action\n\nBy default events trigger in the bubble phase, meaning they start at the target element and bubble up to its ancestors.\n\n```html\n<div id=\"outer\">\n  <div id=\"middle\">\n    <button id=\"inner\">Click Me</button>\n  </div>\n</div>\n```\n\n```javascript\nconst outer = document.querySelector(\"#outer\")\nconst middle = document.querySelector(\"#middle\")\nconst inner = document.querySelector(\"#inner\")\n\nouter.addEventListener(\"click\", () => {\n  console.log(\"Outer div clicked\")\n})\n\nmiddle.addEventListener(\"click\", () => {\n  console.log(\"Middle div clicked\")\n})\n\ninner.addEventListener(\"click\", () => {\n  console.log(\"Button clicked\")\n})\n\n// When you click the button, you'll see:\n// \"Button clicked\"\n// \"Middle div clicked\"\n// \"Outer div clicked\"\n```\n\nThe event starts at the button (target) and bubbles up through its ancestors.\n\n## Controlling Event Flow\n\nYou may not want this default bubbling behavior, so there are a few ways to control it:\n\n### Stopping Event Propagation - `stopPropagation`\n\nYou can stop an event from propagating to other elements by calling `stopPropagation()` on the event object:\n\n```html\n<div id=\"outer\">\n  <div id=\"middle\">\n    <button id=\"inner\">Click Me</button>\n  </div>\n</div>\n```\n\n```javascript\ninner.addEventListener(\"click\", (e) => {\n  console.log(\"Button clicked\")\n  e.stopPropagation() // Stop the event here!\n})\n\nmiddle.addEventListener(\"click\", () => {\n  console.log(\"This won't run!\")\n})\n\nouter.addEventListener(\"click\", () => {\n  console.log(\"This won't run either!\")\n})\n\n// When you click the button, you'll see:\n// \"Button clicked\"\n```\n\n### Capture Phase Event Listeners\n\nBy default, event listeners run during the bubble phase, but you can make them run during the capture phase instead:\n\n```html\n<div id=\"outer\">\n  <button id=\"inner\">Click Me</button>\n</div>\n```\n\n```javascript\n// This runs during the CAPTURE phase (document → target)\nouter.addEventListener(\n  \"click\",\n  () => {\n    console.log(\"Outer div clicked (capture)\")\n  },\n  { capture: true }\n)\n\n// This runs during the BUBBLE phase (target → document)\ninner.addEventListener(\"click\", () => {\n  console.log(\"Button clicked (bubble)\")\n})\n\n// When clicking the button, you'll see:\n// \"Outer div clicked (capture)\"\n// \"Button clicked (bubble)\"\n```\n\n### When To Use Each Phase\n\nBy default you should use the bubble phase for most event listeners, but the capture phase can be useful if you want to stop an event before it reaches the target element.\n\n```html\n<div id=\"outer\">\n  <button id=\"inner\">Click Me</button>\n</div>\n```\n\n```javascript\nouter.addEventListener(\n  \"click\",\n  (e) => {\n    e.stopPropagation() // Stop the event from reaching the target\n  },\n  { capture: true }\n)\n\ninner.addEventListener(\"click\", () => {\n  console.log(\"This never runs!\")\n})\n```\n\n### Not All Events Can Be Delegated\n\nPretty much all events go through the normal bubble/capture phases, but some events don't bubble up. `focus` and `blur` are the most common events that do not bubble.\n","slug":"event-delegation","title":"Event Delegation","section":"DOM","icon":"sitemap","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/09-dom/D-event-delegation.md","nextSlug":"/fem-getting-started-with-javascript/lessons/dom/dom-traversal","prevSlug":"/fem-getting-started-with-javascript/lessons/dom/event-listeners"}},"__N_SSG":true}