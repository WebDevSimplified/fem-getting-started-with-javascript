{"pageProps":{"post":{"attributes":{"description":"Learn how to make your web pages interactive by adding event listeners to respond to user actions like clicks, form submissions, and more."},"html":"<h1>Event Listeners</h1>\n<p>Event listeners are what make web pages interactive. They allow you to respond to user actions like clicks, keyboard input, form submissions, and much more.</p>\n<h2>What Are Events?</h2>\n<p>Events are things that happen in the browser - a user clicks a button, types in an input field, submits a form, resizes the window, etc. Event listeners are functions that &quot;listen&quot; for these events and run code when they occur.</p>\n<h2>Basic Event Listener Syntax</h2>\n<p>To add an event listener to an element, use the <code>addEventListener</code> method:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;button&quot;</span>)\nbutton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Button was clicked!&quot;</span>)\n})\n</code></pre><p>The <code>addEventListener</code> method takes two main arguments:</p>\n<ul>\n<li><strong>eventType</strong>: A string representing the type of event (e.g., &quot;click&quot;, &quot;input&quot;, &quot;submit&quot;)</li>\n<li><strong>function</strong>: The function to run when the event occurs</li>\n</ul>\n<h2>Adding Event Listeners to Elements</h2>\n<p>You can add event listeners to any DOM element:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> input = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;input&quot;</span>)\ninput.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;input&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Input value:&quot;</span>, e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>)\n})\n\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Document was clicked&quot;</span>)\n})\n\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;resize&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Window resized to:&quot;</span>, <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerWidth</span>, <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerHeight</span>)\n})\n</code></pre><h3>Multiple Event Listeners</h3>\n<p>You can add multiple event listeners to the same element:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;[data-button]&quot;</span>)\n\nbutton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;First listener&quot;</span>)\n})\n\nbutton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Second listener&quot;</span>)\n})\n\n<span class=\"hljs-comment\">// When clicked, both will run:</span>\n<span class=\"hljs-comment\">// &quot;First listener&quot;</span>\n<span class=\"hljs-comment\">// &quot;Second listener&quot;</span>\n</code></pre><p>Event listeners never overwrite each other and always run in the order they were added to the element.</p>\n<h2>Removing Event Listeners</h2>\n<p>To remove an event listener, you need a reference to the exact same function:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ✅ This works - named function</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleClick</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Clicked!&quot;</span>)\n}\n\n<span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;button&quot;</span>)\n\n<span class=\"hljs-comment\">// Add the listener</span>\nbutton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, handleClick)\n\n<span class=\"hljs-comment\">// Remove the listener</span>\nbutton.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, handleClick)\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ This doesn&#x27;t work - different function objects</span>\nbutton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Clicked!&quot;</span>)\n})\n\n<span class=\"hljs-comment\">// This creates a NEW function, so it won&#x27;t remove the first one</span>\nbutton.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Clicked!&quot;</span>)\n})\n</code></pre><h2>The Event Object</h2>\n<p>Event listener functions automatically receive an <strong>event object</strong> that contains information about the event:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button>button.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(event) <span class=\"hljs-comment\">// MouseEvent object with lots of info</span>\n})\n</code></pre><h3>Common Event Object Properties</h3>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button>button.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// The element that triggered the event</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e.<span class=\"hljs-property\">target</span>) <span class=\"hljs-comment\">// The button element</span>\n\n  <span class=\"hljs-comment\">// The element the listener is attached to</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e.<span class=\"hljs-property\">currentTarget</span>) <span class=\"hljs-comment\">// The button element</span>\n\n  <span class=\"hljs-comment\">// Mouse position (for mouse events)</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e.<span class=\"hljs-property\">clientX</span>, e.<span class=\"hljs-property\">clientY</span>) <span class=\"hljs-comment\">// X and Y coordinates</span>\n\n  <span class=\"hljs-comment\">// Modifier keys</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e.<span class=\"hljs-property\">ctrlKey</span>) <span class=\"hljs-comment\">// true if Ctrl was held</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e.<span class=\"hljs-property\">shiftKey</span>) <span class=\"hljs-comment\">// true if Shift was held</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e.<span class=\"hljs-property\">altKey</span>) <span class=\"hljs-comment\">// true if Alt was held</span>\n})\n</code></pre><h3><code>target</code> vs <code>currentTarget</code></h3>\n<ul>\n<li><strong><code>target</code></strong> - The actual element that triggered the event (could be a child element)</li>\n<li><strong><code>currentTarget</code></strong> - The element the event listener is attached to</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e.<span class=\"hljs-property\">target</span>) <span class=\"hljs-comment\">// The specific element clicked</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e.<span class=\"hljs-property\">currentTarget</span>) <span class=\"hljs-comment\">// Always the document</span>\n})\n</code></pre><p>Generally, <code>currentTarget</code> is what you want when working inside an event listener since it refers to the element you added the listener to.</p>\n<h2>Common Event Types</h2>\n<p>Memorizing <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events\">all event types</a> is impossible, but here are some of the most commonly used ones:</p>\n<h3>Mouse Events</h3>\n<ul>\n<li><code>click</code> - When an element is clicked</li>\n<li><code>dblclick</code> - When an element is double-clicked</li>\n<li><code>mouseenter</code> - When the mouse enters an element</li>\n<li><code>mouseleave</code> - When the mouse leaves an element</li>\n<li><code>mouseover</code> - When the mouse moves over an element (fires continuously)</li>\n</ul>\n<h3>Focus Events</h3>\n<ul>\n<li><code>focus</code> - When an element (like an input) receives focus</li>\n<li><code>blur</code> - When an element loses focus</li>\n</ul>\n<h3>Input Events</h3>\n<ul>\n<li><code>input</code> - Fires every time the value of an input changes (typing, pasting, etc.)</li>\n<li><code>change</code> - Fires when the input loses focus and its value has changed</li>\n</ul>\n<h3>Window Events</h3>\n<ul>\n<li><code>resize</code> - When the window is resized</li>\n</ul>\n<p>You can add any event listener to the <code>window</code> object, but the only one you will commonly use is <code>resize</code> since it doesn&#39;t work on any other element.</p>\n<h2>Preventing default behavior - <code>preventDefault</code></h2>\n<p>Many events have default browser behavior associated with them. For example, clicking a link navigates to a new page, submitting a form redirects you to the form action, etc.</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Username&quot;</span> <span class=\"hljs-attr\">required</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> form = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;form&quot;</span>)\n\nform.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;submit&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// Prevent the default form submission behavior</span>\n  e.<span class=\"hljs-title function_\">preventDefault</span>()\n\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Form submitted!&quot;</span>)\n\n  <span class=\"hljs-comment\">// Now you can handle the form data yourself</span>\n  <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormData</span>(e.<span class=\"hljs-property\">currentTarget</span>)\n  <span class=\"hljs-keyword\">const</span> username = formData.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;username&quot;</span>)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Username:&quot;</span>, username)\n})\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Prevent links from navigating</span>\n<span class=\"hljs-keyword\">const</span> link = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;a&quot;</span>)\nlink.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n  e.<span class=\"hljs-title function_\">preventDefault</span>()\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Link clicked but navigation prevented&quot;</span>)\n})\n\n<span class=\"hljs-comment\">// Prevent context menu (right-click menu)</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;contextmenu&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n  e.<span class=\"hljs-title function_\">preventDefault</span>()\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Right-click menu prevented&quot;</span>)\n})\n</code></pre><h2>Common Mistakes</h2>\n<ol>\n<li><p>Accidentally Calling the Function</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleClick</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Button clicked&quot;</span>)\n}\n\n<span class=\"hljs-comment\">// ❌ Wrong - calling the function immediately</span>\nbutton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-title function_\">handleClick</span>())\n\n<span class=\"hljs-comment\">// ✅ Correct - passing the function reference</span>\nbutton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, handleClick)\n</code></pre></li>\n<li><p>Using <code>target</code> instead of <code>currentTarget</code></p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>Click Me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button>button.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// ❌ Wrong - target is most likely the &lt;span&gt; element</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e.<span class=\"hljs-property\">target</span>)\n\n  <span class=\"hljs-comment\">// ✅ Correct - currentTarget is always the button</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e.<span class=\"hljs-property\">currentTarget</span>)\n})\n</code></pre></li>\n</ol>\n","markdown":"\n# Event Listeners\n\nEvent listeners are what make web pages interactive. They allow you to respond to user actions like clicks, keyboard input, form submissions, and much more.\n\n## What Are Events?\n\nEvents are things that happen in the browser - a user clicks a button, types in an input field, submits a form, resizes the window, etc. Event listeners are functions that \"listen\" for these events and run code when they occur.\n\n## Basic Event Listener Syntax\n\nTo add an event listener to an element, use the `addEventListener` method:\n\n```javascript\nconst button = document.querySelector(\"button\")\nbutton.addEventListener(\"click\", () => {\n  console.log(\"Button was clicked!\")\n})\n```\n\nThe `addEventListener` method takes two main arguments:\n\n- **eventType**: A string representing the type of event (e.g., \"click\", \"input\", \"submit\")\n- **function**: The function to run when the event occurs\n\n## Adding Event Listeners to Elements\n\nYou can add event listeners to any DOM element:\n\n```javascript\nconst input = document.querySelector(\"input\")\ninput.addEventListener(\"input\", (e) => {\n  console.log(\"Input value:\", e.target.value)\n})\n\ndocument.addEventListener(\"click\", () => {\n  console.log(\"Document was clicked\")\n})\n\nwindow.addEventListener(\"resize\", () => {\n  console.log(\"Window resized to:\", window.innerWidth, window.innerHeight)\n})\n```\n\n### Multiple Event Listeners\n\nYou can add multiple event listeners to the same element:\n\n```javascript\nconst button = document.querySelector(\"[data-button]\")\n\nbutton.addEventListener(\"click\", () => {\n  console.log(\"First listener\")\n})\n\nbutton.addEventListener(\"click\", () => {\n  console.log(\"Second listener\")\n})\n\n// When clicked, both will run:\n// \"First listener\"\n// \"Second listener\"\n```\n\nEvent listeners never overwrite each other and always run in the order they were added to the element.\n\n## Removing Event Listeners\n\nTo remove an event listener, you need a reference to the exact same function:\n\n```javascript\n// ✅ This works - named function\nfunction handleClick() {\n  console.log(\"Clicked!\")\n}\n\nconst button = document.querySelector(\"button\")\n\n// Add the listener\nbutton.addEventListener(\"click\", handleClick)\n\n// Remove the listener\nbutton.removeEventListener(\"click\", handleClick)\n```\n\n```javascript\n// ❌ This doesn't work - different function objects\nbutton.addEventListener(\"click\", () => {\n  console.log(\"Clicked!\")\n})\n\n// This creates a NEW function, so it won't remove the first one\nbutton.removeEventListener(\"click\", () => {\n  console.log(\"Clicked!\")\n})\n```\n\n## The Event Object\n\nEvent listener functions automatically receive an **event object** that contains information about the event:\n\n```javascript\nbutton.addEventListener(\"click\", (event) => {\n  console.log(event) // MouseEvent object with lots of info\n})\n```\n\n### Common Event Object Properties\n\n```javascript\nbutton.addEventListener(\"click\", (e) => {\n  // The element that triggered the event\n  console.log(e.target) // The button element\n\n  // The element the listener is attached to\n  console.log(e.currentTarget) // The button element\n\n  // Mouse position (for mouse events)\n  console.log(e.clientX, e.clientY) // X and Y coordinates\n\n  // Modifier keys\n  console.log(e.ctrlKey) // true if Ctrl was held\n  console.log(e.shiftKey) // true if Shift was held\n  console.log(e.altKey) // true if Alt was held\n})\n```\n\n### `target` vs `currentTarget`\n\n- **`target`** - The actual element that triggered the event (could be a child element)\n- **`currentTarget`** - The element the event listener is attached to\n\n```javascript\ndocument.addEventListener(\"click\", (e) => {\n  console.log(e.target) // The specific element clicked\n  console.log(e.currentTarget) // Always the document\n})\n```\n\nGenerally, `currentTarget` is what you want when working inside an event listener since it refers to the element you added the listener to.\n\n## Common Event Types\n\nMemorizing [all event types](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events) is impossible, but here are some of the most commonly used ones:\n\n### Mouse Events\n\n- `click` - When an element is clicked\n- `dblclick` - When an element is double-clicked\n- `mouseenter` - When the mouse enters an element\n- `mouseleave` - When the mouse leaves an element\n- `mouseover` - When the mouse moves over an element (fires continuously)\n\n### Focus Events\n\n- `focus` - When an element (like an input) receives focus\n- `blur` - When an element loses focus\n\n### Input Events\n\n- `input` - Fires every time the value of an input changes (typing, pasting, etc.)\n- `change` - Fires when the input loses focus and its value has changed\n\n### Window Events\n\n- `resize` - When the window is resized\n\nYou can add any event listener to the `window` object, but the only one you will commonly use is `resize` since it doesn't work on any other element.\n\n## Preventing default behavior - `preventDefault`\n\nMany events have default browser behavior associated with them. For example, clicking a link navigates to a new page, submitting a form redirects you to the form action, etc.\n\n```html\n<form>\n  <input type=\"text\" name=\"username\" placeholder=\"Username\" required />\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n```javascript\nconst form = document.querySelector(\"form\")\n\nform.addEventListener(\"submit\", (e) => {\n  // Prevent the default form submission behavior\n  e.preventDefault()\n\n  console.log(\"Form submitted!\")\n\n  // Now you can handle the form data yourself\n  const formData = new FormData(e.currentTarget)\n  const username = formData.get(\"username\")\n  console.log(\"Username:\", username)\n})\n```\n\n```javascript\n// Prevent links from navigating\nconst link = document.querySelector(\"a\")\nlink.addEventListener(\"click\", (e) => {\n  e.preventDefault()\n  console.log(\"Link clicked but navigation prevented\")\n})\n\n// Prevent context menu (right-click menu)\ndocument.addEventListener(\"contextmenu\", (e) => {\n  e.preventDefault()\n  console.log(\"Right-click menu prevented\")\n})\n```\n\n## Common Mistakes\n\n1. Accidentally Calling the Function\n\n   ```javascript\n   function handleClick() {\n     console.log(\"Button clicked\")\n   }\n\n   // ❌ Wrong - calling the function immediately\n   button.addEventListener(\"click\", handleClick())\n\n   // ✅ Correct - passing the function reference\n   button.addEventListener(\"click\", handleClick)\n   ```\n\n2. Using `target` instead of `currentTarget`\n\n   ```html\n   <button>\n     <span>Click Me</span>\n   </button>\n   ```\n\n   ```javascript\n   button.addEventListener(\"click\", (e) => {\n     // ❌ Wrong - target is most likely the <span> element\n     console.log(e.target)\n\n     // ✅ Correct - currentTarget is always the button\n     console.log(e.currentTarget)\n   })\n   ```\n","slug":"event-listeners","title":"Event Listeners","section":"DOM","icon":"sitemap","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/09-dom/C-event-listeners.md","nextSlug":"/fem-getting-started-with-javascript/lessons/dom/event-delegation","prevSlug":"/fem-getting-started-with-javascript/lessons/dom/selecting-elements"}},"__N_SSG":true}