{"pageProps":{"post":{"attributes":{"description":"Learn different ways to select HTML elements in JavaScript, including getElementById, getElementsByClassName, and the powerful querySelector methods."},"html":"<h1>Selecting Elements</h1>\n<p>One of the most fundamental skills in web development is selecting HTML elements so you can interact with them using JavaScript. There are several methods available, each with their own strengths and use cases.</p>\n<h2>Method 1: <code>getElementById</code></h2>\n<p>The <code>getElementById</code> method selects a single element based on its ID attribute.</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span>This is a header<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> header = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;header&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(header) <span class=\"hljs-comment\">// &lt;div id=&quot;header&quot;&gt;This is a header&lt;/div&gt;</span>\n\n<span class=\"hljs-comment\">// Change the text color</span>\nheader.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">color</span> = <span class=\"hljs-string\">&quot;blue&quot;</span>\n</code></pre><h3>Key Points about getElementById:</h3>\n<ul>\n<li>Returns a <strong>single element</strong> (or <code>null</code> if not found)</li>\n<li>IDs should be unique on a page</li>\n<li>You only pass the ID name, not <code>#header</code></li>\n<li>Fast and efficient</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ Wrong - don&#x27;t include the #</span>\n<span class=\"hljs-keyword\">const</span> wrong = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;#header&quot;</span>)\n\n<span class=\"hljs-comment\">// ✅ Correct - just the ID name</span>\n<span class=\"hljs-keyword\">const</span> correct = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;header&quot;</span>)\n</code></pre><h2>Method 2: <code>getElementsByClassName</code></h2>\n<p>The <code>getElementsByClassName</code> method selects multiple elements based on their class name.</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span>&gt;</span>First content div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span>&gt;</span>Second content div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span>&gt;</span>Third content div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> contentDivs = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByClassName</span>(<span class=\"hljs-string\">&quot;content&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(contentDivs) <span class=\"hljs-comment\">// HTMLCollection with 3 elements</span>\n\n<span class=\"hljs-comment\">// This is an HTMLCollection, not an array!</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(contentDivs.<span class=\"hljs-property\">length</span>) <span class=\"hljs-comment\">// 3</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(contentDivs[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-comment\">// First content div</span>\n</code></pre><h3>Working with HTMLCollections</h3>\n<p>HTMLCollections look like arrays but don&#39;t have all array methods:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> contentDivs = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByClassName</span>(<span class=\"hljs-string\">&quot;content&quot;</span>)\n\n<span class=\"hljs-comment\">// ❌ This won&#x27;t work - HTMLCollection doesn&#x27;t have forEach</span>\n<span class=\"hljs-comment\">// contentDivs.forEach(div =&gt; console.log(div))</span>\n\n<span class=\"hljs-comment\">// ✅ Convert to array first</span>\n<span class=\"hljs-keyword\">const</span> contentArray = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(contentDivs)\ncontentArray.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">div</span>) =&gt;</span> {\n  div.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">color</span> = <span class=\"hljs-string\">&quot;green&quot;</span>\n})\n\n<span class=\"hljs-comment\">// ✅ Or use a regular for loop</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; contentDivs.<span class=\"hljs-property\">length</span>; i++) {\n  contentDivs[i].<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = <span class=\"hljs-string\">&quot;lightgray&quot;</span>\n}\n\n<span class=\"hljs-comment\">// ✅ Or access individual elements by index</span>\ncontentDivs[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">fontWeight</span> = <span class=\"hljs-string\">&quot;bold&quot;</span>\n</code></pre><h2>Method 3: <code>querySelector</code> (Recommended)</h2>\n<p>The <code>querySelector</code> method uses CSS selectors to find elements. It returns the <strong>first</strong> matching element.</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span>This is a header<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span>&gt;</span>First content div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span>&gt;</span>Second content div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">data-action</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Select by ID (same as getElementById)</span>\n<span class=\"hljs-keyword\">const</span> header = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#header&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(header) <span class=\"hljs-comment\">// &lt;div id=&quot;header&quot;&gt;This is a header&lt;/div&gt;</span>\n\n<span class=\"hljs-comment\">// Select by class (gets first element with that class)</span>\n<span class=\"hljs-keyword\">const</span> firstContent = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;.content&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(firstContent) <span class=\"hljs-comment\">// &lt;div class=&quot;content&quot;&gt;First content div&lt;/div&gt;</span>\n\n<span class=\"hljs-comment\">// Select by tag name</span>\n<span class=\"hljs-keyword\">const</span> firstDiv = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;div&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(firstDiv) <span class=\"hljs-comment\">// &lt;div id=&quot;header&quot;&gt;This is a header&lt;/div&gt;</span>\n\n<span class=\"hljs-comment\">// Select by attribute</span>\n<span class=\"hljs-keyword\">const</span> submitButton = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;[data-action=&quot;submit&quot;]&#x27;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(submitButton) <span class=\"hljs-comment\">// &lt;button data-action=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span>\n</code></pre><h2>Method 4: <code>querySelectorAll</code> (Recommended)</h2>\n<p>The <code>querySelectorAll</code> method returns <strong>all</strong> matching elements as a NodeList.</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span>This is a header<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span>&gt;</span>First content div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span>&gt;</span>Second content div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span>&gt;</span>Third content div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Enter username&quot;</span> /&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Get all elements with class &quot;content&quot;</span>\n<span class=\"hljs-keyword\">const</span> allContent = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">&quot;.content&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(allContent) <span class=\"hljs-comment\">// NodeList with 3 elements</span>\n\n<span class=\"hljs-comment\">// Get all divs</span>\n<span class=\"hljs-keyword\">const</span> allDivs = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">&quot;div&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(allDivs) <span class=\"hljs-comment\">// NodeList with 4 elements</span>\n\n<span class=\"hljs-comment\">// Get all inputs</span>\n<span class=\"hljs-keyword\">const</span> allInputs = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">&quot;input&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(allInputs) <span class=\"hljs-comment\">// NodeList with 1 element</span>\n</code></pre><h3>Working with NodeLists</h3>\n<p>NodeLists look like arrays (similar to HTMLCollections) but lack some array methods. However, they do have <code>forEach</code>:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ✅ This works - NodeList has forEach</span>\n<span class=\"hljs-keyword\">const</span> allContent = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">&quot;.content&quot;</span>)\n\nallContent.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">div</span>) =&gt;</span> {\n  div.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">padding</span> = <span class=\"hljs-string\">&quot;10px&quot;</span>\n})\n</code></pre><h2>Live vs Static Collections</h2>\n<p>The biggest difference between the <code>querySelectorAll</code> and <code>getElementsByClassName</code> methods is that <code>getElementsByClassName</code> returns a <strong>live</strong> HTMLCollection, while <code>querySelectorAll</code> returns a <strong>static</strong> NodeList.</p>\n<p>This means that if the DOM changes after you select elements with <code>getElementsByClassName</code>, the HTMLCollection will automatically update to reflect those changes. In contrast, a NodeList from <code>querySelectorAll</code> will not change unless you call <code>querySelectorAll</code> again.</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span>&gt;</span>First content div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span>&gt;</span>Second content div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span>&gt;</span>Third content div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Using getElementsByClassName (live)</span>\n<span class=\"hljs-keyword\">const</span> liveCollection = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByClassName</span>(<span class=\"hljs-string\">&quot;content&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liveCollection.<span class=\"hljs-property\">length</span>) <span class=\"hljs-comment\">// 3</span>\n\n<span class=\"hljs-comment\">// Add a new content div</span>\n<span class=\"hljs-keyword\">const</span> newDiv = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;div&quot;</span>)\nnewDiv.<span class=\"hljs-property\">className</span> = <span class=\"hljs-string\">&quot;content&quot;</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(newDiv)\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(liveCollection.<span class=\"hljs-property\">length</span>) <span class=\"hljs-comment\">// 4 (updates automatically)</span>\n</code></pre><pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Using querySelectorAll (static)</span>\n<span class=\"hljs-keyword\">const</span> staticNodeList = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">&quot;.content&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(staticNodeList.<span class=\"hljs-property\">length</span>) <span class=\"hljs-comment\">// 3</span>\n\n<span class=\"hljs-comment\">// Add a new content div</span>\n<span class=\"hljs-keyword\">const</span> newDiv = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;div&quot;</span>)\nnewDiv.<span class=\"hljs-property\">className</span> = <span class=\"hljs-string\">&quot;content&quot;</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(newDiv)\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(staticNodeList.<span class=\"hljs-property\">length</span>) <span class=\"hljs-comment\">// 3 (remains the same)</span>\n</code></pre><p>In almost all cases a live collection is not wanted since it makes your code more difficult to understand and less predictable.</p>\n<h2>When to Use Each Method</h2>\n<p>By default you should prefer <code>querySelector</code> and <code>querySelectorAll</code> for pretty much everything. They are more flexible, use familiar CSS selector syntax, and return a static NodeList.</p>\n<p>You can use <code>getElementById</code> when you need to select a single element by ID and want the absolute best performance since it is marginally faster than <code>querySelector</code>.</p>\n<h2>Using Advanced CSS Selectors</h2>\n<p><code>querySelector</code>/<code>querySelectorAll</code> accept any valid CSS selector:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Attribute selectors</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;input[name=&quot;username&quot;]&#x27;</span>)\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;img[alt*=&quot;logo&quot;]&#x27;</span>)\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">&#x27;a[href^=&quot;https://&quot;]&#x27;</span>)\n\n<span class=\"hljs-comment\">// Pseudo-selectors</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;li:first-child&quot;</span>)\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;tr:nth-child(even)&quot;</span>)\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;input:checked&quot;</span>)\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;div:not(.hidden)&quot;</span>)\n\n<span class=\"hljs-comment\">// Combinators</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;nav &gt; ul &gt; li&quot;</span>) <span class=\"hljs-comment\">// Direct child</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;h2 + p&quot;</span>) <span class=\"hljs-comment\">// Adjacent sibling</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;article p&quot;</span>) <span class=\"hljs-comment\">// Descendant</span>\n\n<span class=\"hljs-comment\">// Multiple selectors</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;button, input[type=&#x27;submit&#x27;]&quot;</span>) <span class=\"hljs-comment\">// Either one</span>\n</code></pre><h2>Exercise</h2>\n<p>Given this HTML, write JavaScript to:</p>\n<ol>\n<li>Change the header text to &quot;Welcome!&quot;</li>\n<li>Make all paragraphs blue</li>\n<li>Hide the last paragraph</li>\n<li>Add a border to inputs with the &quot;required&quot; class</li>\n</ol>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;main-header&quot;</span>&gt;</span>Original Header<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span>First paragraph<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span>Second paragraph<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span>Third paragraph<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;required&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Name&quot;</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;required&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Email&quot;</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;tel&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Phone&quot;</span> /&gt;</span>\n</code></pre><ul>\n<li>You can use <code>style.property</code> to change CSS styles, e.g. <code>element.style.color = &quot;red&quot;</code>.</li>\n<li>You can use <code>textContent</code> to change text, e.g. <code>element.textContent = &quot;New Text&quot;</code>.</li>\n</ul>\n<details>\n<summary>Solution</summary>\n\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// 1. Change header text</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#main-header&quot;</span>).<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">&quot;Welcome!&quot;</span>\n\n<span class=\"hljs-comment\">// 2. Make all paragraphs blue</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">&quot;p&quot;</span>).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">p</span>) =&gt;</span> {\n  p.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">color</span> = <span class=\"hljs-string\">&quot;blue&quot;</span>\n})\n\n<span class=\"hljs-comment\">// 3. Hide the last paragraph</span>\n<span class=\"hljs-keyword\">const</span> lastParagraph = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;p:last-child&quot;</span>)\nlastParagraph.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">display</span> = <span class=\"hljs-string\">&quot;none&quot;</span>\n\n<span class=\"hljs-comment\">// 4. Add border to required inputs</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">&quot;input.required&quot;</span>).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">input</span>) =&gt;</span> {\n  input.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">border</span> = <span class=\"hljs-string\">&quot;2px solid red&quot;</span>\n})\n</code></pre></details>\n","markdown":"\n# Selecting Elements\n\nOne of the most fundamental skills in web development is selecting HTML elements so you can interact with them using JavaScript. There are several methods available, each with their own strengths and use cases.\n\n## Method 1: `getElementById`\n\nThe `getElementById` method selects a single element based on its ID attribute.\n\n```html\n<div id=\"header\">This is a header</div>\n```\n\n```javascript\nconst header = document.getElementById(\"header\")\nconsole.log(header) // <div id=\"header\">This is a header</div>\n\n// Change the text color\nheader.style.color = \"blue\"\n```\n\n### Key Points about getElementById:\n\n- Returns a **single element** (or `null` if not found)\n- IDs should be unique on a page\n- You only pass the ID name, not `#header`\n- Fast and efficient\n\n```javascript\n// ❌ Wrong - don't include the #\nconst wrong = document.getElementById(\"#header\")\n\n// ✅ Correct - just the ID name\nconst correct = document.getElementById(\"header\")\n```\n\n## Method 2: `getElementsByClassName`\n\nThe `getElementsByClassName` method selects multiple elements based on their class name.\n\n```html\n<div class=\"content\">First content div</div>\n<div class=\"content\">Second content div</div>\n<div class=\"content\">Third content div</div>\n```\n\n```javascript\nconst contentDivs = document.getElementsByClassName(\"content\")\nconsole.log(contentDivs) // HTMLCollection with 3 elements\n\n// This is an HTMLCollection, not an array!\nconsole.log(contentDivs.length) // 3\nconsole.log(contentDivs[0]) // First content div\n```\n\n### Working with HTMLCollections\n\nHTMLCollections look like arrays but don't have all array methods:\n\n```javascript\nconst contentDivs = document.getElementsByClassName(\"content\")\n\n// ❌ This won't work - HTMLCollection doesn't have forEach\n// contentDivs.forEach(div => console.log(div))\n\n// ✅ Convert to array first\nconst contentArray = Array.from(contentDivs)\ncontentArray.forEach((div) => {\n  div.style.color = \"green\"\n})\n\n// ✅ Or use a regular for loop\nfor (let i = 0; i < contentDivs.length; i++) {\n  contentDivs[i].style.backgroundColor = \"lightgray\"\n}\n\n// ✅ Or access individual elements by index\ncontentDivs[0].style.fontWeight = \"bold\"\n```\n\n## Method 3: `querySelector` (Recommended)\n\nThe `querySelector` method uses CSS selectors to find elements. It returns the **first** matching element.\n\n```html\n<div id=\"header\">This is a header</div>\n<div class=\"content\">First content div</div>\n<div class=\"content\">Second content div</div>\n<button data-action=\"submit\">Submit</button>\n```\n\n```javascript\n// Select by ID (same as getElementById)\nconst header = document.querySelector(\"#header\")\nconsole.log(header) // <div id=\"header\">This is a header</div>\n\n// Select by class (gets first element with that class)\nconst firstContent = document.querySelector(\".content\")\nconsole.log(firstContent) // <div class=\"content\">First content div</div>\n\n// Select by tag name\nconst firstDiv = document.querySelector(\"div\")\nconsole.log(firstDiv) // <div id=\"header\">This is a header</div>\n\n// Select by attribute\nconst submitButton = document.querySelector('[data-action=\"submit\"]')\nconsole.log(submitButton) // <button data-action=\"submit\">Submit</button>\n```\n\n## Method 4: `querySelectorAll` (Recommended)\n\nThe `querySelectorAll` method returns **all** matching elements as a NodeList.\n\n```html\n<div id=\"header\">This is a header</div>\n<div class=\"content\">First content div</div>\n<div class=\"content\">Second content div</div>\n<div class=\"content\">Third content div</div>\n<input type=\"text\" name=\"username\" placeholder=\"Enter username\" />\n```\n\n```javascript\n// Get all elements with class \"content\"\nconst allContent = document.querySelectorAll(\".content\")\nconsole.log(allContent) // NodeList with 3 elements\n\n// Get all divs\nconst allDivs = document.querySelectorAll(\"div\")\nconsole.log(allDivs) // NodeList with 4 elements\n\n// Get all inputs\nconst allInputs = document.querySelectorAll(\"input\")\nconsole.log(allInputs) // NodeList with 1 element\n```\n\n### Working with NodeLists\n\nNodeLists look like arrays (similar to HTMLCollections) but lack some array methods. However, they do have `forEach`:\n\n```javascript\n// ✅ This works - NodeList has forEach\nconst allContent = document.querySelectorAll(\".content\")\n\nallContent.forEach((div) => {\n  div.style.padding = \"10px\"\n})\n```\n\n## Live vs Static Collections\n\nThe biggest difference between the `querySelectorAll` and `getElementsByClassName` methods is that `getElementsByClassName` returns a **live** HTMLCollection, while `querySelectorAll` returns a **static** NodeList.\n\nThis means that if the DOM changes after you select elements with `getElementsByClassName`, the HTMLCollection will automatically update to reflect those changes. In contrast, a NodeList from `querySelectorAll` will not change unless you call `querySelectorAll` again.\n\n```html\n<div class=\"content\">First content div</div>\n<div class=\"content\">Second content div</div>\n<div class=\"content\">Third content div</div>\n```\n\n```javascript\n// Using getElementsByClassName (live)\nconst liveCollection = document.getElementsByClassName(\"content\")\nconsole.log(liveCollection.length) // 3\n\n// Add a new content div\nconst newDiv = document.createElement(\"div\")\nnewDiv.className = \"content\"\ndocument.body.appendChild(newDiv)\n\nconsole.log(liveCollection.length) // 4 (updates automatically)\n```\n\n```javascript\n// Using querySelectorAll (static)\nconst staticNodeList = document.querySelectorAll(\".content\")\nconsole.log(staticNodeList.length) // 3\n\n// Add a new content div\nconst newDiv = document.createElement(\"div\")\nnewDiv.className = \"content\"\ndocument.body.appendChild(newDiv)\n\nconsole.log(staticNodeList.length) // 3 (remains the same)\n```\n\nIn almost all cases a live collection is not wanted since it makes your code more difficult to understand and less predictable.\n\n## When to Use Each Method\n\nBy default you should prefer `querySelector` and `querySelectorAll` for pretty much everything. They are more flexible, use familiar CSS selector syntax, and return a static NodeList.\n\nYou can use `getElementById` when you need to select a single element by ID and want the absolute best performance since it is marginally faster than `querySelector`.\n\n## Using Advanced CSS Selectors\n\n`querySelector`/`querySelectorAll` accept any valid CSS selector:\n\n```javascript\n// Attribute selectors\ndocument.querySelector('input[name=\"username\"]')\ndocument.querySelector('img[alt*=\"logo\"]')\ndocument.querySelectorAll('a[href^=\"https://\"]')\n\n// Pseudo-selectors\ndocument.querySelector(\"li:first-child\")\ndocument.querySelector(\"tr:nth-child(even)\")\ndocument.querySelector(\"input:checked\")\ndocument.querySelector(\"div:not(.hidden)\")\n\n// Combinators\ndocument.querySelector(\"nav > ul > li\") // Direct child\ndocument.querySelector(\"h2 + p\") // Adjacent sibling\ndocument.querySelector(\"article p\") // Descendant\n\n// Multiple selectors\ndocument.querySelector(\"button, input[type='submit']\") // Either one\n```\n\n## Exercise\n\nGiven this HTML, write JavaScript to:\n\n1. Change the header text to \"Welcome!\"\n2. Make all paragraphs blue\n3. Hide the last paragraph\n4. Add a border to inputs with the \"required\" class\n\n```html\n<h1 id=\"main-header\">Original Header</h1>\n<p class=\"text\">First paragraph</p>\n<p class=\"text\">Second paragraph</p>\n<p class=\"text\">Third paragraph</p>\n<input type=\"text\" class=\"required\" placeholder=\"Name\" />\n<input type=\"email\" class=\"required\" placeholder=\"Email\" />\n<input type=\"tel\" placeholder=\"Phone\" />\n```\n\n- You can use `style.property` to change CSS styles, e.g. `element.style.color = \"red\"`.\n- You can use `textContent` to change text, e.g. `element.textContent = \"New Text\"`.\n\n<details>\n<summary>Solution</summary>\n\n```javascript\n// 1. Change header text\ndocument.querySelector(\"#main-header\").textContent = \"Welcome!\"\n\n// 2. Make all paragraphs blue\ndocument.querySelectorAll(\"p\").forEach((p) => {\n  p.style.color = \"blue\"\n})\n\n// 3. Hide the last paragraph\nconst lastParagraph = document.querySelector(\"p:last-child\")\nlastParagraph.style.display = \"none\"\n\n// 4. Add border to required inputs\ndocument.querySelectorAll(\"input.required\").forEach((input) => {\n  input.style.border = \"2px solid red\"\n})\n```\n\n</details>\n","slug":"selecting-elements","title":"Selecting Elements","section":"DOM","icon":"sitemap","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/09-dom/B-selecting-elements.md","nextSlug":"/fem-getting-started-with-javascript/lessons/dom/event-listeners","prevSlug":"/fem-getting-started-with-javascript/lessons/dom/window-and-document"}},"__N_SSG":true}