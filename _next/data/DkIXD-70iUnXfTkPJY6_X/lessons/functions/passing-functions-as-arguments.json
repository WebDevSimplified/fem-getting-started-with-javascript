{"pageProps":{"post":{"attributes":{"description":"Learn how to pass functions to other functions as arguments, including callbacks and anonymous functions."},"html":"<h1>Passing Functions as Arguments</h1>\n<p>One of the most powerful features of JavaScript is the ability to pass functions to other functions as arguments.</p>\n<p>⚠️ <strong>WARNING:</strong> This is a tricky topic, so take your time to understand it fully!</p>\n<h2>Functions are Variables</h2>\n<p>It&#39;s important to understand that <strong>functions are just variables</strong> that contain logic:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">printName</span>(<span class=\"hljs-params\">name</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name)\n}\n\n<span class=\"hljs-comment\">// What happens if we log the function name without parentheses?</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(printName) <span class=\"hljs-comment\">// Prints: ƒ printName(name) { console.log(name) }</span>\n</code></pre><p>When you create a function with the <code>function</code> keyword, JavaScript creates a variable with that name and stores the function definition in it - just like how <code>let</code> creates a variable that stores a value.</p>\n<h2>Basic Function Passing</h2>\n<p>Since functions are variables, you can pass them to other functions:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">printName</span>(<span class=\"hljs-params\">name</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">callFunction</span>(<span class=\"hljs-params\">x</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;before&quot;</span>)\n  <span class=\"hljs-title function_\">x</span>(<span class=\"hljs-string\">&quot;Kyle&quot;</span>) <span class=\"hljs-comment\">// Call the function that was passed in</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;after&quot;</span>)\n}\n\n<span class=\"hljs-comment\">// Pass the function (note: no parentheses!)</span>\n<span class=\"hljs-title function_\">callFunction</span>(printName)\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// before</span>\n<span class=\"hljs-comment\">// Kyle</span>\n<span class=\"hljs-comment\">// after</span>\n</code></pre><h3>Key Point: Function vs Function Call</h3>\n<ul>\n<li><code>printVariable</code> - This is the function itself (the variable)</li>\n<li><code>printVariable()</code> - This calls the function and runs the code inside it</li>\n</ul>\n<h2>Callback Functions</h2>\n<p>When you pass a function to another function, that passed in function is called a <strong>callback</strong>:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sumCallback</span>(<span class=\"hljs-params\">a, b, callback</span>) {\n  <span class=\"hljs-keyword\">let</span> sum = a + b\n  <span class=\"hljs-title function_\">callback</span>(sum) <span class=\"hljs-comment\">// Invoke the callback with the result</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleSum</span>(<span class=\"hljs-params\">sum</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(sum)\n}\n\n<span class=\"hljs-title function_\">sumCallback</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, handleSum) <span class=\"hljs-comment\">// Prints: 3</span>\n</code></pre><p>Here&#39;s what happens step by step:</p>\n<ol>\n<li><code>sumCallback</code> receives <code>1</code>, <code>2</code>, and the <code>handleSum</code> function</li>\n<li>It calculates <code>1 + 2 = 3</code></li>\n<li>It calls the callback function (<code>handleSum</code>) with the result <code>3</code></li>\n<li><code>handleSum</code> prints the <code>sum</code></li>\n</ol>\n<h2>Common Mistake: Calling Instead of Passing</h2>\n<p>A very common mistake is accidentally calling the function instead of passing it:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">printName</span>(<span class=\"hljs-params\">name</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">printGreeting</span>(<span class=\"hljs-params\">name, callback</span>) {\n  <span class=\"hljs-title function_\">callback</span>(<span class=\"hljs-string\">&quot;Hello &quot;</span> + name)\n}\n\n<span class=\"hljs-comment\">// ❌ Wrong - this calls printName immediately</span>\n<span class=\"hljs-title function_\">printGreeting</span>(<span class=\"hljs-string\">&quot;Kyle&quot;</span>, <span class=\"hljs-title function_\">printName</span>())\n<span class=\"hljs-comment\">// Result: undefined gets passed, then error &quot;callback is not a function&quot;</span>\n\n<span class=\"hljs-comment\">// ✅ Correct - this passes the function</span>\n<span class=\"hljs-title function_\">printGreeting</span>(<span class=\"hljs-string\">&quot;Kyle&quot;</span>, printName)\n<span class=\"hljs-comment\">// Result: &quot;Hello Kyle&quot;</span>\n</code></pre><p>When you add parentheses, you&#39;re calling the function and passing its return value (which is <code>undefined</code> if the function doesn&#39;t return anything).</p>\n<h2>Example Use Case</h2>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doMath</span>(<span class=\"hljs-params\">a, b, operation</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">operation</span>(a, b)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">x, y</span>) {\n  <span class=\"hljs-keyword\">return</span> x + y\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">subtract</span>(<span class=\"hljs-params\">x, y</span>) {\n  <span class=\"hljs-keyword\">return</span> x - y\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">doMath</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, add)) <span class=\"hljs-comment\">// Prints: 8</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">doMath</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, subtract)) <span class=\"hljs-comment\">// Prints: 2</span>\n</code></pre><h2>Practice Exercise</h2>\n<p>Try creating a function that:</p>\n<ol>\n<li>Takes three parameters: a <code>firstName</code>, a <code>lastName</code>, and a <code>callback</code> function</li>\n<li>Creates a <code>fullName</code> variable by combining the first and last names</li>\n<li>Passes the <code>fullName</code> to the callback function (which prepends <code>&quot;Hello &quot;</code> to it)</li>\n<li>Prints out the return of the callback function</li>\n</ol>\n<details>\n<summary>Solution</summary>\n\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">printGreeting</span>(<span class=\"hljs-params\">firstName, lastName, callback</span>) {\n  <span class=\"hljs-keyword\">const</span> fullName = firstName + <span class=\"hljs-string\">&quot; &quot;</span> + lastName\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">callback</span>(fullName))\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getGreeting</span>(<span class=\"hljs-params\">name</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Hello &quot;</span> + name\n}\n\n<span class=\"hljs-title function_\">printGreeting</span>(<span class=\"hljs-string\">&quot;Kyle&quot;</span>, <span class=\"hljs-string\">&quot;Cook&quot;</span>, getGreeting) <span class=\"hljs-comment\">// &quot;Hello Kyle Cook&quot;</span>\n</code></pre></details>\n\n<h2>Why Use Callbacks?</h2>\n<ol>\n<li><strong>Flexibility</strong> - The same function can behave differently based on the callback</li>\n<li><strong>Separation of Concerns</strong> - The main function handles one thing, the callback handles another</li>\n</ol>\n","markdown":"\n# Passing Functions as Arguments\n\nOne of the most powerful features of JavaScript is the ability to pass functions to other functions as arguments.\n\n⚠️ **WARNING:** This is a tricky topic, so take your time to understand it fully!\n\n## Functions are Variables\n\nIt's important to understand that **functions are just variables** that contain logic:\n\n```javascript\nfunction printName(name) {\n  console.log(name)\n}\n\n// What happens if we log the function name without parentheses?\nconsole.log(printName) // Prints: ƒ printName(name) { console.log(name) }\n```\n\nWhen you create a function with the `function` keyword, JavaScript creates a variable with that name and stores the function definition in it - just like how `let` creates a variable that stores a value.\n\n## Basic Function Passing\n\nSince functions are variables, you can pass them to other functions:\n\n```javascript\nfunction printName(name) {\n  console.log(name)\n}\n\nfunction callFunction(x) {\n  console.log(\"before\")\n  x(\"Kyle\") // Call the function that was passed in\n  console.log(\"after\")\n}\n\n// Pass the function (note: no parentheses!)\ncallFunction(printName)\n// Output:\n// before\n// Kyle\n// after\n```\n\n### Key Point: Function vs Function Call\n\n- `printVariable` - This is the function itself (the variable)\n- `printVariable()` - This calls the function and runs the code inside it\n\n## Callback Functions\n\nWhen you pass a function to another function, that passed in function is called a **callback**:\n\n```javascript\nfunction sumCallback(a, b, callback) {\n  let sum = a + b\n  callback(sum) // Invoke the callback with the result\n}\n\nfunction handleSum(sum) {\n  console.log(sum)\n}\n\nsumCallback(1, 2, handleSum) // Prints: 3\n```\n\nHere's what happens step by step:\n\n1. `sumCallback` receives `1`, `2`, and the `handleSum` function\n2. It calculates `1 + 2 = 3`\n3. It calls the callback function (`handleSum`) with the result `3`\n4. `handleSum` prints the `sum`\n\n## Common Mistake: Calling Instead of Passing\n\nA very common mistake is accidentally calling the function instead of passing it:\n\n```javascript\nfunction printName(name) {\n  console.log(name)\n}\n\nfunction printGreeting(name, callback) {\n  callback(\"Hello \" + name)\n}\n\n// ❌ Wrong - this calls printName immediately\nprintGreeting(\"Kyle\", printName())\n// Result: undefined gets passed, then error \"callback is not a function\"\n\n// ✅ Correct - this passes the function\nprintGreeting(\"Kyle\", printName)\n// Result: \"Hello Kyle\"\n```\n\nWhen you add parentheses, you're calling the function and passing its return value (which is `undefined` if the function doesn't return anything).\n\n## Example Use Case\n\n```javascript\nfunction doMath(a, b, operation) {\n  return operation(a, b)\n}\n\nfunction add(x, y) {\n  return x + y\n}\n\nfunction subtract(x, y) {\n  return x - y\n}\n\nconsole.log(doMath(5, 3, add)) // Prints: 8\nconsole.log(doMath(5, 3, subtract)) // Prints: 2\n```\n\n## Practice Exercise\n\nTry creating a function that:\n\n1. Takes three parameters: a `firstName`, a `lastName`, and a `callback` function\n2. Creates a `fullName` variable by combining the first and last names\n3. Passes the `fullName` to the callback function (which prepends `\"Hello \"` to it)\n4. Prints out the return of the callback function\n\n<details>\n<summary>Solution</summary>\n\n```javascript\nfunction printGreeting(firstName, lastName, callback) {\n  const fullName = firstName + \" \" + lastName\n  console.log(callback(fullName))\n}\n\nfunction getGreeting(name) {\n  return \"Hello \" + name\n}\n\nprintGreeting(\"Kyle\", \"Cook\", getGreeting) // \"Hello Kyle Cook\"\n```\n\n</details>\n\n## Why Use Callbacks?\n\n1. **Flexibility** - The same function can behave differently based on the callback\n2. **Separation of Concerns** - The main function handles one thing, the callback handles another\n","slug":"passing-functions-as-arguments","title":"Passing Functions as Arguments","section":"Functions","icon":"cogs","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/05-functions/B-passing-functions-as-arguments.md","nextSlug":"/fem-getting-started-with-javascript/lessons/functions/arrow-functions","prevSlug":"/fem-getting-started-with-javascript/lessons/functions/introduction-to-functions"}},"__N_SSG":true}