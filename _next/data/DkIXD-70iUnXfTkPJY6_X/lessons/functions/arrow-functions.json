{"pageProps":{"post":{"attributes":{"description":"Learn the alternate arrow function syntax - a shorter way to write functions in JavaScript with some unique features."},"html":"<h1>Arrow Functions</h1>\n<p>Arrow functions are an alternate way to write functions in JavaScript. They provide a shorter syntax and have some unique features that make them especially useful for certain situations.</p>\n<h2>Converting a Normal Function to Arrow Function</h2>\n<p>Let&#39;s start with a normal function and convert it to an arrow function:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Normal function</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> a + b\n}\n\n<span class=\"hljs-comment\">// Arrow function</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">sumArrow</span> = (<span class=\"hljs-params\">a, b</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> a + b\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)) <span class=\"hljs-comment\">// 3</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">sumArrow</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)) <span class=\"hljs-comment\">// 3</span>\n</code></pre><h3>Arrow Function Syntax</h3>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">functionName</span> = (<span class=\"hljs-params\">parameters</span>) =&gt; {\n  <span class=\"hljs-comment\">// function body</span>\n}\n</code></pre><p><strong>Key differences from normal functions:</strong></p>\n<ol>\n<li>Use <code>const</code> (or <code>let</code>) instead of <code>function</code> keyword</li>\n<li>Function name comes first, then <code>=</code></li>\n<li>Parameters in parentheses</li>\n<li>Arrow (<code>=&gt;</code>) between parameters and body</li>\n<li>Function body in curly braces</li>\n</ol>\n<h2>Unique Features</h2>\n<p>For the most part you can use arrow functions just like normal functions, but they have some unique features you need to be aware of.</p>\n<h3>Single Parameter Shortcut</h3>\n<p>When you have exactly <strong>one parameter</strong>, you can omit the parentheses:</p>\n<!-- prettier-ignore -->\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// With parentheses</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">printName</span> = (<span class=\"hljs-params\">name</span>) =&gt; {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name)\n}\n\n<span class=\"hljs-comment\">// Without parentheses</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">printNameShort</span> = name =&gt; {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name)\n}\n</code></pre><p><strong>Note:</strong> If you have zero parameters or multiple parameters, parentheses are required:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Zero parameters - parentheses required</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">sayHi</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hi&quot;</span>)\n}\n\n<span class=\"hljs-comment\">// Multiple parameters - parentheses required</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">add</span> = (<span class=\"hljs-params\">x, y</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> x + y\n}\n</code></pre><h3>Single Line Return Shortcut</h3>\n<p>When your function body is just <strong>one line that returns a value</strong>, you can use an even shorter syntax:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Normal arrow function</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">sum</span> = (<span class=\"hljs-params\">a, b</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> a + b\n}\n\n<span class=\"hljs-comment\">// Short arrow function (implicit return)</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">sumShort</span> = (<span class=\"hljs-params\">a, b</span>) =&gt; a + b\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">sumShort</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)) <span class=\"hljs-comment\">// 3</span>\n</code></pre><p>JavaScript automatically returns the value after the arrow without needing <code>return</code> or curly braces it it just one line.</p>\n<h2>Common Mistakes</h2>\n<ol>\n<li><p>Incorrect implicit return</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ Wrong - can&#x27;t use &#x27;return&#x27; without curly braces</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">add</span> = (<span class=\"hljs-params\">a, b</span>) =&gt; <span class=\"hljs-keyword\">return</span> a + b\n\n<span class=\"hljs-comment\">// ❌ Wrong - Doesn&#x27;t return anything</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">add</span> = (<span class=\"hljs-params\">a, b</span>) =&gt; {\n  a + b\n}\n\n<span class=\"hljs-comment\">// ✅ Correct - either use curly braces with return</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">add</span> = (<span class=\"hljs-params\">a, b</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> a + b\n}\n\n<span class=\"hljs-comment\">// ✅ Or use implicit return without curly braces</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">add</span> = (<span class=\"hljs-params\">a, b</span>) =&gt; a + b\n</code></pre></li>\n<li><p>Forgetting Parentheses for Multiple Parameters</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ Wrong - multiple parameters need parentheses</span>\n<span class=\"hljs-keyword\">const</span> multiply = a, <span class=\"hljs-function\"><span class=\"hljs-params\">b</span> =&gt;</span> a * b\n\n<span class=\"hljs-comment\">// ✅ Correct</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">multiply</span> = (<span class=\"hljs-params\">a, b</span>) =&gt; a * b\n</code></pre></li>\n</ol>\n<h2>When to Use Arrow Functions</h2>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">processData</span>(<span class=\"hljs-params\">x, callback</span>) {\n  <span class=\"hljs-title function_\">callback</span>(x)\n}\n\n<span class=\"hljs-comment\">// With normal function (verbose)</span>\n<span class=\"hljs-title function_\">processData</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">variable</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(variable)\n})\n\n<span class=\"hljs-comment\">// With arrow function (concise)</span>\n<span class=\"hljs-title function_\">processData</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">variable</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(variable)\n})\n\n<span class=\"hljs-comment\">// Or even shorter on one line</span>\n<span class=\"hljs-title function_\">processData</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">variable</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(variable))\n</code></pre><p><strong>Use arrow functions for:</strong></p>\n<ul>\n<li>Short, simple functions</li>\n<li>Callback functions</li>\n<li>Anonymous functions</li>\n<li>Functions that fit on one line</li>\n</ul>\n<p><strong>Consider normal functions for:</strong></p>\n<ul>\n<li>Functions that need a descriptive name</li>\n</ul>\n","markdown":"\n# Arrow Functions\n\nArrow functions are an alternate way to write functions in JavaScript. They provide a shorter syntax and have some unique features that make them especially useful for certain situations.\n\n## Converting a Normal Function to Arrow Function\n\nLet's start with a normal function and convert it to an arrow function:\n\n```javascript\n// Normal function\nfunction sum(a, b) {\n  return a + b\n}\n\n// Arrow function\nconst sumArrow = (a, b) => {\n  return a + b\n}\n\nconsole.log(sum(1, 2)) // 3\nconsole.log(sumArrow(1, 2)) // 3\n```\n\n### Arrow Function Syntax\n\n```javascript\nconst functionName = (parameters) => {\n  // function body\n}\n```\n\n**Key differences from normal functions:**\n\n1. Use `const` (or `let`) instead of `function` keyword\n2. Function name comes first, then `=`\n3. Parameters in parentheses\n4. Arrow (`=>`) between parameters and body\n5. Function body in curly braces\n\n## Unique Features\n\nFor the most part you can use arrow functions just like normal functions, but they have some unique features you need to be aware of.\n\n### Single Parameter Shortcut\n\nWhen you have exactly **one parameter**, you can omit the parentheses:\n\n<!-- prettier-ignore -->\n```javascript\n// With parentheses\nconst printName = (name) => {\n  console.log(name)\n}\n\n// Without parentheses\nconst printNameShort = name => {\n  console.log(name)\n}\n```\n\n**Note:** If you have zero parameters or multiple parameters, parentheses are required:\n\n```javascript\n// Zero parameters - parentheses required\nconst sayHi = () => {\n  console.log(\"Hi\")\n}\n\n// Multiple parameters - parentheses required\nconst add = (x, y) => {\n  return x + y\n}\n```\n\n### Single Line Return Shortcut\n\nWhen your function body is just **one line that returns a value**, you can use an even shorter syntax:\n\n```javascript\n// Normal arrow function\nconst sum = (a, b) => {\n  return a + b\n}\n\n// Short arrow function (implicit return)\nconst sumShort = (a, b) => a + b\n\nconsole.log(sumShort(1, 2)) // 3\n```\n\nJavaScript automatically returns the value after the arrow without needing `return` or curly braces it it just one line.\n\n## Common Mistakes\n\n1. Incorrect implicit return\n\n   ```javascript\n   // ❌ Wrong - can't use 'return' without curly braces\n   const add = (a, b) => return a + b\n\n   // ❌ Wrong - Doesn't return anything\n   const add = (a, b) => {\n     a + b\n   }\n\n   // ✅ Correct - either use curly braces with return\n   const add = (a, b) => {\n     return a + b\n   }\n\n   // ✅ Or use implicit return without curly braces\n   const add = (a, b) => a + b\n   ```\n\n2. Forgetting Parentheses for Multiple Parameters\n\n   ```javascript\n   // ❌ Wrong - multiple parameters need parentheses\n   const multiply = a, b => a * b\n\n   // ✅ Correct\n   const multiply = (a, b) => a * b\n   ```\n\n## When to Use Arrow Functions\n\n```javascript\nfunction processData(x, callback) {\n  callback(x)\n}\n\n// With normal function (verbose)\nprocessData(10, function (variable) {\n  console.log(variable)\n})\n\n// With arrow function (concise)\nprocessData(10, (variable) => {\n  console.log(variable)\n})\n\n// Or even shorter on one line\nprocessData(10, (variable) => console.log(variable))\n```\n\n**Use arrow functions for:**\n\n- Short, simple functions\n- Callback functions\n- Anonymous functions\n- Functions that fit on one line\n\n**Consider normal functions for:**\n\n- Functions that need a descriptive name\n","slug":"arrow-functions","title":"Arrow Functions","section":"Functions","icon":"cogs","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/05-functions/C-arrow-functions.md","nextSlug":"/fem-getting-started-with-javascript/lessons/scope/understanding-scope","prevSlug":"/fem-getting-started-with-javascript/lessons/functions/passing-functions-as-arguments"}},"__N_SSG":true}