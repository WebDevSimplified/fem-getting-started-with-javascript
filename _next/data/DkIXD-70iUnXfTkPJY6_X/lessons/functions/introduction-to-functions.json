{"pageProps":{"post":{"attributes":{"description":"Learn how to create and use functions in JavaScript to organize your code and avoid repetition."},"html":"<h1>Introduction to Functions</h1>\n<p>Functions store logic to be used later in your code similar to how variables store values for later use.</p>\n<h2>Why Do We Need Functions?</h2>\n<p>Functions help us avoid writing the same code multiple times. Let&#39;s look at an example:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hello&quot;</span>)\n\n<span class=\"hljs-comment\">// ... lots of other code here ...</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hello&quot;</span>) <span class=\"hljs-comment\">// We&#x27;re repeating ourselves!</span>\n</code></pre><p>If we want to change &quot;Hello&quot; to &quot;Hi&quot;, we&#39;d need to remember to update it everywhere. This is where functions come in handy.</p>\n<h2>Creating Your First Function</h2>\n<p>Here&#39;s how to write a function in JavaScript:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHi</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hi&quot;</span>)\n}\n</code></pre><p>Let&#39;s break this down:</p>\n<ol>\n<li><strong><code>function</code></strong> - The keyword that tells JavaScript we&#39;re creating a function</li>\n<li><strong><code>sayHi</code></strong> - The name of our function (follows same naming rules as variables)</li>\n<li><strong><code>()</code></strong> - Parentheses for parameters (empty for now)</li>\n<li><strong><code>{}</code></strong> - Curly braces that contain the function&#39;s code</li>\n</ol>\n<h3>Function Naming</h3>\n<p>Function names follow the same rules as variables:</p>\n<ul>\n<li>Start with a lowercase letter</li>\n<li>Use camelCase for multiple words</li>\n<li>Choose descriptive names</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>) {} <span class=\"hljs-comment\">// Good</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">calculateTotal</span>(<span class=\"hljs-params\"></span>) {} <span class=\"hljs-comment\">// Good</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getUserAge</span>(<span class=\"hljs-params\"></span>) {} <span class=\"hljs-comment\">// Good</span>\n</code></pre><h2>Calling (Running) a Function</h2>\n<p>Creating a function doesn&#39;t run it automatically. To execute the function, you need to <strong>call</strong> it:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHi</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hi&quot;</span>)\n}\n\n<span class=\"hljs-title function_\">sayHi</span>() <span class=\"hljs-comment\">// This runs the function</span>\n</code></pre><p>You can call the same function multiple times:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-title function_\">sayHi</span>() <span class=\"hljs-comment\">// Prints &quot;Hi&quot;</span>\n<span class=\"hljs-title function_\">sayHi</span>() <span class=\"hljs-comment\">// Prints &quot;Hi&quot; again</span>\n</code></pre><h2>Functions with Parameters</h2>\n<p>Functions become more powerful when they can accept information. These inputs are called <strong>parameters</strong>:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">printName</span>(<span class=\"hljs-params\">name</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name)\n}\n\n<span class=\"hljs-title function_\">printName</span>(<span class=\"hljs-string\">&quot;Kyle&quot;</span>) <span class=\"hljs-comment\">// Prints &quot;Kyle&quot;</span>\n<span class=\"hljs-title function_\">printName</span>(<span class=\"hljs-string\">&quot;Sarah&quot;</span>) <span class=\"hljs-comment\">// Prints &quot;Sarah&quot;</span>\n</code></pre><h3>Parameters vs Arguments</h3>\n<ul>\n<li><strong>Parameters</strong> are the names listed in the function definition - <code>name</code></li>\n<li><strong>Arguments</strong> are the actual values passed when calling the function - <code>&quot;Kyle&quot;</code>, <code>&quot;Sarah&quot;</code></li>\n</ul>\n<p>Technically, these mean two different things, but many people (including myself) use them interchangeably in casual conversation.</p>\n<h3>Multiple Parameters</h3>\n<p>You can have multiple parameters separated by commas:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a + b)\n}\n\n<span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// Prints 3</span>\n<span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>) <span class=\"hljs-comment\">// Prints 12</span>\n</code></pre><h3>Using Variables as Arguments</h3>\n<p>You can pass variables to functions:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">x, y</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x + y)\n}\n\n<span class=\"hljs-keyword\">let</span> num1 = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-keyword\">let</span> num2 = <span class=\"hljs-number\">5</span>\n\n<span class=\"hljs-title function_\">add</span>(num1, num2) <span class=\"hljs-comment\">// Prints 15</span>\n<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>) <span class=\"hljs-comment\">// You can also pass values directly</span>\n</code></pre><h2>Returning Values with <code>return</code></h2>\n<p>So far, our functions have only printed results. But functions can also <strong>return</strong> values using the <code>return</code> keyword. This lets you use the result elsewhere in your code:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">x, y</span>) {\n  <span class=\"hljs-keyword\">return</span> x + y\n}\n\n<span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(sum) <span class=\"hljs-comment\">// 5</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">7</span>)) <span class=\"hljs-comment\">// 17</span>\n</code></pre><p>When a function hits a <code>return</code> statement, it immediately stops and gives back the value. You can then store that value in a variable or use it directly.</p>\n<p>If you don&#39;t use <code>return</code>, the function returns <code>undefined</code> by default.</p>\n<h2>Common Syntax Mistakes</h2>\n<ul>\n<li><p>Missing Parentheses</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ Wrong - missing parentheses</span>\n<span class=\"hljs-keyword\">function</span> sayHello {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hello&quot;</span>)\n}\n\n<span class=\"hljs-comment\">// ✅ Correct</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hello&quot;</span>)\n}\n</code></pre></li>\n<li><p>Missing Curly Braces</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ Wrong - missing opening brace</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hello&quot;</span>)\n}\n\n<span class=\"hljs-comment\">// ❌ Wrong - missing closing brace</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hello&quot;</span>)\n\n<span class=\"hljs-comment\">// ✅ Correct</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hello&quot;</span>)\n}\n</code></pre></li>\n<li><p>Forgetting to Call the Function</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// This creates the function but doesn&#x27;t run it</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hello&quot;</span>)\n}\n\n<span class=\"hljs-comment\">// You need to call it:</span>\n<span class=\"hljs-title function_\">sayHello</span>() <span class=\"hljs-comment\">// Now it runs</span>\n</code></pre></li>\n</ul>\n<h2>Benefits of Functions</h2>\n<ol>\n<li><strong>Avoid Repetition</strong> - Write logic once, use it multiple times</li>\n<li><strong>Easy to Update</strong> - Change logic in one place</li>\n<li><strong>Better Organization</strong> - Break complex problems into smaller pieces</li>\n</ol>\n","markdown":"\n# Introduction to Functions\n\nFunctions store logic to be used later in your code similar to how variables store values for later use.\n\n## Why Do We Need Functions?\n\nFunctions help us avoid writing the same code multiple times. Let's look at an example:\n\n```javascript\nconsole.log(\"Hello\")\n\n// ... lots of other code here ...\n\nconsole.log(\"Hello\") // We're repeating ourselves!\n```\n\nIf we want to change \"Hello\" to \"Hi\", we'd need to remember to update it everywhere. This is where functions come in handy.\n\n## Creating Your First Function\n\nHere's how to write a function in JavaScript:\n\n```javascript\nfunction sayHi() {\n  console.log(\"Hi\")\n}\n```\n\nLet's break this down:\n\n1. **`function`** - The keyword that tells JavaScript we're creating a function\n2. **`sayHi`** - The name of our function (follows same naming rules as variables)\n3. **`()`** - Parentheses for parameters (empty for now)\n4. **`{}`** - Curly braces that contain the function's code\n\n### Function Naming\n\nFunction names follow the same rules as variables:\n\n- Start with a lowercase letter\n- Use camelCase for multiple words\n- Choose descriptive names\n\n```javascript\nfunction sayHello() {} // Good\nfunction calculateTotal() {} // Good\nfunction getUserAge() {} // Good\n```\n\n## Calling (Running) a Function\n\nCreating a function doesn't run it automatically. To execute the function, you need to **call** it:\n\n```javascript\nfunction sayHi() {\n  console.log(\"Hi\")\n}\n\nsayHi() // This runs the function\n```\n\nYou can call the same function multiple times:\n\n```javascript\nsayHi() // Prints \"Hi\"\nsayHi() // Prints \"Hi\" again\n```\n\n## Functions with Parameters\n\nFunctions become more powerful when they can accept information. These inputs are called **parameters**:\n\n```javascript\nfunction printName(name) {\n  console.log(name)\n}\n\nprintName(\"Kyle\") // Prints \"Kyle\"\nprintName(\"Sarah\") // Prints \"Sarah\"\n```\n\n### Parameters vs Arguments\n\n- **Parameters** are the names listed in the function definition - `name`\n- **Arguments** are the actual values passed when calling the function - `\"Kyle\"`, `\"Sarah\"`\n\nTechnically, these mean two different things, but many people (including myself) use them interchangeably in casual conversation.\n\n### Multiple Parameters\n\nYou can have multiple parameters separated by commas:\n\n```javascript\nfunction sum(a, b) {\n  console.log(a + b)\n}\n\nsum(1, 2) // Prints 3\nsum(5, 7) // Prints 12\n```\n\n### Using Variables as Arguments\n\nYou can pass variables to functions:\n\n```javascript\nfunction add(x, y) {\n  console.log(x + y)\n}\n\nlet num1 = 10\nlet num2 = 5\n\nadd(num1, num2) // Prints 15\nadd(3, 7) // You can also pass values directly\n```\n\n## Returning Values with `return`\n\nSo far, our functions have only printed results. But functions can also **return** values using the `return` keyword. This lets you use the result elsewhere in your code:\n\n```javascript\nfunction add(x, y) {\n  return x + y\n}\n\nlet sum = add(2, 3)\nconsole.log(sum) // 5\nconsole.log(add(10, 7)) // 17\n```\n\nWhen a function hits a `return` statement, it immediately stops and gives back the value. You can then store that value in a variable or use it directly.\n\nIf you don't use `return`, the function returns `undefined` by default.\n\n## Common Syntax Mistakes\n\n- Missing Parentheses\n\n  ```javascript\n  // ❌ Wrong - missing parentheses\n  function sayHello {\n    console.log(\"Hello\")\n  }\n\n  // ✅ Correct\n  function sayHello() {\n    console.log(\"Hello\")\n  }\n  ```\n\n- Missing Curly Braces\n\n  ```javascript\n  // ❌ Wrong - missing opening brace\n  function sayHello()\n    console.log(\"Hello\")\n  }\n\n  // ❌ Wrong - missing closing brace\n  function sayHello() {\n    console.log(\"Hello\")\n\n  // ✅ Correct\n  function sayHello() {\n    console.log(\"Hello\")\n  }\n  ```\n\n- Forgetting to Call the Function\n\n  ```javascript\n  // This creates the function but doesn't run it\n  function sayHello() {\n    console.log(\"Hello\")\n  }\n\n  // You need to call it:\n  sayHello() // Now it runs\n  ```\n\n## Benefits of Functions\n\n1. **Avoid Repetition** - Write logic once, use it multiple times\n2. **Easy to Update** - Change logic in one place\n3. **Better Organization** - Break complex problems into smaller pieces\n","slug":"introduction-to-functions","title":"Introduction to Functions","section":"Functions","icon":"cogs","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/05-functions/A-introduction-to-functions.md","nextSlug":"/fem-getting-started-with-javascript/lessons/functions/passing-functions-as-arguments","prevSlug":"/fem-getting-started-with-javascript/lessons/variable-basics/null-vs-undefined"}},"__N_SSG":true}