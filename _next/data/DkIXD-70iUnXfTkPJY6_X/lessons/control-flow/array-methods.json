{"pageProps":{"post":{"attributes":{"description":"Learn essential array methods like forEach, map, filter, find, some, every, and reduce to work with arrays efficiently in JavaScript."},"html":"<h1>Array Methods</h1>\n<p>Arrays are incredibly powerful in JavaScript, and they become even more useful when you know the built-in methods that can help you work with them efficiently.</p>\n<h2>What Are Array Methods?</h2>\n<p>Array methods are functions that are built into JavaScript arrays. You call them using dot notation on an array, just like accessing properties on objects.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n\nnumbers.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// Do something with each number</span>\n})\n</code></pre><h2><code>forEach</code> Method</h2>\n<p><code>forEach</code> is probably the most commonly used array method. It loops through each element in your array and runs a function for each one.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n\nnumbers.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(number)\n})\n\n<span class=\"hljs-comment\">// Prints:</span>\n<span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-comment\">// 2</span>\n<span class=\"hljs-comment\">// 3</span>\n<span class=\"hljs-comment\">// 4</span>\n<span class=\"hljs-comment\">// 5</span>\n</code></pre><h3><code>forEach</code> with Index</h3>\n<p><code>forEach</code> can also give you the index of each element:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> names = [<span class=\"hljs-string\">&quot;Kyle&quot;</span>, <span class=\"hljs-string\">&quot;Sarah&quot;</span>, <span class=\"hljs-string\">&quot;John&quot;</span>]\n\nnames.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">name, index</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${name}</span> <span class=\"hljs-subst\">${index}</span>`</span>)\n})\n\n<span class=\"hljs-comment\">// Prints:</span>\n<span class=\"hljs-comment\">// Kyle 0</span>\n<span class=\"hljs-comment\">// Sarah 1</span>\n<span class=\"hljs-comment\">// John 2</span>\n</code></pre><p>The index corresponds to the bracket notation you&#39;d use to access that element:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(numbers[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-comment\">// 1 (same as first forEach iteration)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(numbers[<span class=\"hljs-number\">1</span>]) <span class=\"hljs-comment\">// 2 (same as second forEach iteration)</span>\n</code></pre><h2><code>map</code> Method</h2>\n<p><code>map</code> is similar to <code>forEach</code>, but with a key difference: it <strong>returns a new array</strong> based on what you return from your function.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n\n<span class=\"hljs-keyword\">const</span> doubled = numbers.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> number * <span class=\"hljs-number\">2</span>\n})\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(doubled) <span class=\"hljs-comment\">// [2, 4, 6, 8, 10]</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(numbers) <span class=\"hljs-comment\">// [1, 2, 3, 4, 5] (original unchanged)</span>\n</code></pre><h3>Key Points About <code>map</code>:</h3>\n<ul>\n<li><strong>Returns a new array</strong> - doesn&#39;t modify the original</li>\n<li><strong>Same length</strong> - new array has same number of elements</li>\n<li><strong>Transform each element</strong> - each element can become something new</li>\n</ul>\n<h3>Common Use Case</h3>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> people = [\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Alice&quot;</span> },\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Bob&quot;</span> },\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Charlie&quot;</span> },\n]\n\n<span class=\"hljs-keyword\">const</span> names = people.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">person</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> person.<span class=\"hljs-property\">name</span>\n})\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(names) <span class=\"hljs-comment\">// [&quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;]</span>\n</code></pre><h2><code>filter</code> Method</h2>\n<p><code>filter</code> creates a new array containing only the elements that pass a test. You return <code>true</code> to keep an element, <code>false</code> to remove it.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n\n<span class=\"hljs-keyword\">const</span> smallNumbers = numbers.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> number &lt;= <span class=\"hljs-number\">2</span>\n})\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(smallNumbers) <span class=\"hljs-comment\">// [1, 2]</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(numbers) <span class=\"hljs-comment\">// [1, 2, 3, 4, 5] (original unchanged)</span>\n</code></pre><h2><code>find</code> Method</h2>\n<p><code>find</code> is similar to <code>filter</code>, but it only returns the <strong>first</strong> element that matches your condition. As soon as it finds a match, it stops looking.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n\n<span class=\"hljs-keyword\">const</span> firstBigNumber = numbers.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> number &gt; <span class=\"hljs-number\">2</span>\n})\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(firstBigNumber) <span class=\"hljs-comment\">// 3 (not an array, just the number)</span>\n</code></pre><h2><code>some</code> Method</h2>\n<p><code>some</code> checks if <strong>at least one</strong> element in your array passes a test. It returns <code>true</code> or <code>false</code>.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n\n<span class=\"hljs-keyword\">const</span> hasLargeNumber = numbers.<span class=\"hljs-title function_\">some</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> number &gt; <span class=\"hljs-number\">3</span>\n})\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(hasLargeNumber) <span class=\"hljs-comment\">// true (because 4 and 5 are &gt; 3)</span>\n\n<span class=\"hljs-keyword\">const</span> hasNegativeNumber = numbers.<span class=\"hljs-title function_\">some</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> number &lt; <span class=\"hljs-number\">0</span>\n})\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(hasNegativeNumber) <span class=\"hljs-comment\">// false (no numbers are &lt; 0)</span>\n</code></pre><h3>How <code>some</code> Works:</h3>\n<ul>\n<li><strong>Returns true</strong> if ANY element passes the test</li>\n<li><strong>Returns false</strong> if NO elements pass the test</li>\n<li><strong>Stops checking</strong> as soon as it finds one that passes</li>\n</ul>\n<h2><code>every</code> Method</h2>\n<p><code>every</code> is the opposite of <code>some</code> - it checks if <strong>ALL</strong> elements pass a test.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n\n<span class=\"hljs-keyword\">const</span> allPositive = numbers.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> number &gt; <span class=\"hljs-number\">0</span>\n})\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(allPositive) <span class=\"hljs-comment\">// true (all numbers are greater than 0)</span>\n\n<span class=\"hljs-keyword\">const</span> allLarge = numbers.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> number &gt; <span class=\"hljs-number\">3</span>\n})\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(allLarge) <span class=\"hljs-comment\">// false (1, 2, and 3 are not &gt; 3)</span>\n</code></pre><h3>How <code>every</code> Works:</h3>\n<ul>\n<li><strong>Returns true</strong> if ALL elements pass the test</li>\n<li><strong>Returns false</strong> if ANY element fails the test</li>\n<li><strong>Stops checking</strong> as soon as it finds one that fails</li>\n</ul>\n<h2><code>reduce</code> Method</h2>\n<p><code>reduce</code> is the most powerful (and confusing) array method. It &quot;reduces&quot; your array down to a single value by running a function that gathers the results into a single value.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n\n<span class=\"hljs-keyword\">const</span> sum = numbers.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">accumulator, number</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> accumulator + number\n}, <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// 0 is the starting value</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(sum) <span class=\"hljs-comment\">// 15 (0+1+2+3+4+5)</span>\n</code></pre><h3>How <code>reduce</code> Works:</h3>\n<ol>\n<li><strong>Starting value</strong>: The second argument (0 in the example above)</li>\n<li><strong>Accumulator</strong>: Starts as the starting value, then becomes whatever you return</li>\n<li><strong>Current element</strong>: Each element in the array, one by one</li>\n<li><strong>Return value</strong>: Becomes the new accumulator for the next iteration</li>\n</ol>\n<p>Let&#39;s trace through the sum example:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n\n<span class=\"hljs-keyword\">const</span> sum = numbers.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">accumulator, number</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`accumulator: <span class=\"hljs-subst\">${accumulator}</span>, number: <span class=\"hljs-subst\">${number}</span>`</span>)\n  <span class=\"hljs-keyword\">return</span> accumulator + number\n}, <span class=\"hljs-number\">0</span>)\n\n<span class=\"hljs-comment\">// Prints:</span>\n<span class=\"hljs-comment\">// accumulator: 0, number: 1 → returns 1</span>\n<span class=\"hljs-comment\">// accumulator: 1, number: 2 → returns 3</span>\n<span class=\"hljs-comment\">// accumulator: 3, number: 3 → returns 6</span>\n<span class=\"hljs-comment\">// accumulator: 6, number: 4 → returns 10</span>\n<span class=\"hljs-comment\">// accumulator: 10, number: 5 → returns 15</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(sum) <span class=\"hljs-comment\">// 15</span>\n</code></pre>","markdown":"\n# Array Methods\n\nArrays are incredibly powerful in JavaScript, and they become even more useful when you know the built-in methods that can help you work with them efficiently.\n\n## What Are Array Methods?\n\nArray methods are functions that are built into JavaScript arrays. You call them using dot notation on an array, just like accessing properties on objects.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\n\nnumbers.forEach((n) => {\n  // Do something with each number\n})\n```\n\n## `forEach` Method\n\n`forEach` is probably the most commonly used array method. It loops through each element in your array and runs a function for each one.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\n\nnumbers.forEach((number) => {\n  console.log(number)\n})\n\n// Prints:\n// 1\n// 2\n// 3\n// 4\n// 5\n```\n\n### `forEach` with Index\n\n`forEach` can also give you the index of each element:\n\n```javascript\nconst names = [\"Kyle\", \"Sarah\", \"John\"]\n\nnames.forEach((name, index) => {\n  console.log(`${name} ${index}`)\n})\n\n// Prints:\n// Kyle 0\n// Sarah 1\n// John 2\n```\n\nThe index corresponds to the bracket notation you'd use to access that element:\n\n```javascript\nconsole.log(numbers[0]) // 1 (same as first forEach iteration)\nconsole.log(numbers[1]) // 2 (same as second forEach iteration)\n```\n\n## `map` Method\n\n`map` is similar to `forEach`, but with a key difference: it **returns a new array** based on what you return from your function.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\n\nconst doubled = numbers.map((number) => {\n  return number * 2\n})\n\nconsole.log(doubled) // [2, 4, 6, 8, 10]\nconsole.log(numbers) // [1, 2, 3, 4, 5] (original unchanged)\n```\n\n### Key Points About `map`:\n\n- **Returns a new array** - doesn't modify the original\n- **Same length** - new array has same number of elements\n- **Transform each element** - each element can become something new\n\n### Common Use Case\n\n```javascript\nconst people = [\n  { id: 1, name: \"Alice\" },\n  { id: 2, name: \"Bob\" },\n  { id: 3, name: \"Charlie\" },\n]\n\nconst names = people.map((person) => {\n  return person.name\n})\nconsole.log(names) // [\"Alice\", \"Bob\", \"Charlie\"]\n```\n\n## `filter` Method\n\n`filter` creates a new array containing only the elements that pass a test. You return `true` to keep an element, `false` to remove it.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\n\nconst smallNumbers = numbers.filter((number) => {\n  return number <= 2\n})\n\nconsole.log(smallNumbers) // [1, 2]\nconsole.log(numbers) // [1, 2, 3, 4, 5] (original unchanged)\n```\n\n## `find` Method\n\n`find` is similar to `filter`, but it only returns the **first** element that matches your condition. As soon as it finds a match, it stops looking.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\n\nconst firstBigNumber = numbers.find((number) => {\n  return number > 2\n})\n\nconsole.log(firstBigNumber) // 3 (not an array, just the number)\n```\n\n## `some` Method\n\n`some` checks if **at least one** element in your array passes a test. It returns `true` or `false`.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\n\nconst hasLargeNumber = numbers.some((number) => {\n  return number > 3\n})\nconsole.log(hasLargeNumber) // true (because 4 and 5 are > 3)\n\nconst hasNegativeNumber = numbers.some((number) => {\n  return number < 0\n})\nconsole.log(hasNegativeNumber) // false (no numbers are < 0)\n```\n\n### How `some` Works:\n\n- **Returns true** if ANY element passes the test\n- **Returns false** if NO elements pass the test\n- **Stops checking** as soon as it finds one that passes\n\n## `every` Method\n\n`every` is the opposite of `some` - it checks if **ALL** elements pass a test.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\n\nconst allPositive = numbers.every((number) => {\n  return number > 0\n})\nconsole.log(allPositive) // true (all numbers are greater than 0)\n\nconst allLarge = numbers.every((number) => {\n  return number > 3\n})\nconsole.log(allLarge) // false (1, 2, and 3 are not > 3)\n```\n\n### How `every` Works:\n\n- **Returns true** if ALL elements pass the test\n- **Returns false** if ANY element fails the test\n- **Stops checking** as soon as it finds one that fails\n\n## `reduce` Method\n\n`reduce` is the most powerful (and confusing) array method. It \"reduces\" your array down to a single value by running a function that gathers the results into a single value.\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\n\nconst sum = numbers.reduce((accumulator, number) => {\n  return accumulator + number\n}, 0) // 0 is the starting value\n\nconsole.log(sum) // 15 (0+1+2+3+4+5)\n```\n\n### How `reduce` Works:\n\n1. **Starting value**: The second argument (0 in the example above)\n2. **Accumulator**: Starts as the starting value, then becomes whatever you return\n3. **Current element**: Each element in the array, one by one\n4. **Return value**: Becomes the new accumulator for the next iteration\n\nLet's trace through the sum example:\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5]\n\nconst sum = numbers.reduce((accumulator, number) => {\n  console.log(`accumulator: ${accumulator}, number: ${number}`)\n  return accumulator + number\n}, 0)\n\n// Prints:\n// accumulator: 0, number: 1 → returns 1\n// accumulator: 1, number: 2 → returns 3\n// accumulator: 3, number: 3 → returns 6\n// accumulator: 6, number: 4 → returns 10\n// accumulator: 10, number: 5 → returns 15\n\nconsole.log(sum) // 15\n```\n","slug":"array-methods","title":"Array Methods","section":"Control Flow","icon":"route","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/08-control-flow/H-array-methods.md","nextSlug":"/fem-getting-started-with-javascript/lessons/dom/window-and-document","prevSlug":"/fem-getting-started-with-javascript/lessons/control-flow/short-circuit-evaluation"}},"__N_SSG":true}