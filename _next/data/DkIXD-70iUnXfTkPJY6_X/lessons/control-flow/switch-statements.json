{"pageProps":{"post":{"attributes":{"description":"Learn how to use switch statements for cleaner multi-way conditional logic and how to create scoped blocks for each case."},"html":"<h1>Switch Statements</h1>\n<p>Switch statements provide a cleaner way to write multiple if-else conditions when comparing a single variable against many different values.</p>\n<h2>Basic Switch Syntax</h2>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> favoriteAnimal = <span class=\"hljs-string\">&quot;cat&quot;</span>\n\n<span class=\"hljs-keyword\">switch</span> (favoriteAnimal) {\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;cat&quot;</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Cats are pretty cool&quot;</span>)\n    <span class=\"hljs-keyword\">break</span>\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;dog&quot;</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;They are kinda loud&quot;</span>)\n    <span class=\"hljs-keyword\">break</span>\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;shark&quot;</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;That is an interesting choice&quot;</span>)\n    <span class=\"hljs-keyword\">break</span>\n  <span class=\"hljs-attr\">default</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;That is cool but I am unfamiliar with that animal&quot;</span>)\n}\n</code></pre><h3>How It Works</h3>\n<ol>\n<li><strong>Switch Expression</strong>: The variable to check (<code>favoriteAnimal</code>).</li>\n<li><strong>Case Labels</strong>: Each <code>case</code> checks if the switch expression is equal to a specific value.</li>\n<li><strong>Break Statement</strong>: Ends the switch block after a match is found.</li>\n<li><strong>Default Case</strong>: Runs if no cases match, similar to <code>else</code> in if-else statements.</li>\n</ol>\n<h3>Switch vs If-Else</h3>\n<p>The above switch statement is equivalent to this if-else chain:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> favoriteAnimal = <span class=\"hljs-string\">&quot;cat&quot;</span>\n\n<span class=\"hljs-keyword\">if</span> (favoriteAnimal === <span class=\"hljs-string\">&quot;cat&quot;</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Cats are pretty cool&quot;</span>)\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (favoriteAnimal === <span class=\"hljs-string\">&quot;dog&quot;</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;They are kinda loud&quot;</span>)\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (favoriteAnimal === <span class=\"hljs-string\">&quot;shark&quot;</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;That is an interesting choice&quot;</span>)\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;That is cool but I am unfamiliar with that animal&quot;</span>)\n}\n</code></pre><p>As you can see, switch statements eliminate the repetitive <code>favoriteAnimal ===</code> checks.</p>\n<h2>When to Use Switch vs If-Else</h2>\n<p><strong>Use switch when:</strong></p>\n<ul>\n<li>Comparing one variable against multiple specific values</li>\n<li>You have many conditions to check</li>\n<li>The conditions use strict equality (<code>===</code>)</li>\n</ul>\n<p><strong>Use if-else when:</strong></p>\n<ul>\n<li>You need complex conditions (<code>&gt;</code>, <code>&lt;</code>, <code>&amp;&amp;</code>, <code>||</code>)</li>\n<li>Comparing different variables</li>\n<li>You have only a few conditions</li>\n</ul>\n<h2>Advanced Features</h2>\n<h3>Multiple Cases for Same Action</h3>\n<p>If you want multiple cases to execute the same code, you can stack them on top of each other without a break between them:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> day = <span class=\"hljs-string\">&quot;saturday&quot;</span>\n\n<span class=\"hljs-keyword\">switch</span> (day) {\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;monday&quot;</span>:\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;tuesday&quot;</span>:\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;wednesday&quot;</span>:\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;thursday&quot;</span>:\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;friday&quot;</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Workday&quot;</span>)\n    <span class=\"hljs-keyword\">break</span>\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;saturday&quot;</span>:\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;sunday&quot;</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Weekend!&quot;</span>) <span class=\"hljs-comment\">// This runs</span>\n    <span class=\"hljs-keyword\">break</span>\n  <span class=\"hljs-attr\">default</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Invalid day&quot;</span>)\n}\n</code></pre><p>This works since a switch statement will continue running code until it hits a break statement.</p>\n<h3>Creating Scope with Curly Braces</h3>\n<p><strong>Important:</strong> Each case does <strong>not</strong> create its own scope by default. If you need to declare variables in a case, wrap it in curly braces:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> action = <span class=\"hljs-string\">&quot;login&quot;</span>\n\n<span class=\"hljs-keyword\">switch</span> (action) {\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;login&quot;</span>: {\n    <span class=\"hljs-comment\">// Curly braces create a new scope</span>\n    <span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-string\">&quot;Welcome back!&quot;</span>\n    <span class=\"hljs-keyword\">const</span> timestamp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>()\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${message}</span> Login time: <span class=\"hljs-subst\">${timestamp}</span>`</span>)\n    <span class=\"hljs-keyword\">break</span>\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;logout&quot;</span>: {\n    <span class=\"hljs-comment\">// This scope is separate from the login case</span>\n    <span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-string\">&quot;Goodbye!&quot;</span>\n    <span class=\"hljs-keyword\">const</span> timestamp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>()\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${message}</span> Logout time: <span class=\"hljs-subst\">${timestamp}</span>`</span>)\n    <span class=\"hljs-keyword\">break</span>\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;register&quot;</span>: {\n    <span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-string\">&quot;Account created!&quot;</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message)\n    <span class=\"hljs-keyword\">break</span>\n  }\n  <span class=\"hljs-attr\">default</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Unknown action&quot;</span>)\n}\n</code></pre><h4>Why Scope Matters</h4>\n<p>Without curly braces, you can&#39;t redeclare variables:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> status = <span class=\"hljs-string\">&quot;success&quot;</span>\n\n<span class=\"hljs-keyword\">switch</span> (status) {\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;success&quot;</span>:\n    <span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-string\">&quot;Operation successful!&quot;</span> <span class=\"hljs-comment\">// Declares message</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message)\n    <span class=\"hljs-keyword\">break</span>\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;error&quot;</span>:\n    <span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-string\">&quot;Operation failed!&quot;</span> <span class=\"hljs-comment\">// ❌ Error! Cannot redeclare &#x27;message&#x27;</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message)\n    <span class=\"hljs-keyword\">break</span>\n}\n</code></pre><p>With curly braces, each case has its own scope:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> status = <span class=\"hljs-string\">&quot;success&quot;</span>\n\n<span class=\"hljs-keyword\">switch</span> (status) {\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;success&quot;</span>: {\n    <span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-string\">&quot;Operation successful!&quot;</span> <span class=\"hljs-comment\">// ✅ Works</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message)\n    <span class=\"hljs-keyword\">break</span>\n  }\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;error&quot;</span>: {\n    <span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-string\">&quot;Operation failed!&quot;</span> <span class=\"hljs-comment\">// ✅ Works - different scope</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message)\n    <span class=\"hljs-keyword\">break</span>\n  }\n}\n</code></pre><h2>Common Mistakes</h2>\n<ol>\n<li><p>Forgetting Break Statements</p>\n<p>If you forget a <code>break</code>, the code will &quot;fall through&quot; to the next case:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> fruit = <span class=\"hljs-string\">&quot;apple&quot;</span>\n\n<span class=\"hljs-keyword\">switch</span> (fruit) {\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;apple&quot;</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Apple selected&quot;</span>)\n  <span class=\"hljs-comment\">// No break here, so it falls through</span>\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;banana&quot;</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Banana selected&quot;</span>) <span class=\"hljs-comment\">// This runs too!</span>\n    <span class=\"hljs-keyword\">break</span>\n  <span class=\"hljs-attr\">default</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Unknown fruit&quot;</span>)\n}\n</code></pre></li>\n<li><p>Relying on Loose Equality</p>\n<p>Switch statements use strict equality (<code>===</code>), so be careful with types:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-string\">&quot;5&quot;</span>\n\n<span class=\"hljs-keyword\">switch</span> (value) {\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>: <span class=\"hljs-comment\">// ❌ This won&#x27;t match because 5 is a number, not a string</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Matched number 5&quot;</span>)\n    <span class=\"hljs-keyword\">break</span>\n  <span class=\"hljs-attr\">default</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;No match&quot;</span>) <span class=\"hljs-comment\">// This runs</span>\n}\n</code></pre></li>\n<li><p>Forgetting Scope for Variables</p>\n<p>If you declare variables in a case without curly braces, they will leak into the switch scope:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> action = <span class=\"hljs-string\">&quot;login&quot;</span>\n\n<span class=\"hljs-keyword\">switch</span> (action) {\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;login&quot;</span>:\n    <span class=\"hljs-keyword\">const</span> message = <span class=\"hljs-string\">&quot;Welcome!&quot;</span> <span class=\"hljs-comment\">// Leaks to switch scope</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message)\n    <span class=\"hljs-keyword\">break</span>\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;logout&quot;</span>:\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message) <span class=\"hljs-comment\">// ❌ Error - message is not defined here</span>\n    <span class=\"hljs-keyword\">break</span>\n}\n</code></pre><p>Always use curly braces to create a new scope when declaring variables in cases.</p>\n</li>\n</ol>\n<h2>Exercise</h2>\n<p>Create a switch statement that takes a month number (1-12) and returns the season:</p>\n<ul>\n<li>December (12), January (1), February (2): &quot;Winter&quot;</li>\n<li>March (3), April (4), May (5): &quot;Spring&quot;</li>\n<li>June (6), July (7), August (8): &quot;Summer&quot;</li>\n<li>September (9), October (10), November (11): &quot;Fall&quot;</li>\n</ul>\n<details>\n<summary>Solution</summary>\n\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getSeason</span>(<span class=\"hljs-params\">month</span>) {\n  <span class=\"hljs-keyword\">switch</span> (month) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Winter&quot;</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Spring&quot;</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span>:\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Summer&quot;</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Fall&quot;</span>\n    <span class=\"hljs-attr\">default</span>:\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Invalid month&quot;</span>\n  }\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">getSeason</span>(<span class=\"hljs-number\">7</span>)) <span class=\"hljs-comment\">// &quot;Summer&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">getSeason</span>(<span class=\"hljs-number\">13</span>)) <span class=\"hljs-comment\">// &quot;Invalid month&quot;</span>\n</code></pre></details>\n","markdown":"\n# Switch Statements\n\nSwitch statements provide a cleaner way to write multiple if-else conditions when comparing a single variable against many different values.\n\n## Basic Switch Syntax\n\n```javascript\nconst favoriteAnimal = \"cat\"\n\nswitch (favoriteAnimal) {\n  case \"cat\":\n    console.log(\"Cats are pretty cool\")\n    break\n  case \"dog\":\n    console.log(\"They are kinda loud\")\n    break\n  case \"shark\":\n    console.log(\"That is an interesting choice\")\n    break\n  default:\n    console.log(\"That is cool but I am unfamiliar with that animal\")\n}\n```\n\n### How It Works\n\n1. **Switch Expression**: The variable to check (`favoriteAnimal`).\n2. **Case Labels**: Each `case` checks if the switch expression is equal to a specific value.\n3. **Break Statement**: Ends the switch block after a match is found.\n4. **Default Case**: Runs if no cases match, similar to `else` in if-else statements.\n\n### Switch vs If-Else\n\nThe above switch statement is equivalent to this if-else chain:\n\n```javascript\nconst favoriteAnimal = \"cat\"\n\nif (favoriteAnimal === \"cat\") {\n  console.log(\"Cats are pretty cool\")\n} else if (favoriteAnimal === \"dog\") {\n  console.log(\"They are kinda loud\")\n} else if (favoriteAnimal === \"shark\") {\n  console.log(\"That is an interesting choice\")\n} else {\n  console.log(\"That is cool but I am unfamiliar with that animal\")\n}\n```\n\nAs you can see, switch statements eliminate the repetitive `favoriteAnimal ===` checks.\n\n## When to Use Switch vs If-Else\n\n**Use switch when:**\n\n- Comparing one variable against multiple specific values\n- You have many conditions to check\n- The conditions use strict equality (`===`)\n\n**Use if-else when:**\n\n- You need complex conditions (`>`, `<`, `&&`, `||`)\n- Comparing different variables\n- You have only a few conditions\n\n## Advanced Features\n\n### Multiple Cases for Same Action\n\nIf you want multiple cases to execute the same code, you can stack them on top of each other without a break between them:\n\n```javascript\nconst day = \"saturday\"\n\nswitch (day) {\n  case \"monday\":\n  case \"tuesday\":\n  case \"wednesday\":\n  case \"thursday\":\n  case \"friday\":\n    console.log(\"Workday\")\n    break\n  case \"saturday\":\n  case \"sunday\":\n    console.log(\"Weekend!\") // This runs\n    break\n  default:\n    console.log(\"Invalid day\")\n}\n```\n\nThis works since a switch statement will continue running code until it hits a break statement.\n\n### Creating Scope with Curly Braces\n\n**Important:** Each case does **not** create its own scope by default. If you need to declare variables in a case, wrap it in curly braces:\n\n```javascript\nconst action = \"login\"\n\nswitch (action) {\n  case \"login\": {\n    // Curly braces create a new scope\n    const message = \"Welcome back!\"\n    const timestamp = new Date()\n    console.log(`${message} Login time: ${timestamp}`)\n    break\n  }\n  case \"logout\": {\n    // This scope is separate from the login case\n    const message = \"Goodbye!\"\n    const timestamp = new Date()\n    console.log(`${message} Logout time: ${timestamp}`)\n    break\n  }\n  case \"register\": {\n    const message = \"Account created!\"\n    console.log(message)\n    break\n  }\n  default:\n    console.log(\"Unknown action\")\n}\n```\n\n#### Why Scope Matters\n\nWithout curly braces, you can't redeclare variables:\n\n```javascript\nconst status = \"success\"\n\nswitch (status) {\n  case \"success\":\n    const message = \"Operation successful!\" // Declares message\n    console.log(message)\n    break\n  case \"error\":\n    const message = \"Operation failed!\" // ❌ Error! Cannot redeclare 'message'\n    console.log(message)\n    break\n}\n```\n\nWith curly braces, each case has its own scope:\n\n```javascript\nconst status = \"success\"\n\nswitch (status) {\n  case \"success\": {\n    const message = \"Operation successful!\" // ✅ Works\n    console.log(message)\n    break\n  }\n  case \"error\": {\n    const message = \"Operation failed!\" // ✅ Works - different scope\n    console.log(message)\n    break\n  }\n}\n```\n\n## Common Mistakes\n\n1. Forgetting Break Statements\n\n   If you forget a `break`, the code will \"fall through\" to the next case:\n\n   ```javascript\n   const fruit = \"apple\"\n\n   switch (fruit) {\n     case \"apple\":\n       console.log(\"Apple selected\")\n     // No break here, so it falls through\n     case \"banana\":\n       console.log(\"Banana selected\") // This runs too!\n       break\n     default:\n       console.log(\"Unknown fruit\")\n   }\n   ```\n\n2. Relying on Loose Equality\n\n   Switch statements use strict equality (`===`), so be careful with types:\n\n   ```javascript\n   const value = \"5\"\n\n   switch (value) {\n     case 5: // ❌ This won't match because 5 is a number, not a string\n       console.log(\"Matched number 5\")\n       break\n     default:\n       console.log(\"No match\") // This runs\n   }\n   ```\n\n3. Forgetting Scope for Variables\n\n   If you declare variables in a case without curly braces, they will leak into the switch scope:\n\n   ```javascript\n   const action = \"login\"\n\n   switch (action) {\n     case \"login\":\n       const message = \"Welcome!\" // Leaks to switch scope\n       console.log(message)\n       break\n     case \"logout\":\n       console.log(message) // ❌ Error - message is not defined here\n       break\n   }\n   ```\n\n   Always use curly braces to create a new scope when declaring variables in cases.\n\n## Exercise\n\nCreate a switch statement that takes a month number (1-12) and returns the season:\n\n- December (12), January (1), February (2): \"Winter\"\n- March (3), April (4), May (5): \"Spring\"\n- June (6), July (7), August (8): \"Summer\"\n- September (9), October (10), November (11): \"Fall\"\n\n<details>\n<summary>Solution</summary>\n\n```javascript\nfunction getSeason(month) {\n  switch (month) {\n    case 12:\n    case 1:\n    case 2:\n      return \"Winter\"\n    case 3:\n    case 4:\n    case 5:\n      return \"Spring\"\n    case 6:\n    case 7:\n    case 8:\n      return \"Summer\"\n    case 9:\n    case 10:\n    case 11:\n      return \"Fall\"\n    default:\n      return \"Invalid month\"\n  }\n}\n\nconsole.log(getSeason(7)) // \"Summer\"\nconsole.log(getSeason(13)) // \"Invalid month\"\n```\n\n</details>\n","slug":"switch-statements","title":"Switch Statements","section":"Control Flow","icon":"route","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/08-control-flow/C-switch-statements.md","nextSlug":"/fem-getting-started-with-javascript/lessons/control-flow/for-loops","prevSlug":"/fem-getting-started-with-javascript/lessons/control-flow/ternary-operator"}},"__N_SSG":true}