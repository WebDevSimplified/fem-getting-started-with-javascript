{"pageProps":{"post":{"attributes":{"description":"Learn how to use while loops for repeating code when you don't know exactly how many times to loop."},"html":"<h1>While Loops</h1>\n<p>While loops are used when you need to repeat code, but you don&#39;t know exactly how many times the loop should run. They continue executing as long as a condition remains true.</p>\n<h2>Basic While Loop Syntax</h2>\n<p>A while loop starts with the <code>while</code> keyword, followed by a condition in parentheses <code>()</code>, and a block of code in curly braces <code>{}</code>:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">while</span> (i &lt; <span class=\"hljs-number\">5</span>) {\n  <span class=\"hljs-comment\">// Code to repeat</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Count: <span class=\"hljs-subst\">${i}</span>`</span>)\n  i++ <span class=\"hljs-comment\">// Important: Don&#x27;t forget to change i!</span>\n}\n</code></pre><p>The loop continues as long as the condition in parentheses is <code>true</code> and stops when it becomes <code>false</code>.</p>\n<h2>Converting For Loop to While Loop</h2>\n<p>Here&#39;s how a for loop translates to a while loop:</p>\n<!-- prettier-ignore -->\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// For loop</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i)\n}\n\n<span class=\"hljs-comment\">// Equivalent while loop</span>\n<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// Initialization (outside the loop)</span>\n<span class=\"hljs-keyword\">while</span> (i &lt; <span class=\"hljs-number\">5</span>) { <span class=\"hljs-comment\">// Condition (same as for loop)</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i) <span class=\"hljs-comment\">// Code to run</span>\n  i++ <span class=\"hljs-comment\">// Increment (inside the loop)</span>\n}\n</code></pre><p>Both print: <code>0, 1, 2, 3, 4</code></p>\n<h2>When to Use While Loops</h2>\n<ol>\n<li><p>Unknown Number of Iterations</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Keep asking for input until user enters &quot;quit&quot;</span>\n<span class=\"hljs-keyword\">let</span> userInput = <span class=\"hljs-string\">&quot;&quot;</span>\n<span class=\"hljs-keyword\">while</span> (userInput !== <span class=\"hljs-string\">&quot;quit&quot;</span>) {\n  userInput = <span class=\"hljs-title function_\">prompt</span>(<span class=\"hljs-string\">&quot;Enter a command (or &#x27;quit&#x27; to exit):&quot;</span>)\n  <span class=\"hljs-keyword\">if</span> (userInput !== <span class=\"hljs-string\">&quot;quit&quot;</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You entered: <span class=\"hljs-subst\">${userInput}</span>`</span>)\n  }\n}\n</code></pre></li>\n<li><p>Processing Nested Data Structures</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> person = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Kyle&quot;</span>,\n  <span class=\"hljs-attr\">friend</span>: {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Joe&quot;</span>,\n    <span class=\"hljs-attr\">friend</span>: {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Sally&quot;</span>,\n      <span class=\"hljs-attr\">friend</span>: <span class=\"hljs-literal\">null</span>, <span class=\"hljs-comment\">// Sally has no friend</span>\n    },\n  },\n}\n\n<span class=\"hljs-comment\">// Get the final friend in the chain</span>\n<span class=\"hljs-keyword\">let</span> currentPerson = person\n<span class=\"hljs-keyword\">while</span> (currentPerson.<span class=\"hljs-property\">friend</span> !== <span class=\"hljs-literal\">null</span>) {\n  currentPerson = currentPerson.<span class=\"hljs-property\">friend</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Current friend: <span class=\"hljs-subst\">${currentPerson.name}</span>`</span>)\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Final friend: <span class=\"hljs-subst\">${currentPerson.name}</span>`</span>) <span class=\"hljs-comment\">// &quot;Final friend: Sally&quot;</span>\n</code></pre><p>You can&#39;t easily do this with a for loop because you don&#39;t know how deep the friend chain goes!</p>\n</li>\n</ol>\n<h3>While Loop vs For Loop</h3>\n<p><strong>Use a for loop when:</strong></p>\n<ul>\n<li>You know exactly how many times to loop</li>\n<li>You&#39;re counting or iterating through arrays</li>\n<li>You have a clear start, end, and increment</li>\n</ul>\n<p><strong>Use a while loop when:</strong></p>\n<ul>\n<li>You don&#39;t know how many iterations you need</li>\n<li>You need to access nested or linked data</li>\n</ul>\n<h2>Loop Control: <code>break</code> and <code>continue</code></h2>\n<p>Just like with for loops, you can use <code>break</code> and <code>continue</code> in while loops.</p>\n<h2>Do-While Loops</h2>\n<p>A variation that runs the code block at least once before checking the condition:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">let</span> userInput\n<span class=\"hljs-keyword\">do</span> {\n  userInput = <span class=\"hljs-title function_\">prompt</span>(<span class=\"hljs-string\">&quot;Enter &#x27;yes&#x27; to continue:&quot;</span>)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`You entered: <span class=\"hljs-subst\">${userInput}</span>`</span>)\n} <span class=\"hljs-keyword\">while</span> (userInput !== <span class=\"hljs-string\">&quot;yes&quot;</span>)\n</code></pre><p>The key difference: <code>do-while</code> checks the condition <strong>after</strong> running the code block.</p>\n","markdown":"\n# While Loops\n\nWhile loops are used when you need to repeat code, but you don't know exactly how many times the loop should run. They continue executing as long as a condition remains true.\n\n## Basic While Loop Syntax\n\nA while loop starts with the `while` keyword, followed by a condition in parentheses `()`, and a block of code in curly braces `{}`:\n\n```javascript\nlet i = 0\nwhile (i < 5) {\n  // Code to repeat\n  console.log(`Count: ${i}`)\n  i++ // Important: Don't forget to change i!\n}\n```\n\nThe loop continues as long as the condition in parentheses is `true` and stops when it becomes `false`.\n\n## Converting For Loop to While Loop\n\nHere's how a for loop translates to a while loop:\n\n<!-- prettier-ignore -->\n```javascript\n// For loop\nfor (let i = 0; i < 5; i++) {\n  console.log(i)\n}\n\n// Equivalent while loop\nlet i = 0 // Initialization (outside the loop)\nwhile (i < 5) { // Condition (same as for loop)\n  console.log(i) // Code to run\n  i++ // Increment (inside the loop)\n}\n```\n\nBoth print: `0, 1, 2, 3, 4`\n\n## When to Use While Loops\n\n1. Unknown Number of Iterations\n\n   ```javascript\n   // Keep asking for input until user enters \"quit\"\n   let userInput = \"\"\n   while (userInput !== \"quit\") {\n     userInput = prompt(\"Enter a command (or 'quit' to exit):\")\n     if (userInput !== \"quit\") {\n       console.log(`You entered: ${userInput}`)\n     }\n   }\n   ```\n\n2. Processing Nested Data Structures\n\n   ```javascript\n   const person = {\n     name: \"Kyle\",\n     friend: {\n       name: \"Joe\",\n       friend: {\n         name: \"Sally\",\n         friend: null, // Sally has no friend\n       },\n     },\n   }\n\n   // Get the final friend in the chain\n   let currentPerson = person\n   while (currentPerson.friend !== null) {\n     currentPerson = currentPerson.friend\n     console.log(`Current friend: ${currentPerson.name}`)\n   }\n\n   console.log(`Final friend: ${currentPerson.name}`) // \"Final friend: Sally\"\n   ```\n\n   You can't easily do this with a for loop because you don't know how deep the friend chain goes!\n\n### While Loop vs For Loop\n\n**Use a for loop when:**\n\n- You know exactly how many times to loop\n- You're counting or iterating through arrays\n- You have a clear start, end, and increment\n\n**Use a while loop when:**\n\n- You don't know how many iterations you need\n- You need to access nested or linked data\n\n## Loop Control: `break` and `continue`\n\nJust like with for loops, you can use `break` and `continue` in while loops.\n\n## Do-While Loops\n\nA variation that runs the code block at least once before checking the condition:\n\n```javascript\nlet userInput\ndo {\n  userInput = prompt(\"Enter 'yes' to continue:\")\n  console.log(`You entered: ${userInput}`)\n} while (userInput !== \"yes\")\n```\n\nThe key difference: `do-while` checks the condition **after** running the code block.\n","slug":"while-loops","title":"While Loops","section":"Control Flow","icon":"route","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/08-control-flow/E-while-loops.md","nextSlug":"/fem-getting-started-with-javascript/lessons/control-flow/recursion","prevSlug":"/fem-getting-started-with-javascript/lessons/control-flow/for-loops"}},"__N_SSG":true}