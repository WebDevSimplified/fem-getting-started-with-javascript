{"pageProps":{"post":{"attributes":{"description":"Learn how short-circuit evaluation works with logical operators to write more efficient and cleaner conditional code."},"html":"<h1>Short-Circuit Evaluation</h1>\n<p>Short-circuit evaluation is a powerful feature of JavaScript&#39;s logical operators (<code>&amp;&amp;</code> and <code>||</code>) that can make your code more efficient and concise.</p>\n<h2>What is Short-Circuit Evaluation?</h2>\n<p>Short-circuit evaluation means that JavaScript stops evaluating a logical expression as soon as it knows the final result. It &quot;short-circuits&quot; or skips the remaining parts of the expression.</p>\n<h2>The <code>&amp;&amp;</code> (AND) Operator</h2>\n<p>With the AND operator, <strong>both</strong> operands must be <code>true</code> for the result to be <code>true</code>. If the first operand is <code>false</code>, JavaScript knows the entire expression will be <code>false</code>, so it doesn&#39;t evaluate the second operand.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\">// JavaScript only checks &#x27;a&#x27;, sees it&#x27;s false, and stops</span>\n<span class=\"hljs-keyword\">const</span> result = a &amp;&amp; b\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result) <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">// If we had an expensive function call:</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">expensiveFunction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;This is an expensive operation!&quot;</span>)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n}\n\n<span class=\"hljs-comment\">// expensiveFunction() is never called because a is false</span>\n<span class=\"hljs-keyword\">const</span> result2 = a &amp;&amp; <span class=\"hljs-title function_\">expensiveFunction</span>()\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result2) <span class=\"hljs-comment\">// false (and no console.log from expensiveFunction)</span>\n</code></pre><p>This makes <code>&amp;&amp;</code> perfect for conditional property access:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Safe property access</span>\n<span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-literal\">null</span>\nuser &amp;&amp; user.<span class=\"hljs-property\">name</span> &amp;&amp; <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(user.<span class=\"hljs-property\">name</span>) <span class=\"hljs-comment\">// Won&#x27;t error</span>\n</code></pre><h2>The <code>||</code> (OR) Operator</h2>\n<p>With the OR operator, if the first operand is <code>true</code>, JavaScript knows the entire expression will be <code>true</code>, so it doesn&#39;t evaluate the second operand.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-literal\">false</span>\n\n<span class=\"hljs-comment\">// JavaScript only checks &#x27;a&#x27;, sees it&#x27;s true, and stops</span>\n<span class=\"hljs-keyword\">const</span> result = a || b\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result) <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">expensiveFunction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;This expensive function runs!&quot;</span>)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n}\n\n<span class=\"hljs-comment\">// expensiveFunction() is never called because a is true</span>\n<span class=\"hljs-keyword\">const</span> result2 = a || <span class=\"hljs-title function_\">expensiveFunction</span>()\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result2) <span class=\"hljs-comment\">// true (and no console.log from expensiveFunction)</span>\n</code></pre><p>This makes <code>||</code> perfect for providing fallback values:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> userInput = <span class=\"hljs-string\">&quot;&quot;</span>\n<span class=\"hljs-keyword\">const</span> defaultName = <span class=\"hljs-string\">&quot;Guest&quot;</span>\n\n<span class=\"hljs-comment\">// If userInput is falsy, use defaultName</span>\n<span class=\"hljs-keyword\">const</span> displayName = userInput || defaultName\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(displayName) <span class=\"hljs-comment\">// &quot;Guest&quot;</span>\n\n<span class=\"hljs-comment\">// More examples</span>\n<span class=\"hljs-keyword\">const</span> config = {\n  <span class=\"hljs-attr\">theme</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">0</span>,\n}\n\n<span class=\"hljs-keyword\">const</span> theme = config.<span class=\"hljs-property\">theme</span> || <span class=\"hljs-string\">&quot;light&quot;</span> <span class=\"hljs-comment\">// &quot;light&quot;</span>\n<span class=\"hljs-keyword\">const</span> timeout = config.<span class=\"hljs-property\">timeout</span> || <span class=\"hljs-number\">5000</span> <span class=\"hljs-comment\">// 5000</span>\n<span class=\"hljs-keyword\">const</span> debug = config.<span class=\"hljs-property\">debug</span> || <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// false</span>\n</code></pre><h2>Return Values in Short-Circuit Evaluation</h2>\n<p><strong>Important:</strong> Short-circuit operators don&#39;t just return <code>true</code> or <code>false</code> - they return the actual value that determined the result!</p>\n<h3>AND <code>&amp;&amp;</code> Returns:</h3>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Returns the first falsy value, or the last value if all are truthy</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-literal\">false</span> &amp;&amp; <span class=\"hljs-string\">&quot;hello&quot;</span>) <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-literal\">true</span> &amp;&amp; <span class=\"hljs-string\">&quot;hello&quot;</span>) <span class=\"hljs-comment\">// &quot;hello&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;hi&quot;</span> &amp;&amp; <span class=\"hljs-string\">&quot;bye&quot;</span>) <span class=\"hljs-comment\">// &quot;bye&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;&quot;</span> &amp;&amp; <span class=\"hljs-string\">&quot;hello&quot;</span>) <span class=\"hljs-comment\">// &quot;&quot; (empty string is falsy)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">5</span> &amp;&amp; <span class=\"hljs-number\">10</span> &amp;&amp; <span class=\"hljs-number\">15</span>) <span class=\"hljs-comment\">// 15 (all truthy, returns last)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">5</span> &amp;&amp; <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-number\">15</span>) <span class=\"hljs-comment\">// 0 (first falsy value)</span>\n</code></pre><h3>OR <code>||</code> Returns:</h3>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Returns the first truthy value, or the last value if all are falsy</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-literal\">false</span> || <span class=\"hljs-string\">&quot;hello&quot;</span>) <span class=\"hljs-comment\">// &quot;hello&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-literal\">true</span> || <span class=\"hljs-string\">&quot;hello&quot;</span>) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;hi&quot;</span> || <span class=\"hljs-string\">&quot;bye&quot;</span>) <span class=\"hljs-comment\">// &quot;hi&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;&quot;</span> || <span class=\"hljs-string\">&quot;hello&quot;</span>) <span class=\"hljs-comment\">// &quot;hello&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-literal\">null</span> || <span class=\"hljs-literal\">undefined</span> || <span class=\"hljs-string\">&quot;default&quot;</span>) <span class=\"hljs-comment\">// &quot;default&quot;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">0</span> || <span class=\"hljs-literal\">false</span> || <span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// null (all falsy, returns last)</span>\n</code></pre><h2>Modern Alternatives</h2>\n<p>JavaScript has introduced two new operators that can be used to replace some common short-circuit patterns:</p>\n<h3>Nullish Coalescing <code>??</code></h3>\n<p>The nullish coalescing operator only considers <code>null</code> and <code>undefined</code> as falsy so is perfect for default values when <code>0</code> or <code>false</code> are valid:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> config = {\n  <span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// We want to keep this 0!</span>\n  <span class=\"hljs-attr\">debug</span>: <span class=\"hljs-literal\">null</span>, <span class=\"hljs-comment\">// This should get a default</span>\n}\n\n<span class=\"hljs-comment\">// Using || (considers 0 as falsy)</span>\n<span class=\"hljs-keyword\">const</span> timeout1 = config.<span class=\"hljs-property\">timeout</span> || <span class=\"hljs-number\">5000</span> <span class=\"hljs-comment\">// 5000 (❌)</span>\n<span class=\"hljs-keyword\">const</span> debug = config.<span class=\"hljs-property\">debug</span> || <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// true (✅)</span>\n\n<span class=\"hljs-comment\">// Using ?? (only considers null/undefined as falsy)</span>\n<span class=\"hljs-keyword\">const</span> timeout2 = config.<span class=\"hljs-property\">timeout</span> ?? <span class=\"hljs-number\">5000</span> <span class=\"hljs-comment\">// 0 (✅)</span>\n<span class=\"hljs-keyword\">const</span> debug = config.<span class=\"hljs-property\">debug</span> ?? <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// true (✅)</span>\n</code></pre><h3>Optional Chaining <code>?.</code></h3>\n<p>Optional chaining will only access properties if the value before it is not <code>null</code> or <code>undefined</code>. This is great for safely accessing deeply nested properties:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> user = {\n  <span class=\"hljs-attr\">profile</span>: {\n    <span class=\"hljs-attr\">settings</span>: {\n      <span class=\"hljs-attr\">theme</span>: <span class=\"hljs-string\">&quot;dark&quot;</span>,\n    },\n  },\n}\n\n<span class=\"hljs-comment\">// Old way with &amp;&amp;</span>\n<span class=\"hljs-keyword\">const</span> theme1 =\n  user &amp;&amp; user.<span class=\"hljs-property\">profile</span> &amp;&amp; user.<span class=\"hljs-property\">profile</span>.<span class=\"hljs-property\">settings</span> &amp;&amp; user.<span class=\"hljs-property\">profile</span>.<span class=\"hljs-property\">settings</span>.<span class=\"hljs-property\">theme</span>\n\n<span class=\"hljs-comment\">// New way with optional chaining</span>\n<span class=\"hljs-keyword\">const</span> theme2 = user?.<span class=\"hljs-property\">profile</span>?.<span class=\"hljs-property\">settings</span>?.<span class=\"hljs-property\">theme</span>\n\n<span class=\"hljs-comment\">// Works with methods too</span>\nuser?.<span class=\"hljs-property\">notify</span>?.()\n</code></pre>","markdown":"\n# Short-Circuit Evaluation\n\nShort-circuit evaluation is a powerful feature of JavaScript's logical operators (`&&` and `||`) that can make your code more efficient and concise.\n\n## What is Short-Circuit Evaluation?\n\nShort-circuit evaluation means that JavaScript stops evaluating a logical expression as soon as it knows the final result. It \"short-circuits\" or skips the remaining parts of the expression.\n\n## The `&&` (AND) Operator\n\nWith the AND operator, **both** operands must be `true` for the result to be `true`. If the first operand is `false`, JavaScript knows the entire expression will be `false`, so it doesn't evaluate the second operand.\n\n```javascript\nconst a = false\nconst b = true\n\n// JavaScript only checks 'a', sees it's false, and stops\nconst result = a && b\nconsole.log(result) // false\n\n// If we had an expensive function call:\nfunction expensiveFunction() {\n  console.log(\"This is an expensive operation!\")\n  return true\n}\n\n// expensiveFunction() is never called because a is false\nconst result2 = a && expensiveFunction()\nconsole.log(result2) // false (and no console.log from expensiveFunction)\n```\n\nThis makes `&&` perfect for conditional property access:\n\n```javascript\n// Safe property access\nconst user = null\nuser && user.name && console.log(user.name) // Won't error\n```\n\n## The `||` (OR) Operator\n\nWith the OR operator, if the first operand is `true`, JavaScript knows the entire expression will be `true`, so it doesn't evaluate the second operand.\n\n```javascript\nconst a = true\nconst b = false\n\n// JavaScript only checks 'a', sees it's true, and stops\nconst result = a || b\nconsole.log(result) // true\n\nfunction expensiveFunction() {\n  console.log(\"This expensive function runs!\")\n  return false\n}\n\n// expensiveFunction() is never called because a is true\nconst result2 = a || expensiveFunction()\nconsole.log(result2) // true (and no console.log from expensiveFunction)\n```\n\nThis makes `||` perfect for providing fallback values:\n\n```javascript\nconst userInput = \"\"\nconst defaultName = \"Guest\"\n\n// If userInput is falsy, use defaultName\nconst displayName = userInput || defaultName\nconsole.log(displayName) // \"Guest\"\n\n// More examples\nconst config = {\n  theme: null,\n  timeout: 0,\n}\n\nconst theme = config.theme || \"light\" // \"light\"\nconst timeout = config.timeout || 5000 // 5000\nconst debug = config.debug || false // false\n```\n\n## Return Values in Short-Circuit Evaluation\n\n**Important:** Short-circuit operators don't just return `true` or `false` - they return the actual value that determined the result!\n\n### AND `&&` Returns:\n\n```javascript\n// Returns the first falsy value, or the last value if all are truthy\nconsole.log(false && \"hello\") // false\nconsole.log(true && \"hello\") // \"hello\"\nconsole.log(\"hi\" && \"bye\") // \"bye\"\nconsole.log(\"\" && \"hello\") // \"\" (empty string is falsy)\nconsole.log(5 && 10 && 15) // 15 (all truthy, returns last)\nconsole.log(5 && 0 && 15) // 0 (first falsy value)\n```\n\n### OR `||` Returns:\n\n```javascript\n// Returns the first truthy value, or the last value if all are falsy\nconsole.log(false || \"hello\") // \"hello\"\nconsole.log(true || \"hello\") // true\nconsole.log(\"hi\" || \"bye\") // \"hi\"\nconsole.log(\"\" || \"hello\") // \"hello\"\nconsole.log(null || undefined || \"default\") // \"default\"\nconsole.log(0 || false || null) // null (all falsy, returns last)\n```\n\n## Modern Alternatives\n\nJavaScript has introduced two new operators that can be used to replace some common short-circuit patterns:\n\n### Nullish Coalescing `??`\n\nThe nullish coalescing operator only considers `null` and `undefined` as falsy so is perfect for default values when `0` or `false` are valid:\n\n```javascript\nconst config = {\n  timeout: 0, // We want to keep this 0!\n  debug: null, // This should get a default\n}\n\n// Using || (considers 0 as falsy)\nconst timeout1 = config.timeout || 5000 // 5000 (❌)\nconst debug = config.debug || true // true (✅)\n\n// Using ?? (only considers null/undefined as falsy)\nconst timeout2 = config.timeout ?? 5000 // 0 (✅)\nconst debug = config.debug ?? true // true (✅)\n```\n\n### Optional Chaining `?.`\n\nOptional chaining will only access properties if the value before it is not `null` or `undefined`. This is great for safely accessing deeply nested properties:\n\n```javascript\nconst user = {\n  profile: {\n    settings: {\n      theme: \"dark\",\n    },\n  },\n}\n\n// Old way with &&\nconst theme1 =\n  user && user.profile && user.profile.settings && user.profile.settings.theme\n\n// New way with optional chaining\nconst theme2 = user?.profile?.settings?.theme\n\n// Works with methods too\nuser?.notify?.()\n```\n","slug":"short-circuit-evaluation","title":"Short Circuit Evaluation","section":"Control Flow","icon":"route","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/08-control-flow/G-short-circuit-evaluation.md","nextSlug":"/fem-getting-started-with-javascript/lessons/control-flow/array-methods","prevSlug":"/fem-getting-started-with-javascript/lessons/control-flow/recursion"}},"__N_SSG":true}