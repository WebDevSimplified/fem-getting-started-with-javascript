{"pageProps":{"post":{"attributes":{"description":"Learn how recursion works - when functions call themselves to solve problems that can be broken down into smaller, similar subproblems."},"html":"<h1>Recursion</h1>\n<p>Recursion is when a function calls itself. While this might sound strange at first, it&#39;s a powerful technique for solving problems that can be broken down into smaller, similar sub-problems.</p>\n<p>⚠️ <strong>WARNING:</strong> This is a tricky topic, so take your time to understand it fully!</p>\n<h2>Basic Recursion Example</h2>\n<p>Let&#39;s start with a simple recursive function that prints numbers:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">printNumbers</span>(<span class=\"hljs-params\">number</span>) {\n  <span class=\"hljs-keyword\">if</span> (number &gt; <span class=\"hljs-number\">10</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-comment\">// Base case: stop the recursion</span>\n  }\n\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(number)\n  <span class=\"hljs-title function_\">printNumbers</span>(number + <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// Recursive call: function calls itself</span>\n}\n\n<span class=\"hljs-title function_\">printNumbers</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// Prints: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10</span>\n</code></pre><p>This replaces what you might do with a for loop:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// For loop equivalent</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">10</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i)\n}\n</code></pre><h2>Two Essential Parts of Recursion</h2>\n<p>Every recursive function needs these two components:</p>\n<h3>1. Base Case (Stopping Condition)</h3>\n<p>The condition that stops the recursion from continuing forever:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">if</span> (number &gt; <span class=\"hljs-number\">10</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-comment\">// This stops the recursion</span>\n}\n</code></pre><p>Without a proper base case, you get infinite recursion and a <strong>stack overflow error</strong>:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ This will crash!</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">printHi</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hi&quot;</span>)\n  <span class=\"hljs-title function_\">printHi</span>() <span class=\"hljs-comment\">// RangeError: Maximum call stack size exceeded</span>\n}\n\n<span class=\"hljs-title function_\">printHi</span>()\n</code></pre><h3>2. Recursive Case (Self-Call)</h3>\n<p>The function calling itself with modified parameters:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-title function_\">printNumbers</span>(number + <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// Calls itself with the next number</span>\n</code></pre><h2>Understanding the Call Stack</h2>\n<p>When a function calls itself, each call gets added to the call stack:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">countdown</span>(<span class=\"hljs-params\">n</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(n)\n  <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>\n\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Before&quot;</span>)\n  <span class=\"hljs-title function_\">countdown</span>(n - <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;After&quot;</span>)\n}\n\n<span class=\"hljs-title function_\">countdown</span>(<span class=\"hljs-number\">3</span>)\n\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// 3</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-comment\">// 2</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-comment\">// Before</span>\n<span class=\"hljs-comment\">// 0</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-comment\">// After</span>\n<span class=\"hljs-comment\">// After</span>\n</code></pre><p><strong>Call stack visualization:</strong></p>\n<pre><code class=\"hljs language-text\"><button class=\"copy-btn\">Copy</button>countdown(3) calls countdown(2)\n  countdown(2) calls countdown(1)\n    countdown(1) calls countdown(0)\n      countdown(0) returns\n    countdown(1) returns\n  countdown(2) returns\ncountdown(3) returns\n</code></pre><h2>When to Use Recursion</h2>\n<p>Tree-like Data Structures</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> fileSystem = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;root&quot;</span>,\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;folder&quot;</span>,\n  <span class=\"hljs-attr\">children</span>: [\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;documents&quot;</span>,\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;folder&quot;</span>,\n      <span class=\"hljs-attr\">children</span>: [\n        { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;resume.pdf&quot;</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;file&quot;</span> },\n        { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;notes.txt&quot;</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;file&quot;</span> },\n      ],\n    },\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;photos&quot;</span>,\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;folder&quot;</span>,\n      <span class=\"hljs-attr\">children</span>: [{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;vacation.jpg&quot;</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;file&quot;</span> }],\n    },\n    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;readme.txt&quot;</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;file&quot;</span> },\n  ],\n}\n\n<span class=\"hljs-comment\">// Count all files in the file system</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">countFiles</span>(<span class=\"hljs-params\">item</span>) {\n  <span class=\"hljs-comment\">// Base case: if it&#x27;s a file, count it</span>\n  <span class=\"hljs-keyword\">if</span> (item.<span class=\"hljs-property\">type</span> === <span class=\"hljs-string\">&quot;file&quot;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-comment\">// Recursive case: if it&#x27;s a folder, count files in all children</span>\n  <span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> child <span class=\"hljs-keyword\">of</span> item.<span class=\"hljs-property\">children</span>) {\n    count += <span class=\"hljs-title function_\">countFiles</span>(child) <span class=\"hljs-comment\">// Recursive call for each child</span>\n  }\n  <span class=\"hljs-keyword\">return</span> count\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">countFiles</span>(fileSystem)) <span class=\"hljs-comment\">// 4 files total</span>\n</code></pre><h2>Common Mistakes</h2>\n<ol>\n<li><p>Forgetting the Base Case</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ✅ Good - has base case</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">countdown</span>(<span class=\"hljs-params\">n</span>) {\n  <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-comment\">// Base case</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(n)\n  <span class=\"hljs-title function_\">countdown</span>(n - <span class=\"hljs-number\">1</span>)\n}\n\n<span class=\"hljs-comment\">// ❌ Bad - no base case</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">badCountdown</span>(<span class=\"hljs-params\">n</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(n)\n  <span class=\"hljs-title function_\">badCountdown</span>(n - <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// This will run forever!</span>\n}\n</code></pre></li>\n<li><p>Not Moving Toward the Base Case</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ✅ Good - n gets smaller each time</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">countdown</span>(<span class=\"hljs-params\">n</span>) {\n  <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(n)\n  <span class=\"hljs-title function_\">countdown</span>(n - <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// Moving toward base case</span>\n}\n\n<span class=\"hljs-comment\">// ❌ Bad - n never changes</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">badCountdown</span>(<span class=\"hljs-params\">n</span>) {\n  <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(n)\n  <span class=\"hljs-title function_\">countdown</span>(n) <span class=\"hljs-comment\">// n never changes!</span>\n}\n</code></pre></li>\n</ol>\n<h2>When to Use Recursion</h2>\n<p><strong>✅ Use recursion when:</strong></p>\n<ul>\n<li>Working with tree-like or nested data structures</li>\n<li>The problem can be broken into smaller, similar sub-problems</li>\n<li>The recursive solution is clearer than the iterative one</li>\n<li>Processing hierarchical data (file systems, organizational charts, etc.)</li>\n</ul>\n<p><strong>❌ Avoid recursion when:</strong></p>\n<ul>\n<li>A simple loop would work just as well</li>\n<li>Performance is critical (recursion has overhead)</li>\n<li>The recursive solution is hard to understand</li>\n</ul>\n<h2>Exercise</h2>\n<p>Write a recursive function that finds the maximum value in a nested array structure like this:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> data = [<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]], <span class=\"hljs-number\">7</span>]\n<span class=\"hljs-comment\">// Should return 7</span>\n<span class=\"hljs-comment\">// You can use Array.isArray() to check if an item is an array</span>\n</code></pre><details>\n<summary>Solution</summary>\n\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">findMax</span>(<span class=\"hljs-params\">arr</span>) {\n  <span class=\"hljs-keyword\">let</span> max = -<span class=\"hljs-title class_\">Infinity</span>\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> item <span class=\"hljs-keyword\">of</span> arr) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(item)) {\n      <span class=\"hljs-comment\">// Recursive case: if item is an array, find max in that array</span>\n      <span class=\"hljs-keyword\">const</span> subMax = <span class=\"hljs-title function_\">findMax</span>(item)\n      max = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(max, subMax)\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// Base case: if item is a number, compare with current max</span>\n      max = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(max, item)\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> max\n}\n\n<span class=\"hljs-keyword\">const</span> data = [<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]], <span class=\"hljs-number\">7</span>]\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">findMax</span>(data)) <span class=\"hljs-comment\">// 7</span>\n</code></pre></details>\n","markdown":"\n# Recursion\n\nRecursion is when a function calls itself. While this might sound strange at first, it's a powerful technique for solving problems that can be broken down into smaller, similar sub-problems.\n\n⚠️ **WARNING:** This is a tricky topic, so take your time to understand it fully!\n\n## Basic Recursion Example\n\nLet's start with a simple recursive function that prints numbers:\n\n```javascript\nfunction printNumbers(number) {\n  if (number > 10) {\n    return // Base case: stop the recursion\n  }\n\n  console.log(number)\n  printNumbers(number + 1) // Recursive call: function calls itself\n}\n\nprintNumbers(1) // Prints: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n```\n\nThis replaces what you might do with a for loop:\n\n```javascript\n// For loop equivalent\nfor (let i = 1; i <= 10; i++) {\n  console.log(i)\n}\n```\n\n## Two Essential Parts of Recursion\n\nEvery recursive function needs these two components:\n\n### 1. Base Case (Stopping Condition)\n\nThe condition that stops the recursion from continuing forever:\n\n```javascript\nif (number > 10) {\n  return // This stops the recursion\n}\n```\n\nWithout a proper base case, you get infinite recursion and a **stack overflow error**:\n\n```javascript\n// ❌ This will crash!\nfunction printHi() {\n  console.log(\"Hi\")\n  printHi() // RangeError: Maximum call stack size exceeded\n}\n\nprintHi()\n```\n\n### 2. Recursive Case (Self-Call)\n\nThe function calling itself with modified parameters:\n\n```javascript\nprintNumbers(number + 1) // Calls itself with the next number\n```\n\n## Understanding the Call Stack\n\nWhen a function calls itself, each call gets added to the call stack:\n\n```javascript\nfunction countdown(n) {\n  console.log(n)\n  if (n <= 0) return\n\n  console.log(\"Before\")\n  countdown(n - 1)\n  console.log(\"After\")\n}\n\ncountdown(3)\n\n// Output:\n// 3\n// Before\n// 2\n// Before\n// 1\n// Before\n// 0\n// After\n// After\n// After\n```\n\n**Call stack visualization:**\n\n```text\ncountdown(3) calls countdown(2)\n  countdown(2) calls countdown(1)\n    countdown(1) calls countdown(0)\n      countdown(0) returns\n    countdown(1) returns\n  countdown(2) returns\ncountdown(3) returns\n```\n\n## When to Use Recursion\n\nTree-like Data Structures\n\n```javascript\nconst fileSystem = {\n  name: \"root\",\n  type: \"folder\",\n  children: [\n    {\n      name: \"documents\",\n      type: \"folder\",\n      children: [\n        { name: \"resume.pdf\", type: \"file\" },\n        { name: \"notes.txt\", type: \"file\" },\n      ],\n    },\n    {\n      name: \"photos\",\n      type: \"folder\",\n      children: [{ name: \"vacation.jpg\", type: \"file\" }],\n    },\n    { name: \"readme.txt\", type: \"file\" },\n  ],\n}\n\n// Count all files in the file system\nfunction countFiles(item) {\n  // Base case: if it's a file, count it\n  if (item.type === \"file\") return 1\n\n  // Recursive case: if it's a folder, count files in all children\n  let count = 0\n  for (const child of item.children) {\n    count += countFiles(child) // Recursive call for each child\n  }\n  return count\n}\n\nconsole.log(countFiles(fileSystem)) // 4 files total\n```\n\n## Common Mistakes\n\n1. Forgetting the Base Case\n\n   ```javascript\n   // ✅ Good - has base case\n   function countdown(n) {\n     if (n <= 0) return // Base case\n     console.log(n)\n     countdown(n - 1)\n   }\n\n   // ❌ Bad - no base case\n   function badCountdown(n) {\n     console.log(n)\n     badCountdown(n - 1) // This will run forever!\n   }\n   ```\n\n2. Not Moving Toward the Base Case\n\n   ```javascript\n   // ✅ Good - n gets smaller each time\n   function countdown(n) {\n     if (n <= 0) return\n     console.log(n)\n     countdown(n - 1) // Moving toward base case\n   }\n\n   // ❌ Bad - n never changes\n   function badCountdown(n) {\n     if (n <= 0) return\n     console.log(n)\n     countdown(n) // n never changes!\n   }\n   ```\n\n## When to Use Recursion\n\n**✅ Use recursion when:**\n\n- Working with tree-like or nested data structures\n- The problem can be broken into smaller, similar sub-problems\n- The recursive solution is clearer than the iterative one\n- Processing hierarchical data (file systems, organizational charts, etc.)\n\n**❌ Avoid recursion when:**\n\n- A simple loop would work just as well\n- Performance is critical (recursion has overhead)\n- The recursive solution is hard to understand\n\n## Exercise\n\nWrite a recursive function that finds the maximum value in a nested array structure like this:\n\n```javascript\nconst data = [1, [2, 3], [4, [5, 6]], 7]\n// Should return 7\n// You can use Array.isArray() to check if an item is an array\n```\n\n<details>\n<summary>Solution</summary>\n\n```javascript\nfunction findMax(arr) {\n  let max = -Infinity\n\n  for (const item of arr) {\n    if (Array.isArray(item)) {\n      // Recursive case: if item is an array, find max in that array\n      const subMax = findMax(item)\n      max = Math.max(max, subMax)\n    } else {\n      // Base case: if item is a number, compare with current max\n      max = Math.max(max, item)\n    }\n  }\n\n  return max\n}\n\nconst data = [1, [2, 3], [4, [5, 6]], 7]\nconsole.log(findMax(data)) // 7\n```\n\n</details>\n","slug":"recursion","title":"Recursion","section":"Control Flow","icon":"route","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/08-control-flow/F-recursion.md","nextSlug":"/fem-getting-started-with-javascript/lessons/control-flow/short-circuit-evaluation","prevSlug":"/fem-getting-started-with-javascript/lessons/control-flow/while-loops"}},"__N_SSG":true}