{"pageProps":{"post":{"attributes":{"description":"Learn how to use for loops to repeat code a specific number of times and iterate over data structures."},"html":"<h1>For Loops</h1>\n<p>For loops are used when you need to repeat code a specific number of times. They&#39;re perfect for counting, iterating through arrays, or any task that needs to be done repeatedly.</p>\n<h2>Basic For Loop Syntax</h2>\n<p>A for loop has three main parts separated by semicolons and then a body enclosed in curly braces:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Count: <span class=\"hljs-subst\">${i}</span>`</span>)\n}\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Count: 0</span>\n<span class=\"hljs-comment\">// Count: 1</span>\n<span class=\"hljs-comment\">// Count: 2</span>\n<span class=\"hljs-comment\">// Count: 3</span>\n<span class=\"hljs-comment\">// Count: 4</span>\n</code></pre><ol>\n<li><code>let i = 0</code> - This first part runs once at the start of your loop. It usually creates a variable to keep track of the loop count.</li>\n<li><code>i &lt; 5</code> - The second part is the condition that is checked before each iteration. If it&#39;s true, the code in the loop runs; if false, the loop stops.</li>\n<li><code>i++</code> - The third part runs after each iteration. It usually updates the loop variable (in this case, adding 1 to <code>i</code>).</li>\n<li><code>{ ... }</code> - The curly braces contain the code that runs each time the loop iterates.</li>\n</ol>\n<h3>Simple Counting Example</h3>\n<p>Let&#39;s print <code>&quot;Hi&quot;</code> five times:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Without a loop (repetitive)</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hi&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hi&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hi&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hi&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hi&quot;</span>)\n\n<span class=\"hljs-comment\">// With a for loop (clean)</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hi&quot;</span>)\n}\n</code></pre><p>Both produce the same output, but the for loop is much more maintainable.</p>\n<h2>Common Loop Patterns</h2>\n<ul>\n<li><p>Counting Up</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Count from 1 to 10</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">10</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i)\n}\n</code></pre></li>\n<li><p>Counting Down</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Count down from 10 to 1</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">10</span>; i &gt;= <span class=\"hljs-number\">1</span>; i--) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i)\n}\n</code></pre></li>\n<li><p>Skip Numbers</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Even numbers only</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt;= <span class=\"hljs-number\">10</span>; i += <span class=\"hljs-number\">2</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i) <span class=\"hljs-comment\">// 0, 2, 4, 6, 8, 10</span>\n}\n\n<span class=\"hljs-comment\">// Every third number</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt;= <span class=\"hljs-number\">20</span>; i += <span class=\"hljs-number\">3</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i) <span class=\"hljs-comment\">// 0, 3, 6, 9, 12, 15, 18</span>\n}\n</code></pre></li>\n</ul>\n<h2>Iterating Through Arrays</h2>\n<p>For loops are perfect for going through every item in an array:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> fruits = [<span class=\"hljs-string\">&quot;apple&quot;</span>, <span class=\"hljs-string\">&quot;banana&quot;</span>, <span class=\"hljs-string\">&quot;orange&quot;</span>, <span class=\"hljs-string\">&quot;grape&quot;</span>]\n\n<span class=\"hljs-comment\">// Print with index</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; fruits.<span class=\"hljs-property\">length</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${i}</span>: <span class=\"hljs-subst\">${fruits[i]}</span>`</span>)\n}\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// 0: apple</span>\n<span class=\"hljs-comment\">// 1: banana</span>\n<span class=\"hljs-comment\">// 2: orange</span>\n<span class=\"hljs-comment\">// 3: grape</span>\n</code></pre><h2>Nested For Loops</h2>\n<p>You can put for loops inside other for loops:</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Multiplication table</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">3</span>; i++) {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">1</span>; j &lt;= <span class=\"hljs-number\">3</span>; j++) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${i}</span> × <span class=\"hljs-subst\">${j}</span> = <span class=\"hljs-subst\">${i * j}</span>`</span>)\n  }\n}\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// 1 × 1 = 1</span>\n<span class=\"hljs-comment\">// 1 × 2 = 2</span>\n<span class=\"hljs-comment\">// 1 × 3 = 3</span>\n<span class=\"hljs-comment\">// 2 × 1 = 2</span>\n<span class=\"hljs-comment\">// 2 × 2 = 4</span>\n<span class=\"hljs-comment\">// 2 × 3 = 6</span>\n<span class=\"hljs-comment\">// 3 × 1 = 3</span>\n<span class=\"hljs-comment\">// 3 × 2 = 6</span>\n<span class=\"hljs-comment\">// 3 × 3 = 9</span>\n</code></pre><h2>Loop Control Statements</h2>\n<ul>\n<li><p><code>break</code> - Exit the Loop Early</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Find the first number greater than 5</span>\n<span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>]\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; numbers.<span class=\"hljs-property\">length</span>; i++) {\n  <span class=\"hljs-keyword\">if</span> (numbers[i] &gt; <span class=\"hljs-number\">5</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Found: <span class=\"hljs-subst\">${numbers[i]}</span> at index <span class=\"hljs-subst\">${i}</span>`</span>)\n    <span class=\"hljs-keyword\">break</span> <span class=\"hljs-comment\">// Exit the loop immediately</span>\n  }\n}\n<span class=\"hljs-comment\">// Output: Found: 7 at index 2</span>\n</code></pre></li>\n<li><p><code>continue</code> - Skip to Next Iteration</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Print all numbers except 3</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">5</span>; i++) {\n  <span class=\"hljs-keyword\">if</span> (i === <span class=\"hljs-number\">3</span>) {\n    <span class=\"hljs-keyword\">continue</span> <span class=\"hljs-comment\">// Skip 3</span>\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i)\n}\n<span class=\"hljs-comment\">// Output: 1, 2, 4, 5</span>\n</code></pre></li>\n</ul>\n<h2>For Loop Alternatives</h2>\n<ul>\n<li><p>For...of Loop (for arrays)</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> fruits = [<span class=\"hljs-string\">&quot;apple&quot;</span>, <span class=\"hljs-string\">&quot;banana&quot;</span>, <span class=\"hljs-string\">&quot;orange&quot;</span>]\n\n<span class=\"hljs-comment\">// Traditional for loop</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; fruits.<span class=\"hljs-property\">length</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(fruits[i])\n}\n\n<span class=\"hljs-comment\">// For...of loop</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> fruit <span class=\"hljs-keyword\">of</span> fruits) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(fruit)\n}\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// apple</span>\n<span class=\"hljs-comment\">// banana</span>\n<span class=\"hljs-comment\">// orange</span>\n</code></pre></li>\n<li><p>For...in Loop (for object properties)</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> person = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Kyle&quot;</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>,\n  <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&quot;New York&quot;</span>,\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> person) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${key}</span>: <span class=\"hljs-subst\">${person[key]}</span>`</span>)\n}\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// name: Kyle</span>\n<span class=\"hljs-comment\">// age: 30</span>\n<span class=\"hljs-comment\">// city: New York</span>\n</code></pre></li>\n</ul>\n<h2>Common Mistakes</h2>\n<ol>\n<li><p>Infinite Loops</p>\n<p>Always ensure your loop condition will eventually become false.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ Infinite loop</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i--) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i) <span class=\"hljs-comment\">// This will run forever!</span>\n}\n</code></pre><p><strong>Signs of infinite loops:</strong></p>\n<ul>\n<li>Your browser/program becomes unresponsive</li>\n<li>Console keeps printing the same thing</li>\n<li>You need to force-quit your program</li>\n</ul>\n</li>\n<li><p>Off-by-One Errors</p>\n<p>Make sure your loop conditions are correct to avoid missing the last item or going out of bounds.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>]\n\n<span class=\"hljs-comment\">// ❌ Off-by-one error - misses last item</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr[i]) <span class=\"hljs-comment\">// Only prints 10, 20</span>\n}\n\n<span class=\"hljs-comment\">// ❌ Off-by-one error - goes out of bounds</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt;= arr.<span class=\"hljs-property\">length</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr[i]) <span class=\"hljs-comment\">// Prints 10, 20, 30, undefined</span>\n}\n\n<span class=\"hljs-comment\">// ✅ Correct</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-property\">length</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr[i]) <span class=\"hljs-comment\">// Prints 10, 20, 30</span>\n}\n</code></pre></li>\n<li><p>Modifying the Loop Variable Inside the Loop</p>\n<p>Avoid changing the loop variable inside the loop body, as it can lead to unexpected behavior.</p>\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// ❌ Modifying loop variable</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i)\n  <span class=\"hljs-keyword\">if</span> (i === <span class=\"hljs-number\">1</span>) {\n    i += <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// This will skip numbers</span>\n  }\n}\n<span class=\"hljs-comment\">// Output: 0, 1, 4</span>\n\n<span class=\"hljs-comment\">// ✅ Don&#x27;t modify the loop variable</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i)\n}\n<span class=\"hljs-comment\">// Output: 0, 1, 2, 3, 4</span>\n</code></pre></li>\n</ol>\n<h2>Exercise</h2>\n<p>Write a for loop that:</p>\n<ol>\n<li>Creates an array of the first 10 even numbers (2, 4, 6, 8, ...)</li>\n<li>Then calculates the sum of those numbers in a second loop</li>\n<li>Finally, prints the array and the sum</li>\n</ol>\n<details>\n<summary>Solution</summary>\n\n<pre><code class=\"hljs language-javascript\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-comment\">// Create array of first 10 even numbers</span>\n<span class=\"hljs-keyword\">const</span> evenNumbers = []\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">10</span>; i++) {\n  evenNumbers.<span class=\"hljs-title function_\">push</span>(i * <span class=\"hljs-number\">2</span>)\n}\n\n<span class=\"hljs-comment\">// Calculate sum</span>\n<span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; evenNumbers.<span class=\"hljs-property\">length</span>; i++) {\n  sum += evenNumbers[i]\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Even numbers:&quot;</span>, evenNumbers) <span class=\"hljs-comment\">// [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Sum:&quot;</span>, sum) <span class=\"hljs-comment\">// 110</span>\n</code></pre></details>\n","markdown":"\n# For Loops\n\nFor loops are used when you need to repeat code a specific number of times. They're perfect for counting, iterating through arrays, or any task that needs to be done repeatedly.\n\n## Basic For Loop Syntax\n\nA for loop has three main parts separated by semicolons and then a body enclosed in curly braces:\n\n```javascript\nfor (let i = 0; i < 5; i++) {\n  console.log(`Count: ${i}`)\n}\n// Output:\n// Count: 0\n// Count: 1\n// Count: 2\n// Count: 3\n// Count: 4\n```\n\n1. `let i = 0` - This first part runs once at the start of your loop. It usually creates a variable to keep track of the loop count.\n2. `i < 5` - The second part is the condition that is checked before each iteration. If it's true, the code in the loop runs; if false, the loop stops.\n3. `i++` - The third part runs after each iteration. It usually updates the loop variable (in this case, adding 1 to `i`).\n4. `{ ... }` - The curly braces contain the code that runs each time the loop iterates.\n\n### Simple Counting Example\n\nLet's print `\"Hi\"` five times:\n\n```javascript\n// Without a loop (repetitive)\nconsole.log(\"Hi\")\nconsole.log(\"Hi\")\nconsole.log(\"Hi\")\nconsole.log(\"Hi\")\nconsole.log(\"Hi\")\n\n// With a for loop (clean)\nfor (let i = 0; i < 5; i++) {\n  console.log(\"Hi\")\n}\n```\n\nBoth produce the same output, but the for loop is much more maintainable.\n\n## Common Loop Patterns\n\n- Counting Up\n\n  ```javascript\n  // Count from 1 to 10\n  for (let i = 1; i <= 10; i++) {\n    console.log(i)\n  }\n  ```\n\n- Counting Down\n\n  ```javascript\n  // Count down from 10 to 1\n  for (let i = 10; i >= 1; i--) {\n    console.log(i)\n  }\n  ```\n\n- Skip Numbers\n\n  ```javascript\n  // Even numbers only\n  for (let i = 0; i <= 10; i += 2) {\n    console.log(i) // 0, 2, 4, 6, 8, 10\n  }\n\n  // Every third number\n  for (let i = 0; i <= 20; i += 3) {\n    console.log(i) // 0, 3, 6, 9, 12, 15, 18\n  }\n  ```\n\n## Iterating Through Arrays\n\nFor loops are perfect for going through every item in an array:\n\n```javascript\nconst fruits = [\"apple\", \"banana\", \"orange\", \"grape\"]\n\n// Print with index\nfor (let i = 0; i < fruits.length; i++) {\n  console.log(`${i}: ${fruits[i]}`)\n}\n// Output:\n// 0: apple\n// 1: banana\n// 2: orange\n// 3: grape\n```\n\n## Nested For Loops\n\nYou can put for loops inside other for loops:\n\n```javascript\n// Multiplication table\nfor (let i = 1; i <= 3; i++) {\n  for (let j = 1; j <= 3; j++) {\n    console.log(`${i} × ${j} = ${i * j}`)\n  }\n}\n// Output:\n// 1 × 1 = 1\n// 1 × 2 = 2\n// 1 × 3 = 3\n// 2 × 1 = 2\n// 2 × 2 = 4\n// 2 × 3 = 6\n// 3 × 1 = 3\n// 3 × 2 = 6\n// 3 × 3 = 9\n```\n\n## Loop Control Statements\n\n- `break` - Exit the Loop Early\n\n  ```javascript\n  // Find the first number greater than 5\n  const numbers = [1, 3, 7, 2, 9, 4]\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > 5) {\n      console.log(`Found: ${numbers[i]} at index ${i}`)\n      break // Exit the loop immediately\n    }\n  }\n  // Output: Found: 7 at index 2\n  ```\n\n- `continue` - Skip to Next Iteration\n\n  ```javascript\n  // Print all numbers except 3\n  for (let i = 1; i <= 5; i++) {\n    if (i === 3) {\n      continue // Skip 3\n    }\n    console.log(i)\n  }\n  // Output: 1, 2, 4, 5\n  ```\n\n## For Loop Alternatives\n\n- For...of Loop (for arrays)\n\n  ```javascript\n  const fruits = [\"apple\", \"banana\", \"orange\"]\n\n  // Traditional for loop\n  for (let i = 0; i < fruits.length; i++) {\n    console.log(fruits[i])\n  }\n\n  // For...of loop\n  for (const fruit of fruits) {\n    console.log(fruit)\n  }\n  // Output:\n  // apple\n  // banana\n  // orange\n  ```\n\n- For...in Loop (for object properties)\n\n  ```javascript\n  const person = {\n    name: \"Kyle\",\n    age: 30,\n    city: \"New York\",\n  }\n\n  for (const key in person) {\n    console.log(`${key}: ${person[key]}`)\n  }\n  // Output:\n  // name: Kyle\n  // age: 30\n  // city: New York\n  ```\n\n## Common Mistakes\n\n1. Infinite Loops\n\n   Always ensure your loop condition will eventually become false.\n\n   ```javascript\n   // ❌ Infinite loop\n   for (let i = 0; i < 10; i--) {\n     console.log(i) // This will run forever!\n   }\n   ```\n\n   **Signs of infinite loops:**\n\n   - Your browser/program becomes unresponsive\n   - Console keeps printing the same thing\n   - You need to force-quit your program\n\n2. Off-by-One Errors\n\n   Make sure your loop conditions are correct to avoid missing the last item or going out of bounds.\n\n   ```javascript\n   const arr = [10, 20, 30]\n\n   // ❌ Off-by-one error - misses last item\n   for (let i = 0; i < arr.length - 1; i++) {\n     console.log(arr[i]) // Only prints 10, 20\n   }\n\n   // ❌ Off-by-one error - goes out of bounds\n   for (let i = 0; i <= arr.length; i++) {\n     console.log(arr[i]) // Prints 10, 20, 30, undefined\n   }\n\n   // ✅ Correct\n   for (let i = 0; i < arr.length; i++) {\n     console.log(arr[i]) // Prints 10, 20, 30\n   }\n   ```\n\n3. Modifying the Loop Variable Inside the Loop\n\n   Avoid changing the loop variable inside the loop body, as it can lead to unexpected behavior.\n\n   ```javascript\n   // ❌ Modifying loop variable\n   for (let i = 0; i < 5; i++) {\n     console.log(i)\n     if (i === 1) {\n       i += 2 // This will skip numbers\n     }\n   }\n   // Output: 0, 1, 4\n\n   // ✅ Don't modify the loop variable\n   for (let i = 0; i < 5; i++) {\n     console.log(i)\n   }\n   // Output: 0, 1, 2, 3, 4\n   ```\n\n## Exercise\n\nWrite a for loop that:\n\n1. Creates an array of the first 10 even numbers (2, 4, 6, 8, ...)\n2. Then calculates the sum of those numbers in a second loop\n3. Finally, prints the array and the sum\n\n<details>\n<summary>Solution</summary>\n\n```javascript\n// Create array of first 10 even numbers\nconst evenNumbers = []\nfor (let i = 1; i <= 10; i++) {\n  evenNumbers.push(i * 2)\n}\n\n// Calculate sum\nlet sum = 0\nfor (let i = 0; i < evenNumbers.length; i++) {\n  sum += evenNumbers[i]\n}\n\nconsole.log(\"Even numbers:\", evenNumbers) // [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nconsole.log(\"Sum:\", sum) // 110\n```\n\n</details>\n","slug":"for-loops","title":"For Loops","section":"Control Flow","icon":"route","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/08-control-flow/D-for-loops.md","nextSlug":"/fem-getting-started-with-javascript/lessons/control-flow/while-loops","prevSlug":"/fem-getting-started-with-javascript/lessons/control-flow/switch-statements"}},"__N_SSG":true}