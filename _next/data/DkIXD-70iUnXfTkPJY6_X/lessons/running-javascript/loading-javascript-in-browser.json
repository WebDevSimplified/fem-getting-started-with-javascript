{"pageProps":{"post":{"attributes":{"title":"Loading JavaScript in the Browser","description":"Understanding the different ways to load JavaScript and how they affect page performance."},"html":"<h1>Loading JavaScript in the Browser</h1>\n<p>When building web applications, <strong>how you load JavaScript matters</strong>. Different loading methods can dramatically affect your page&#39;s performance and user experience.</p>\n<h2>HTML Parsing Fundamentals</h2>\n<p>When a browser loads a webpage, it follows a specific process:</p>\n<ol>\n<li><strong>Download HTML</strong> from server</li>\n<li><strong>Parse HTML</strong> from top to bottom</li>\n<li><strong>Build the DOM</strong> (Document Object Model)</li>\n<li><strong>Render the page</strong> to user</li>\n</ol>\n<h3>How JavaScript Works Normally</h3>\n<ul>\n<li>JavaScript <strong>blocks HTML parsing</strong> by default</li>\n<li>Browser <strong>stops everything</strong> to download and execute JavaScript files</li>\n<li>Only <strong>continues parsing</strong> after JavaScript files are done executing</li>\n</ul>\n<h2>Normal Loading (Default)</h2>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;script.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p><img src=\"/fem-getting-started-with-javascript/images/03-running-javascript/normal-js-loading-timeline.svg\" alt=\"Normal JavaScript Loading Timeline\"></p>\n<h3>What Happens</h3>\n<ul>\n<li>Browser reaches <code>&lt;script&gt;</code> tag</li>\n<li><strong>Stops parsing HTML</strong></li>\n<li>Downloads JavaScript file</li>\n<li><strong>Executes JavaScript immediately</strong></li>\n<li>Resumes HTML parsing</li>\n</ul>\n<h3>Body Loading</h3>\n<p>Since the <code>&lt;script&gt;</code> tag executes immediately, if it&#39;s in the <code>&lt;head&gt;</code>, it runs before the body is fully loaded:</p>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;script.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n</code></pre><p>You may see code like the above to get around this problem.</p>\n<h3>Pros</h3>\n<ul>\n<li>✅ <strong>Consistent Script Execution</strong> - scripts run in the order they appear</li>\n</ul>\n<h3>Cons</h3>\n<ul>\n<li>❌ <strong>Blocks HTML parsing</strong> - slows down page load</li>\n<li>❌ <strong>Doesn&#39;t Wait For DOM</strong> - scripts run before DOM is ready if not at the end of <code>&lt;body&gt;</code></li>\n<li>❌ <strong>Slow</strong> - doesn&#39;t allow parallel downloads</li>\n</ul>\n<h2>Async Loading</h2>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;script.js&quot;</span> <span class=\"hljs-attr\">async</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p><img src=\"/fem-getting-started-with-javascript/images/03-running-javascript/async-js-loading-timeline.svg\" alt=\"Async JavaScript Loading Timeline\"></p>\n<h3>What Happens</h3>\n<ul>\n<li>Browser reaches <code>&lt;script&gt;</code> tag</li>\n<li><strong>Continues parsing HTML</strong> while downloading JS in the background</li>\n<li><strong>Stops parsing</strong> when JS download completes</li>\n<li>Executes JavaScript immediately</li>\n<li>Resumes HTML parsing</li>\n</ul>\n<h3>Pros</h3>\n<ul>\n<li>✅ <strong>Non-blocking</strong> - while downloading</li>\n</ul>\n<h3>Cons</h3>\n<ul>\n<li>⚠️ <strong>Still blocks parsing</strong> - while executing</li>\n<li>❌ <strong>Unpredictable order</strong> - scripts may execute in any order based on download speed</li>\n<li>❌ <strong>Doesn&#39;t Wait For DOM</strong> - scripts may run before DOM is ready</li>\n</ul>\n<h2>3. Defer Loading (Recommended)</h2>\n<pre><code class=\"hljs language-html\"><button class=\"copy-btn\">Copy</button><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;script.js&quot;</span> <span class=\"hljs-attr\">defer</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p><img src=\"/fem-getting-started-with-javascript/images/03-running-javascript/defer-js-loading-timeline.svg\" alt=\"Defer JavaScript Loading Timeline\"></p>\n<h3>What Happens</h3>\n<ul>\n<li>Browser reaches <code>&lt;script&gt;</code> tag</li>\n<li><strong>Continues parsing HTML</strong> while downloading JS</li>\n<li><strong>Waits until HTML parsing is complete</strong></li>\n<li>Executes JavaScript in order</li>\n</ul>\n<h3>Pros</h3>\n<ul>\n<li>✅ <strong>Non-blocking</strong> - while downloading or executing</li>\n<li>✅ <strong>Predictable order</strong> - scripts run in document order</li>\n<li>✅ <strong>Waits for DOM</strong> - scripts run after the DOM is fully loaded</li>\n</ul>\n<h3>Cons</h3>\n<ul>\n<li>None! This is the best method for most scripts.</li>\n</ul>\n<h2>Comparison</h2>\n<p><img src=\"/fem-getting-started-with-javascript/images/03-running-javascript/improved-js-loading-timeline.svg\" alt=\"Comparison JavaScript Loading Timeline\"></p>\n","markdown":"\n# Loading JavaScript in the Browser\n\nWhen building web applications, **how you load JavaScript matters**. Different loading methods can dramatically affect your page's performance and user experience.\n\n## HTML Parsing Fundamentals\n\nWhen a browser loads a webpage, it follows a specific process:\n\n1. **Download HTML** from server\n2. **Parse HTML** from top to bottom\n3. **Build the DOM** (Document Object Model)\n4. **Render the page** to user\n\n### How JavaScript Works Normally\n\n- JavaScript **blocks HTML parsing** by default\n- Browser **stops everything** to download and execute JavaScript files\n- Only **continues parsing** after JavaScript files are done executing\n\n## Normal Loading (Default)\n\n```html\n<script src=\"script.js\"></script>\n```\n\n![Normal JavaScript Loading Timeline](/fem-getting-started-with-javascript/images/03-running-javascript/normal-js-loading-timeline.svg)\n\n### What Happens\n\n- Browser reaches `<script>` tag\n- **Stops parsing HTML**\n- Downloads JavaScript file\n- **Executes JavaScript immediately**\n- Resumes HTML parsing\n\n### Body Loading\n\nSince the `<script>` tag executes immediately, if it's in the `<head>`, it runs before the body is fully loaded:\n\n```html\n<body>\n  <h1>Hello World</h1>\n  <script src=\"script.js\"></script>\n</body>\n```\n\nYou may see code like the above to get around this problem.\n\n### Pros\n\n- ✅ **Consistent Script Execution** - scripts run in the order they appear\n\n### Cons\n\n- ❌ **Blocks HTML parsing** - slows down page load\n- ❌ **Doesn't Wait For DOM** - scripts run before DOM is ready if not at the end of `<body>`\n- ❌ **Slow** - doesn't allow parallel downloads\n\n## Async Loading\n\n```html\n<script src=\"script.js\" async></script>\n```\n\n![Async JavaScript Loading Timeline](/fem-getting-started-with-javascript/images/03-running-javascript/async-js-loading-timeline.svg)\n\n### What Happens\n\n- Browser reaches `<script>` tag\n- **Continues parsing HTML** while downloading JS in the background\n- **Stops parsing** when JS download completes\n- Executes JavaScript immediately\n- Resumes HTML parsing\n\n### Pros\n\n- ✅ **Non-blocking** - while downloading\n\n### Cons\n\n- ⚠️ **Still blocks parsing** - while executing\n- ❌ **Unpredictable order** - scripts may execute in any order based on download speed\n- ❌ **Doesn't Wait For DOM** - scripts may run before DOM is ready\n\n## 3. Defer Loading (Recommended)\n\n```html\n<script src=\"script.js\" defer></script>\n```\n\n![Defer JavaScript Loading Timeline](/fem-getting-started-with-javascript/images/03-running-javascript/defer-js-loading-timeline.svg)\n\n### What Happens\n\n- Browser reaches `<script>` tag\n- **Continues parsing HTML** while downloading JS\n- **Waits until HTML parsing is complete**\n- Executes JavaScript in order\n\n### Pros\n\n- ✅ **Non-blocking** - while downloading or executing\n- ✅ **Predictable order** - scripts run in document order\n- ✅ **Waits for DOM** - scripts run after the DOM is fully loaded\n\n### Cons\n\n- None! This is the best method for most scripts.\n\n## Comparison\n\n![Comparison JavaScript Loading Timeline](/fem-getting-started-with-javascript/images/03-running-javascript/improved-js-loading-timeline.svg)\n","slug":"loading-javascript-in-browser","title":"Loading JavaScript in the Browser","section":"Running JavaScript","icon":"file-code","filePath":"/home/runner/work/fem-getting-started-with-javascript/fem-getting-started-with-javascript/lessons/03-running-javascript/C-loading-javascript-in-browser.md","nextSlug":"/fem-getting-started-with-javascript/lessons/variable-basics/primitive-types-and-operations","prevSlug":"/fem-getting-started-with-javascript/lessons/running-javascript/your-first-javascript-app"}},"__N_SSG":true}